{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"평소 독서를 즐긴다. 하지만 최근, 고민이 생겼다. '똑같은 시간, 효과적으로 읽을 수 없을까?' 고민을 안고 살던 중 『책 잘 읽는 방법』이라는 제목이 눈에 띄어 읽기 시작했다. 책 추천이 가장 인상 깊다. 각 절마다 주제에 맞는 책을 자연스럽게 추천해 줘서 사고를 확장시키기 좋았다. 심지어 부록도 따로 있다. 『논어』 언급이 많아 궁금증이 생겼다. 실…","fields":{"slug":"/how-to-read-book/"},"frontmatter":{"date":"July 27, 2025","title":"책 잘 읽는 방법","tags":["독서"]},"rawMarkdownBody":"\n![『책 잘 읽는 방법』(김봉진, 북스톤, 2018)](how-to-read-book.jpg)\n\n평소 독서를 즐긴다. 하지만 최근, 고민이 생겼다. '똑같은 시간, 효과적으로 읽을 수 없을까?' 고민을 안고 살던 중 『책 잘 읽는 방법』이라는 제목이 눈에 띄어 읽기 시작했다.\n\n- 책 추천이 가장 인상 깊다. 각 절마다 주제에 맞는 책을 자연스럽게 추천해 줘서 사고를 확장시키기 좋았다. 심지어 부록도 따로 있다. 『논어』 언급이 많아 궁금증이 생겼다.\n- 실용적 방법 보단 저자의 경험을 통해 독서를 바라보는 태도를 개선하기 좋았다.\n- 최근 만화책을 주로 읽어 긴 글을 읽기 버겁게 느껴졌다. 하지만 이 책은 오히려 편안하게 다가왔다. 시집처럼 짧고 간결한 형식으로 구성되어 가볍게 넘기며 읽기 좋았다. 현재 독서가 부담처럼 느껴진다면 추천한다.\n- 일주일에 한 권 읽기로 시작해서 어렵고 두꺼운 책 읽기도 도전하고 싶다.\n\n**<참고 자료>**\n\n- [『책 잘 읽는 방법』(김봉진, 북스톤, 2018)](https://product.kyobobook.co.kr/detail/S000001899585)"},{"excerpt":"객체 지향 언어 Java에서는 어떻게 객체를 비교할까? 객체를 비교하는 핵심 개념, 동일성(Identity)과 동등성(Equality)에 대해 알아보자. 동일성과 동등성 동일성(Identity) 동일성은 두 객체가 같은 메모리 주소를 참조하는지를 의미한다.  연산자를 사용하며, 동일한 객체를 참조할 때 를 반환한다.  연산자는 값을 비교한다. 기본형(pr…","fields":{"slug":"/identity-vs-equality/"},"frontmatter":{"date":"July 13, 2025","title":"동일성(Identity) vs. 동등성(Equality)","tags":["Java"]},"rawMarkdownBody":"\n객체 지향 언어 Java에서는 어떻게 객체를 비교할까? 객체를 비교하는 핵심 개념, 동일성(Identity)과 동등성(Equality)에 대해 알아보자.\n\n## 동일성과 동등성\n\n### 동일성(Identity)\n\n```java\n@DisplayName(\"동일한 참조를 가진 두 객체의 동일성은 같다.\")\n@Test\nvoid testIdentityWithSameReference() {\n    Coffee coffee1 = new Coffee(\"아메리카노\");\n    Coffee coffee2 = coffee1;\n    \n    boolean result = coffee1 == coffee2;\n\n    assertThat(result).isTrue();\n}\n\n@DisplayName(\"다른 참조를 가진 두 객체의 동일성은 다르다.\")\n@Test\nvoid testIdentityWithDifferentReference() {\n    Coffee coffee1 = new Coffee(\"아메리카노\");\n    Coffee coffee2 = new Coffee(\"아메리카노\");\n    \n    boolean result = coffee1 == coffee2;\n    \n    assertThat(result).isFalse();\n}\n```\n\n- 동일성은 두 객체가 같은 메모리 주소를 참조하는지를 의미한다.\n- `==` 연산자를 사용하며, 동일한 객체를 참조할 때 `true`를 반환한다.\n\n> `==` 연산자는 값을 비교한다. 기본형(primitive type)에서는 실제값을 비교하고, 참조형(reference type)에서는 참조값을 비교한다.\n\n### 동등성(Equality)\n\n```java\n@DisplayName(\"두 객체의 실제값이 같다면 동등성은 같다.\")\n@Test\nvoid testEqualityWithSameContent() {\n    Coffee coffee1 = new Coffee(\"아메리카노\");\n    Coffee coffee2 = new Coffee(\"아메리카노\");\n    \n    // Object.equals() 재정의 필요\n    boolean result = coffee1.equals(coffee2);\n\n    assertThat(result).isTrue();\n}\n\n@DisplayName(\"두 객체의 실제값이 다르다면 동등성은 같지 않다.\")\n@Test\nvoid testEqualityWithDifferentContent() {\n    Coffee coffee1 = new Coffee(\"아메리카노\");\n    Coffee coffee2= new Coffee(\"카페라떼\");\n    \n    boolean result = coffee1.equals(coffee2);\n    \n    assertThat(result).isFalse();\n}\n```\n\n- 동등성은 두 객체의 실제값이 같은지를 의미한다.\n- `Object`의 `equals()` 메서드를 사용하며, 서로 다른 객체라도 실제값이 같다면 `true`를 반환한다.\n\n## equals() 메서드 오버라이딩\n\n```java\n// Object.equals() 기본 구현\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\n- 동등성을 비교할 때 `Object.equals()`는 재정의(override) 하지 않으면 의도대로 동작하지 않는다. 기본적으로 참조값을 비교한다.\n- 사용자 정의 클래스에서 의미 있는 동등성, 실제값을 비교하기 위해서는 재정의가 필요하다.\n- `equals()`를 재정의 할 때는, 반드시 `hashCode()`도 재정의 해야 한다.\n    - Java의 기본 규약을 지키고 해시 기반 컬렉션(HashMap, HashTable, HashSet)에서 객체가 예상대로 동작하기 위함\n\n## 정리\n\n- 동일성과 동등성은 두 인스턴스 비교에 사용하는 핵심 개념이다. 동일성은 두 인스턴스가 '같은 존재'인지 판단한다. 동등성은 '같은 값'으로 평가되는지 확인한다.\n- 객체에서 `==`는 참조값을 비교하고, `equals()`는 객체의 실제값을 비교한다.\n- 동일한 객체는 항상 동등하지만, 동등한 객체는 반드시 동일한 객체는 아니다.\n\n**<참고 자료>**\n\n- [김영한 '김영한의 실전 자바 - 중급 1편'](https://inf.run/FiFGQ)\n- [『이것이 취업을 위한 백엔드 개발이다 with 자바』(이준형, 한빛미디어, 2024)](https://product.kyobobook.co.kr/detail/S000211834105)\n"},{"excerpt":"애플리케이션을 종료했지만 포트를 계속 사용하는 문제가 발생했다. 해결방법 포트번호로 프로세스를 조회한다. PID를 강제종료한다. 는 list open files를 의미한다. 시스템에서 사용 중인 프로세스(파일) 목록을 출력한다. : 프로토콜과 포트 정보를 출력한다. 는 process ID를 의미한다. 운영체제가 각 프로세스를 구분하기 위해 부여하는 고유 …","fields":{"slug":"/how-to-kill-port-in-use/"},"frontmatter":{"date":"June 29, 2025","title":"사용 중인 포트 종료하기","tags":["개발환경"]},"rawMarkdownBody":"\n애플리케이션을 종료했지만 포트를 계속 사용하는 문제가 발생했다.\n\n## 해결방법\n\n1. 포트번호로 프로세스를 조회한다.\n2. PID를 강제종료한다.\n\n```shell\nlsof -i :<포트번호>\n```\n\n- `lsof`는 list open files를 의미한다. 시스템에서 사용 중인 프로세스(파일) 목록을 출력한다.\n- `-i`: 프로토콜과 포트 정보를 출력한다.\n\n```shell \nkill -9 <PID> \n``` \n\n- `PID`는 process ID를 의미한다. 운영체제가 각 프로세스를 구분하기 위해 부여하는 고유 번호다.\n- `kill` 명령은 프로세스에게 신호를 보내는 명령어다. 프로세스를 종료, 일시정지 할 때 주로 사용한다.\n- `-9`:  **강제 즉시 종료 시그널**\n"},{"excerpt":"2025년, 벌써 절반이 지났다. 흥미도 사라지고 스트레스받는 일도 많아지면서 집중력을 완전히 잃었다. 제목을 본 순간 '읽어야겠다' 느꼈다. 문제 해결의 실마리를 얻고자 읽기 시작했다. 무기력 = ? 정신건강 전문의 저자가 진료실에서 쌓은 임상경험을 바탕으로 지친 마음을 위로한다. 과학적 근거와 사례를 추가하여 처방전을 전달한다. 무기력과 중독의 연관관…","fields":{"slug":"/why-dont-i-want-to-do-anything/"},"frontmatter":{"date":"June 08, 2025","title":"나는 왜 아무것도 하기 싫을까","tags":["독서"]},"rawMarkdownBody":"\n![『나는 왜 아무것도 하기 싫을까』(배종빈, 포레스트북스, 2025)](9791194530374.jpg)\n\n2025년, 벌써 절반이 지났다. 흥미도 사라지고 스트레스받는 일도 많아지면서 집중력을 완전히 잃었다. 제목을 본 순간 '읽어야겠다' 느꼈다. 문제 해결의 실마리를 얻고자 읽기 시작했다.\n\n## 무기력 = ?\n\n정신건강 전문의 저자가 진료실에서 쌓은 임상경험을 바탕으로 지친 마음을 위로한다. 과학적 근거와 사례를 추가하여 처방전을 전달한다.\n\n- 무기력과 중독의 연관관계와 해결방법, 사례\n- 편한 분위기에서 진료받는 느낌\n- 얇고 큼직한 서체로 구성되어 읽는데 이틀도 걸리지 않음\n\n> 무기력의 시간을 자연의 순환으로 바라보기를 권한다. 나무가 겨울 동안 잎을 떨구고 고요히 쉬듯, 무기력한 시간도 우리의 내면이 새로운 시작을 준비하는 과정일 수 있다. 봄이 오면 나무가 새싹을 틔우듯, 우리 역시\n> 변화와 성장을 맞이할 날이 온다. 이처럼 무기력을 삶의 일부로 받아들이면, 지금의 시간이 영원하지 않다는 사실을 더 분명히 느낄 수 있다.\n\n무기력을 개인의 의지 부족이 아닌 뇌와 감정의 자연스러운 반응으로 정의한 점이 가장 인상 깊다.\n\n## 마치며\n\n출구가 보이지 않는 끝없는 미로에 갇혀 막막하게만 느껴졌는데 위로를 받았다. 물론 무기력 상태가 완전히 사라졌다 할 수 없지만, 적어도 상태를 이해하고 인정하게 되었다.\n앞으로 제안받은 실천법과 함께 작은 실천으로 조금씩 기운을 차렸으면 좋겠다.\n\n**<참고 자료>**\n\n- [『나는 왜 아무것도 하기 싫을까』(배종빈, 포레스트북스, 2025)](https://product.kyobobook.co.kr/detail/S000216482947)\n"},{"excerpt":"프로그래밍 언어. 누구냐, 너? 프로그래밍 언어에서 공통적으로 사용되는 문법의 발전과정을 파악할 수 있다. 역사책 같다. 정리와 저자의 조언이 인상 깊다. (학습법) 가볍게 읽기 좋다. 일부 번역이 자연스럽지 않다. (총칭형) 프로그래밍 언어는 왜 그럴까? 고민한 적 있다면 추천한다. 8장. 형(Type) 비트열은 해석 방법에 따라 전혀 다른 값이 된다.…","fields":{"slug":"/langbook/"},"frontmatter":{"date":"May 19, 2025","title":"코딩을 지탱하는 기술","tags":["독서"]},"rawMarkdownBody":"\n![『코딩을 지탱하는 기술』(니시오 히로카즈, 비제이퍼블릭, 2013)](9788994774480.jpg)\n\n> 프로그래밍 언어. 누구냐, 너?\n\n- 프로그래밍 언어에서 공통적으로 사용되는 문법의 발전과정을 파악할 수 있다. 역사책 같다.\n- 정리와 저자의 조언이 인상 깊다. (학습법)\n- 가볍게 읽기 좋다.\n- 일부 번역이 자연스럽지 않다. (총칭형)\n- 프로그래밍 언어는 왜 그럴까? 고민한 적 있다면 추천한다.\n\n## 8장. 형(Type)\n\n- **비트열은 해석 방법에 따라 전혀 다른 값이 된다. '어떤 종류의 값'인지 의미를 표현하기 위해 타입을 도입했다.**\n- 타입 시스템은 단순한 타입 정의에서 동적 타입, 사용자 정의 타입, 객체 지향, 제네릭, 타입 추론등 다양한 방향으로 발전했다.\n- 동적 타입 언어는 런타임에서 타입을 판별하기 때문에 타입 선언이 필요하지 않다. 대신 언어마다 공통된 인터페이스[^1]를 제공하여 메모리 상에서 다양한 타입을 일관된 방식으로 처리한다.\n\n## 9장. 컨테이너와 문자열\n\n- **자료구조**\n  - 배열(Array): 정수와 값을 대응\n  - 해쉬(Hash): 키와 값을 대응, 키는 모든 타입의 객체가 될 수 있음\n- 자료구조는 정답이 없다. 자신의 상황에 맞춰 선택하는 것이 최선이다.\n- 문자는 모스 부호, 아스키(ASCII), EBCDIC 같은 초기 문자 인코딩을 거쳐 현재는 유니코드(Unicode)가 전 세계의 모든 문자를 표현하는 표준으로 정의했다.\n\n## 10장. 병행 처리\n\n> 문제를 동시에 처리할 때 어떤 일이 발생할까?\n\n- 병행 처리[^2]를 위해 프로세스(Process), 스레드(Thread) 등의 개념이 등장했다. 또한 병행 처리에서 발생하는 문제를 해결하기 위해 락(Lock), 파이버(Fiber) 등의 개념이 등장했다.\n- **병행 처리를 해결하는 방법**\n  - 협력적 멀티태스킹(Cooperative Multitasking): 최적의 시점을 기다려 교대(협력), 초기 Mac OS 9 이전\n  - 선점적 멀티태스킹(Preemptive Multitasking): 일정 시간에 맞춰 교대(강제), 스케줄러가 따로 존재, 현대의 운영체제\n- **경합 상태(Race Condition) 방지법**\n  - 불변(Immutable) 디자인 패턴\n  - 협력적 스레드 사용[^3]: 파이버(Fiber), 코루틴(Coroutine), 그린 스레드(Green Thread)[^4]\n  - 사용 중 표시: 락(Lock)[^5]\n\n## 11장. 객체와 클래스\n\n> 객체 지향의 흐름\n\n- 객체 지향은 현실 세계의 사물(Object)을 컴퓨터 안의 모델(Model)로 구현한 방법이다.\n- Java는 클래스를 설계하고 조립하는 프로그래밍 언어다. \n- 패키지(Package)는 관련 있는 함수, 변수를 묶음으로 표현하기 위해 도입했다. \n  - Python과 Ruby는 모듈(Module)이라 한다.\n- 생성자(Constructor)는 객체를 만드는 함수다.\n- 일급 시민(First-Class Citizen)이란 변수에 할당할 수 있고, 함수의 인자로 전달하거나 반환값으로 쓸 수 있는 값을 의미한다.\n- 클래스의 시작은 '분류'다.\n\n[^1]: Python의 PyObject, Ruby의 VALUE, JavaScript의 tagged pointer, Nan boxing\n[^2]: 프로그램이 계속 동작하고 있는 것처럼 보이지만, 실제로는 잘게 분할해서 실행된다.\n[^3]: 여러 작업이 서로 협력하여 실행 흐름을 제어하는 방식\n[^4]: 운영체제가 아닌, 런타임 환경(JVM)이 관리하는 스레드\n[^5]: 락은 교착 상태(Deadlock)가 발생하는 문제가 있다. 따라서 신중하게 결정해야 한다.\n"},{"excerpt":"이 글은 『코딩을 지탱하는 기술』을 읽고 생각과 지식을 덧붙여 정리했다. 책 내용과 100% 일치하지 않기 때문에 자세한 내용은 원문 참고를 권장한다. 3.1 문법이란 문법이란 언어 설계자가 정한 규칙이다. 문제를 바라보고 해결하는 사고방식에 영향을 준다. 3.2 스택 머신과 Forth 1958년 개발된 FORTH는 문법이 거의 존재하지 않는 언어다. 계…","fields":{"slug":"/coding-basic-3/"},"frontmatter":{"date":"May 05, 2025","title":"3장. 문법의 탄생","tags":["기타"]},"rawMarkdownBody":"\n> 이 글은 『코딩을 지탱하는 기술』을 읽고 생각과 지식을 덧붙여 정리했다. 책 내용과 100% 일치하지 않기 때문에 자세한 내용은 원문 참고를 권장한다.\n\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/6Rqn2GFlmvmV4w9Ala0I1e?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n## 3.1 문법이란\n\n문법이란 언어 설계자가 정한 규칙이다. 문제를 바라보고 해결하는 사고방식에 영향을 준다.\n\n## 3.2 스택 머신과 Forth\n\n```text\n1 2 +\n```\n\n- 1958년 개발된 FORTH는 문법이 거의 존재하지 않는 언어다.\n- 계산 흐름을 명시적으로 표현하며, 스택 머신 개념을 확장시켰다.\n  - 이전에도 존재했던 스택(Stack)을 자료구조로 넘어 프로그래밍 언어 전체의 중심 개념으로 끌어올림\n- JVM(Java Virtual Machine)과 같은 가상 머신도 내부적으로 스택을 사용한다.\n- NASA 우주 탐사 프로젝트[^1]에 활용했다. \n\n## 3.3 구문 트리와 Lisp\n\n```\n(+ 1 2)\n```\n\n- 1958년 개발된 Lisp는 코드를 구문 트리 구조[^2] 그대로 표현한다.\n- Garbage Collection을 최초 도입했다.\n- 일급 함수형 프로그래밍의 핵심 개념[^3] 대중화에 기여했다.\n- JavaScript의 프로토타입 기반에 간접적으로 영향을 끼쳤다.\n\n## 마치며\n\n- 프로그래밍 언어들이 서로 깊이 연결되어 있다는 점이 인상 깊었다. Forth와 Lisp를 주로 다뤘지만, Smalltalk나 Self 같은 언어들의 영향력도 흥미로웠다.\n- 지금까지 사용하던 언어의 기능이 새롭고 특별하다고만 생각했는데 알고 보니 많은 개념들은 이미 오래전 언어에서 출발했다.\n\n### 참고 자료\n\n- [Wikipedia 'Forth (programming language)'](https://en.wikipedia.org/wiki/Forth_(programming_language))\n- [Wikipedia 'Lisp (programming language)'](https://en.wikipedia.org/wiki/Lisp_(programming_language))\n\n[^1]: https://www.forth.com/resources/space-applications/\n[^2]: 코드나 문장을 문법 규칙에 따라 계층적으로 분해한 형식\n[^3]: 일급 함수(First-class Function), 클로저(Closure), 불변성(Immutable)"},{"excerpt":"이 글은 『코딩을 지탱하는 기술』을 읽고 생각과 지식을 덧붙여 정리했다. 책 내용과 100% 일치하지 않기 때문에 자세한 내용은 원문 참고를 권장한다. 프로그래밍 언어의 역사, 특히 Java의 탄생 배경과 철학을 간단히 살펴보자. 2.1 프로그래밍 언어 탄생의 역사  지금은 '당연하다'고 여기는 것도 과거에는 아직 발견되지 않은 것이었다. 그러므로 옛날 …","fields":{"slug":"/coding-basic-2/"},"frontmatter":{"date":"May 02, 2025","title":"2장. 프로그래밍 언어를 조감하다","tags":["기타"]},"rawMarkdownBody":"\n> 이 글은 『코딩을 지탱하는 기술』을 읽고 생각과 지식을 덧붙여 정리했다. 책 내용과 100% 일치하지 않기 때문에 자세한 내용은 원문 참고를 권장한다.\n\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/0eu4C55hL6x29mmeAjytzC?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n프로그래밍 언어의 역사, 특히 Java의 탄생 배경과 철학을 간단히 살펴보자.\n\n## 2.1 프로그래밍 언어 탄생의 역사\n\n![프로그래밍 언어 탄생의 역사 <출처: 장태근블로그>](programming-languages-history.png)\n\n> 지금은 '당연하다'고 여기는 것도 과거에는 아직 발견되지 않은 것이었다. 그러므로 옛날 사람 시점에서 생각하는 방법은 새로운 것을 배우는 사람에겐 매우 유리하게 작용한다.\n\n## 2.2 프로그래밍 언어 탄생의 목적\n\n### 프로그래머의 3대 미덕\n\n[Perl](https://www.perl.org/)[^1]의 설계자 Larry Wall은 프로그래머가 가져야 할 3가지 자질로 '나태, 조바심, 자만심'을 제안했다.\n\n1. 나태: 반복되는 일을 피하고자 자동화를 고민한다.\n2. 조바심: 느린 프로그램을 용납하지 않고 개선한다.\n3. 자만심: 틀린 것을 방치하지 않는다.\n\n### Java가 추구하는 편리함\n\n> WORA(Write Once, Run Anywhere)\n\n- 코드를 한 번 작성하면 다양한 플랫폼에서 활용할 수 있다.\n- 일반적으로 소프트웨어는 운영체제에 따라 다른 방식으로 개발, 수정이 필요하다. 하지만 James Gosling은 가상 머신(JVM)을 활용하여 문제를 해결했다.\n\n## 마치며\n\n프로그래밍 언어를 기술적으로만 이해하기보다 언어가 '왜' 필요했는지 시대적 요구사항과 함께 바라보니 재밌다. \n그동안 요약 영상이나 설명으로 잘 이해되지 않던 개념들이 이번 기회로 연결되고 그려지고 있다.\n\nPython과 Ruby가 Java보다 먼저 등장했다는 사실에 놀랐다. 대중적으로 인식되고 실무에 자리 잡기까지 상당히 오랜 시간이 필요하다는 것을 다시 한번 느꼈다.\n\n### 참고 자료\n\n- [Wikipedia 'History of programming languages'](https://en.wikipedia.org/wiki/History_of_programming_languages)\n- [[반도체 인명사전] 포트란의 창시자 존 배커스](https://news.skhynix.co.kr/john-backers-founder-of-fortran/)\n- [[반도체 인명사전] 자바의 창시자 제임스 고슬링](https://news.skhynix.co.kr/james-gosling-founder-of-java/)\n\n[^1]: Practical Extraction and Report Language"},{"excerpt":"이 글은 『코딩을 지탱하는 기술』을 읽고 생각과 지식을 덧붙여 정리했다. 책 내용과 100% 일치하지 않기 때문에 자세한 내용은 원문 참고를 권장한다. 어떻게 최적화하면 언어를 더욱 재밌게, 효과적으로 학습할 수 있을까? 학습법은 항상 고민하는 주제다. 새로운 언어를 배울 때 시작부터 중요한 점을 가려내기란 쉽지 않다. 효과적으로 언어를 배우는 방법 2가…","fields":{"slug":"/coding-basic-1/"},"frontmatter":{"date":"May 01, 2025","title":"1장. 효율적으로 언어 배우기","tags":["기타"]},"rawMarkdownBody":"\n> 이 글은 『코딩을 지탱하는 기술』을 읽고 생각과 지식을 덧붙여 정리했다. 책 내용과 100% 일치하지 않기 때문에 자세한 내용은 원문 참고를 권장한다.\n\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/3AoeaZs8dFemFJr3JdzOL0?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n어떻게 최적화하면 언어를 더욱 재밌게, 효과적으로 학습할 수 있을까? 학습법은 항상 고민하는 주제다. 새로운 언어를 배울 때 시작부터 중요한 점을 가려내기란 쉽지 않다. 효과적으로 언어를 배우는 방법 2가지를 제안한다.\n\n### 1.1 비교를 통한 배움\n\n> Java에서는 참거짓 값을 위한 형을 가지고 있어서 조건식에서도 그 형을 사용하지 않으면 안 된다. 0은 단순히 정수형을 의미하기 때문에 조건식에 0을 사용하게\n> 되면 컴파일 에러가 발생한다.\n\n```groovy\nclass NumberTruthyTest {\n\n    @DisplayName(\"숫자 0을 조건식에 사용하면 falsy로 평가한다\")\n    @Test\n    void shouldTreatZeroAsFalsyInCondition() {\n        def number = 0\n\n        def result = evaluateNumberTruthiness(number)\n\n        assertEquals('0은 falsy', result)\n    }\n\n    @Test\n    @DisplayName(\"0 이외의 숫자는 truthy로 평가한다\")\n    void shouldTreatNonZeroAsTruthyInCondition() {\n        def number = 1\n\n        def result = evaluateNumberTruthiness(number)\n\n        // then\n        assertEquals('0 이외의 숫자는 truthy', result)\n    }\n\n    private static String evaluateNumberTruthiness(def number) {\n        if (number) {\n            return '0 이외의 숫자는 truthy'\n        } else {\n            return '0은 falsy'\n        }\n    }\n}\n```\n\n- Java의 조건식(Condition)은 `Boolean` 자료형을 사용해야 한다. 다른 자료형을 허용하지 않는다.\n- 대부분의 정적 타입 기반 JVM 언어(Java, Kotlin, Scala 등)는 조건식에 `Boolean` 자료형만 허용한다. 하지만 [Groovy](https://groovy-lang.org/)처럼 동적 타입\n  기반 언어는 `truthy/falsy` 개념을 지원한다.\n\n## 1.2 역사를 통한 배움\n\n### 언어 설계자의 의도를 이해하자\n\n> 프로그래밍 언어도 사람이 만든 것이다. 언어 설계자는 어떤 문제를 해결하기 위해 그 언어를 만든 것일까? 그 언어가 어떤 흐름을 따라 만들어졌는지 알게 되면\n> 그 기능이 왜 필요한지 납득할 수 있게 된다.\n\n![James Gosling씨, 당신의 의도는 무엇인가요? <출처: JetBrains>](jetbrains-james-gosling.jpg)\n\n- Java는 네트워크 장치, 임베디드 시스템 등 '다양한 환경에서 동작하는 언어'를 위해 개발했다.\n- Java 문법은 C, C++의 영향을 받았다.\n- Java는 처음에 Oak라고 불렸지만 Green이라는 이름을 거쳐 Java로 최종 변경됐다.\n\n## 마치며\n\n![간절함이 보내온 신호 우리의 시간은 이어져 있다 <출처: 시그널>](signal.jpg)\n\n프로젝트 실습 외에 언어를 학습할 때 어떤 방식을 선택하면 좋을지 고민하다 선택했던 방법 2가지를 제안해서 놀라웠다. 두 가지 방법 모두 흥미롭지만 역사를 통해 배웠을 때 특히 재미를 느꼈다. 따분하게 느껴진다면 선배들의 간절함을 떠올려보자.\n\n### 참고 자료\n\n- [Wikipedia 'Java (programming language)'](https://en.wikipedia.org/wiki/Java_(programming_language))\n- [Oracle 'Introduction to Java TM Technology'](https://www.oracle.com/java/technologies/introduction-to-java.html)"},{"excerpt":"부끄럼 많은 한 달을 보냈다. 어김없이 찾아온 4월은 늘 같은 자리로 밀어 넣었다. 하루는 빈 것처럼 흘렀지만, 이상하게 무겁게 채워져 있었다. 인간 실격: 오디션 생각을 멈췄다. 생각하지 않으려 애쓸수록 괴로움은 더욱 단단히 얽혀 아무것도 하고 싶지 않았다. 타인에게 보이는 부끄러움보다 스스로 마주하는 부끄러움이 더욱 깊었다. 마치며  프로세스 종료를 …","fields":{"slug":"/monthly-20250430/"},"frontmatter":{"date":"April 27, 2025","title":"2025 월간 장태근 4월호 '생존법'","tags":["회고/월간"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/puw1hdSnSX0?si=OaygwqLo5StVcwPq\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n부끄럼 많은 한 달을 보냈다. 어김없이 찾아온 4월은 늘 같은 자리로 밀어 넣었다. 하루는 빈 것처럼 흘렀지만, 이상하게 무겁게 채워져 있었다.\n\n## 인간 실격: 오디션\n\n- 생각을 멈췄다. 생각하지 않으려 애쓸수록 괴로움은 더욱 단단히 얽혀 아무것도 하고 싶지 않았다.\n- 타인에게 보이는 부끄러움보다 스스로 마주하는 부끄러움이 더욱 깊었다.\n\n## 마치며 \n\n![Jacob Peter Gowy - The Fall of Icarus <출처: Wikipedia>](gowy-icaro-prado.jpg)\n\n프로세스 종료를 통해 교착상태에서 벗어났다. 밀랍 날개가 녹아내려 추락한 이카루스처럼, 매년 같은 계절에 같은 실수를 반복하며 떨어지고 있었다. 5월에는 다시 정상을 향해 조심스럽게 비행하고 싶다. 디스크 조각 모음을 통해 기반이 단단히 다져지길 바란다.\n"},{"excerpt":"목표 기본형, 변수와 배열을 사용하는 방법을 학습한다. 기본형 변수와 배열 사용법 Java 기본형(Primitive Type)은 , , , 처럼 값을 변수에 직접 대입한다. Kotlin Kotlin은 모든 타입을 객체로 취급한다. 하지만 내부적으로 Java의 기본형으로 처리한다. 기본형 종류와 값의 범위 그리고 기본값 Java와 Kotlin 모두 동일한 …","fields":{"slug":"/study-halle-2/"},"frontmatter":{"date":"April 19, 2025","title":"데이터 타입, 변수 그리고 배열","tags":["Java/Kotlin"]},"rawMarkdownBody":"\n## 목표\n\n기본형, 변수와 배열을 사용하는 방법을 학습한다.\n\n## 기본형 변수와 배열 사용법\n\n**Java**\n\n```java\nint balance = 10000;\nint[] numbers = {1, 2, 3, 4, 5, 6};\n```\n\n기본형(Primitive Type)은 `int`, `long`, `double`, `boolean`처럼 값을 변수에 직접 대입한다.\n\n**Kotlin**\n\n```kotlin\nval balance: Int = 10000\nval numbers = arrayOf(1, 2, 3, 4, 5, 6)\n```\n\nKotlin은 모든 타입을 객체로 취급한다. 하지만 내부적으로 Java의 기본형으로 처리한다.\n\n## 기본형 종류와 값의 범위 그리고 기본값\n\nJava와 Kotlin 모두 동일한 범위를 갖는다. 하지만 Kotlin은 기본값이 없기 때문에 초기화가 필요하다.\n\n## 리터럴(Literal)\n\n개발자가 직접 입력한 고정된 값을 의미한다.\n\n## 변수 선언 및 초기화하는 방법\n\n변수 선언은 컴퓨터 메모리 공간을 확보하고 데이터를 저장한다. 변수의 이름, 식별자를 통해 메모리 공간에 접근한다. \n\n**Java**\n\n```java\nint amount = 12900;\n```\n\n**Kotlin**\n\n```kotlin\n// 읽기 전용 변수 (변경 불가능)\nval number: Int = 10\n\n// 변경 가능한 변수\nvar amount = 12900 \namount = 13000\n```\n\n## 변수의 스코프와 라이프 타임\n\n```kotlin\nfun main() {\n    val x = 10\n    if (true) {\n        val y = 20\n        println(\"x의 값: $x\") // 10\n        println(\"y의 값: $y\") // 20\n    } // y 라이프 타임 종료\n} // x 라이프 타임 종료\n```\n\n**스코프(Scope)란 접근 가능한 범위를 의미한다.** 지역 변수는 선언된 코드 블록 안에서만 접근 가능하다. 코드 블록을 벗어나면 접근할 수 없다. 스코프를 통해 필요한 곳에서만 접근할 수 있는 한정된 코드를 작성하자.\n\n## 자동 형변환과 명시적 형변환\n\n**Java**\n\n작은 범위 숫자 타입에서 큰 범위 숫자 타입으로 값을 대입할 때 개발자는 직접 형변환 하지 않아도 된다. 자동으로 일어나기 때문에 자동 형변환(Promotion) 또는 묵시적 형변환이라 한다.\n\n서로 다른 타입을 계산할 때 큰 범위로 자동 형변환이 일어난다.\n\n```java\ndouble doubleValue = 1.8;\nint intValue = (int) doubleValue; // 1\n```\n\n큰 범위 숫자 타입에서 작은 범위 숫자 타입으로 값을 대입할 때 개발자가 직접 형변환 코드를 입력한다. 이를 명시적 형변환(Casting)이라 한다. 소수점이 버려지고 오버플로(Overflow)를 유의해야 한다.\n\n**Kotlin**\n\n```kotlin\nval intValue = 10\nval longValue = intValue.toLong()\n```\n\nKotlin은 자동 형변환이 발생하지 않는다. 명시적 변환 함수를 호출한다.\n\n## 배열 선언하기\n\n**Java**\n\n```java\n// 1차원 배열\nint[] array = new int[3];\nint[] numbers = {1, 2, 3};\n\n// 2차원 배열\nint[][] twoDArray = new int[2][3]; \n```\n\n**Kotlin**\n\n```kotlin\n// 1차원 배열\nval array = IntArray(3)\nval numbers = arrayOf(1, 2, 3)\n\n// 2차원 배열\nval twoDArray = Array(2) { Array<Int>(3) {0} }\n```\n\n## 타입 추론과 var 키워드 사용법\n\n**Java**\n\nJava 10부터 `var` 키워드를 사용하여 타입 추론을 지원한다.\n\n```java\nvar number = 10; // int\nvar text = \"Hello\"; // String\n```\n\n**Kotlin**\n\nKotlin은 기본적으로 타입을 추론한다.\n\n```kotlin\nval number = 10\nval text = \"Hello\"\n```\n\n## 참고 자료\n\n- [『Kotlin in Action: 2/e 』(세바스티안 아이그너·로만 엘리자로프·스베트라나 이사코바·드미트리 제메로프, 에이콘출판, 2025)](https://product.kyobobook.co.kr/detail/S000215768644)\n- [김영한의 실전 자바 - 기본편](https://inf.run/PuC6W)\n"},{"excerpt":"목표 자바, 코틀린 소스파일을 JVM으로 실행하는 과정 이해하기 JVM이란 무엇인가 JVM(Java Virtual Machine, 자바 가상 머신)은 자바 프로그램을 실행하기 위한 도구다. 개발자는 작성한 자바 코드를 바로 실행할 수 없다. 소스파일을 JVM이 이해할 수 있는 바이트코드로 변환해야 한다. 변환한 바이트코드는 운영체제(OS)에 독립적으로 동…","fields":{"slug":"/study-halle-1/"},"frontmatter":{"date":"April 13, 2025","title":"JVM은 무엇이며 자바 코드는 어떻게 실행하는 것인가","tags":["Java/Kotlin"]},"rawMarkdownBody":"\n## 목표\n\n- 자바, 코틀린 소스파일을 JVM으로 실행하는 과정 이해하기\n\n## JVM이란 무엇인가\n\n**JVM(Java Virtual Machine, 자바 가상 머신)은 자바 프로그램을 실행하기 위한 도구다.** 개발자는 작성한 자바 코드를 바로 실행할 수 없다. 소스파일을 JVM이 이해할 수 있는 바이트코드로 변환해야 한다. 변환한 바이트코드는 운영체제(OS)에 독립적으로 동작하기 때문에, 동일하게 프로그램을 실행할 수 있다. 덕분에 핵심 가치인 'WORA(Write Once, Run Anywhere)[^1]'를 제공한다. 즉, JVM은 동일한 환경에서 동작할 수 있도록 중간에서 도와주는 핵심 도구다.\n\n## 컴파일 하는 방법\n\n```shell \njavac <소스파일>\n``` \n\n자바 소스파일(`.java`)은 `javac` 명령을 통해 컴파일된다. 명령을 실행하면 바이트 코드를 담은 `.class`파일을 생성한다.\n\n```shell\nkotlinc <소스파일 또는 디렉터리> -include-runtime -d <jar 이름>\n``` \n\n코틀린 소스파일(`.kt`)은 `kotlinc`명령을 통해 컴파일하며 동일한 `.class`파일을 생성한다.\n\n![코틀린 빌드 과정](kotlin-build-process.jpg)\n\nJVM은 언어와 상관없이 `.class` 파일을 실행한다. 하지만 코틀린은 코틀린 런타임 라이브러리(Kotlin Runtime Library)라는 추가 정보가 필요하다. 코틀린 런타임 라이브러리에는 코틀린 내장 클래스와 API 의존 관계가 담겨있다.\n\n## 실행하는 방법\n\n```shell\njava HelloWorld\n```\n\n생성된 `.class`파일은 `java`명령을 통해 실행한다.\n\n```shell\njava -jar <jar 이름>\n```\n\n코틀린은 생성된 `JAR`파일을 실행한다. \n\n## 바이트코드란 무엇인가\n\n바이트코드(Bytecode)는 소스 코드를 컴파일한 결과물이며, JVM이 이해하고 실행할 때 사용한다.\n\n## JIT 컴파일러란 무엇이며 어떻게 동작하는지\n\n- JIT(Just-In-Time) 컴파일러는 바이트코드를 실행 시점에 기계어로 변환하는 컴파일러다. JVM 성능 최적화에 핵심이다. JIT는 프로그램의 실행 과정에서 자주 사용되는 코드를 발견하고, 기계어로 변환하여 성능을 향상시킨다. 덕분에 반복 실행 시 높은 성능을 제공한다.\n\n## JDK와 JRE의 차이\n\n- JRE(Java Runtime Environment): JVM, 프로그램에 실행에 필요한 라이브러리를 포함하여 **프로그램을 실행하기 위한 환경을 제공한다.** JDK의 일부다.\n- JDK(Java Development Kit): 컴파일러, 디버거 등 필요한 요소를 모두 포함한다. **프로그램을 만드는데 필요한 모든 것이 담겨있다.**\n\n## 참고 자료\n\n- [『Kotlin in Action: 2/e 』(세바스티안 아이그너·로만 엘리자로프·스베트라나 이사코바·드미트리 제메로프, 에이콘출판, 2025)](https://product.kyobobook.co.kr/detail/S000215768644)\n\n[^1]: 한 번 작성하면 어디서든 실행 가능"},{"excerpt":"웹은 지식을 공유하기 위해 등장했다. 웹을 동작시키는 핵심은 HTTP다. HTTP는 서버와 클라이언트의 요청을 기억하지 않는 무상태(Stateless) 프로토콜로 설계됐다. 초기에는 간단한 요청과 응답을 주고받았기 때문에 충분했다. 쿠키(Cookie) 웹은 상업적으로 발전하기 시작했다. 온라인 쇼핑몰 같은 맞춤 서비스를 제공하기 위해서는 이전 요청을 기억…","fields":{"slug":"/http-cookie-and-session/"},"frontmatter":{"date":"April 06, 2025","title":"HTTP 쿠키와 세션","tags":["네트워크","HTTP"]},"rawMarkdownBody":"\n웹은 지식을 공유하기 위해 등장했다. 웹을 동작시키는 핵심은 HTTP다. HTTP는 서버와 클라이언트의 요청을 기억하지 않는 무상태(Stateless) 프로토콜로 설계됐다. 초기에는 간단한 요청과 응답을 주고받았기 때문에 충분했다.\n\n\n## 쿠키(Cookie)\n\n웹은 상업적으로 발전하기 시작했다. 온라인 쇼핑몰 같은 맞춤 서비스를 제공하기 위해서는 이전 요청을 기억해야 한다. 1994년, 문제를 해결하기 위해 넷스케이프(Netscape) 개발자 루 몬틀리(Lou Montulli)는 쿠키(Cookie)를 고안했다.\n\n쿠키는 사용자가 웹 사이트에 접속할 때 서버가 브라우저에게 전달하는 작은 데이터 조각이다. 브라우저는 로컬에 데이터를 저장하고, 다시 방문할 때 요청과 쿠키를 함께 전달한다. 서버는 쿠키를 통해 사용자를 식별한다. 덕분에 사용자는 매번 로그인하지 않아도 맞춤형 서비스를 제공받을 수 있다.\n\n## 세션(Session) \n\n하지만 쿠키는 브라우저에 저장하기 때문에 보안상 문제와 쿠키의 한계가 있었다. 단점을 보완하기 위해 1995년 세션(Session)이 등장했다.\n\n세션은 서버가 직접 사용자의 정보를 관리하고 저장한다. 서버는 클라이언트의 요청마다 세션이라는 저장소를 생성하고 세션 아이디를 쿠키에 담아 응답한다. 클라이언트가 서버로 다시 요청할 때 세션 아이디를 함께 전달하면, 서버는 사용자를 쉽게 판별할 수 있다.\n\n따라서 쿠키는 세션을 위한 열쇠가 됐고, 세션은 서버에서 더욱 안전하고 효과적으로 사용자 상태를 관리할 수 있다.\n\n## 정리\n\n- HTTP는 상태를 유지하지 않는 무상태 프로토콜이다.\n- 상태를 유지하기 위해 쿠키와 세션이 등장했다.\n- 쿠키는 클라이언트에서 세션을 식별하는 열쇠 역할을 한다.\n- 세션은 서버에서 관리되는 사용자 상태 관리 저장소다.\n\n## 마치며\n\n태산같던 HTTP도 시작은 간단했다. 문제를 해결하기 위해 점점 새로운 개념을 도입한 점이 가장 흥미로웠다. 이어지는 캐시, 토큰과 같은 기술도 **어떤 문제를 해결하기 등장했는지 중점으로 접근**하면 개념 정리에 유용할 것 같다.\n\n### 참고 자료\n\n- [『그림으로 배우는 HTTP & Network Basic』(우에노 센, 영진닷컴, 2015)](https://product.kyobobook.co.kr/detail/S000000554505)"},{"excerpt":"Kotlin 조건문 코틀린은 가 표현식이기 때문에 삼항 연산자를 제공하지 않는다. 자바나 자바스크립트의 삼항 연산자를 대체한다. 표현식이란 값을 반환하는 코드를 의미한다. 조건이 여러 개 일 때는 이 가독성에 좋다. Conditions and loops Ternary operator 마치며 봉위수기, 위기에 처한 경우 불필요한 것을 버려라. 진짜 봄이 찾…","fields":{"slug":"/daily-250402/"},"frontmatter":{"date":"April 02, 2025","title":"2025-04-02 WatchOut","tags":["회고/일간","Kotlin/코틀린"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/3oRw1Wqci8aww8fWildPza?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n## Kotlin\n\n### 조건문\n\n- 코틀린은 `if`가 표현식이기 때문에 삼항 연산자를 제공하지 않는다. 자바나 자바스크립트의 삼항 연산자를 대체한다.\n- 표현식이란 값을 반환하는 코드를 의미한다.\n- 조건이 여러 개 일 때는 `when`이 가독성에 좋다.\n- [Conditions and loops](https://kotlinlang.org/docs/control-flow.html)\n- [Ternary operator](https://discuss.kotlinlang.org/t/ternary-operator/2116)\n\n## 마치며\n\n> 봉위수기, 위기에 처한 경우 불필요한 것을 버려라.\n\n진짜 봄이 찾아온 걸까? 쏟아지는 잠을 참기 어렵다. 한번 잠에 들면 깊은 잠에 빠진다. 내일은 장소를 바꾸고 산책을 시도해야겠다.\n\n### 오늘의 함께 읽기\n\n- [[그게 뭔가요](생성형 AI에서 '추론'이란)](https://byline.network/2025/04/1-1295/): 추론(inference) vs. 추론(reasoning)\n"},{"excerpt":"사월이 지났다고 헤어질 순 없어. 컴퓨터 밑바닥의 비밀 chapter 2 프로그램이 실행되었지만, 뭐가 뭔지 하나도 모르겠다 Q. 스레드는 어떻게 동작할까? 요청이 발생할 때마다 스레드를 만드면 되지 않을까? 긴 작업에 적합하다. 하지만 짧은 작업은 효율이 좋지 않다. 스레드를 준비하는 시간이 처리 시간보다 짧다면 자원 낭비가 크다. 자원을 효과적으로 사…","fields":{"slug":"/daily-250401/"},"frontmatter":{"date":"April 01, 2025","title":"2025-04-01 사월이 지나면 우리 헤어져요","tags":["회고/일간","CS"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/5lEvC4905fBtL9GjJKionT?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n사월이 지났다고 헤어질 순 없어.\n\n## 컴퓨터 밑바닥의 비밀\n\n> chapter 2 프로그램이 실행되었지만, 뭐가 뭔지 하나도 모르겠다\n\n### Q. 스레드는 어떻게 동작할까? 요청이 발생할 때마다 스레드를 만드면 되지 않을까?\n\n긴 작업에 적합하다. 하지만 짧은 작업은 효율이 좋지 않다. 스레드를 준비하는 시간이 처리 시간보다 짧다면 자원 낭비가 크다. **자원을 효과적으로 사용하기 위해 스레드 풀(thread pool)을 도입했다.**\n\n## 마치며\n\n![마취총을 몇 번 맞았을까? <출처: 명탐정 코난>](detective-conan.jpg)\n\n누군가 마취총을 상시 휴대하고 쏜 듯하다. 유독 피곤함을 이기기 힘들었다. 피로가 쌓인 것 같다. 조절이 필요하다.\n\n### 오늘의 함께 읽기\n\n- [딱 하루! 열리는 인프런 천원샵](https://www.inflearn.com/tag-curation/common_tag/aprilfoolsday2504)\n  - [이정환 Winterlood '한 입 크기로 잘라먹는 타입스크립트(TypeScript)'](https://inf.run/EvrS5)\n  - [효빈 Hyobin '한 번에 끝내는 자바스크립트: 바닐라 자바스크립트로 SPA 개발까지'](https://inf.run/9vjKE)\n  - [JSCODE 박재성 '비전공자도 이해할 수 있는 Docker 입문/실전'](https://inf.run/GvHgg)\n"},{"excerpt":"웃음 참기 실패! Kotlin 숫자 끝에 을 붙이면  타입으로 추론한다. 또는 의 표현 범위를 넘으면 정수 리터럴을 으로 추론한다. 숫자에 언더바를 사용할 때는, 뒤에서부터 3자리씩 나눠 사용하는 것이 가독성에 좋다. Numbers HTTP 초기, 개인 컴퓨터가 보급됐지만 서로의 해답을 공유할 수 없었다. 1991년, 월드와이드웹(www)의 창시자 '팀 …","fields":{"slug":"/daily-250331/"},"frontmatter":{"date":"March 31, 2025","title":"2025-03-31 계속 웃을 순 없어!","tags":["회고/일간","Kotlin/코틀린","HTTP","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/6ZPIZDuCF5qcVZIcKgifRN?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n웃음 참기 실패!\n\n## Kotlin\n\n```kotlin\n// Long 타입 추론\nval numL1 = 10L\nval numL2 = 12345678912345\nval numL3 = 100_000_000_000\n```\n\n- 숫자 끝에 `L`을 붙이면 `Long` 타입으로 추론한다. 또는 `Int`의 표현 범위[^1]를 넘으면 정수 리터럴을 `Long`으로 추론한다.\n- 숫자에 언더바를 사용할 때는, 뒤에서부터 3자리씩 나눠 사용하는 것이 가독성에 좋다.\n- [Numbers](https://kotlinlang.org/docs/numbers.html)\n\n## HTTP\n\n- 초기, 개인 컴퓨터가 보급됐지만 서로의 해답을 공유할 수 없었다.\n- 1991년, 월드와이드웹(www)의 창시자 '팀 버너스 리'는 **서로 각기 다른 사람들의 생각을 모아 하나의 해답을 만들기 위해 웹이 등장했다.** 완벽하진 않았지만 완벽에 가까웠다.\n- HTTP는 무상태(stateless) 프로토콜이다. 간단한 요청을 주고받기 위해 무상태로 설계했다. 요청과 응답을 서버가 알고 있지 않기 때문에 확장성이 좋다.\n- 무상태에서 로그인은 어떻게 이뤄질까? 간단한 HTTP에서 새로운 기술이 필요했다. 세션과 쿠키가 등장했다.\n- [[SDF2013] '팀 버너스 리'가 월드와이드웹(www)을 만든 이유](https://www.youtube.com/watch?v=1OTsLkvPwH8)\n- [1991년, 인터넷의 발명과 인터넷 브라우저 전쟁](https://www.youtube.com/watch?v=taJV5cigzNY)\n\n## 정재승의 과학 콘서트\n\n꾸글 글쓰기 스터디에 나눌 이야기를 미리 정리했다.\n\n### 책속으로\n\n> 어떤 물리학자는 로키 산맥에 줄지어 선 산봉우리들의 높낮이를 소리로 변환하여 아주 그럴듯한 음악을 작곡하기도 했다. 그래서 컴퓨터 음악을 전공하는 사람들 중에는 **자연의 패턴을 음악으로 변환하여 작곡하는 경우도 늘어났는데, 이런 장르를 '프랙털 음악(fractal music)'이라고 부른다.**\n> -127쪽\n\n>  앞서 설명했듯이 작은 구조가 전체 구조와 유사한 형태로 되풀이 되는 구조를 '프랙털'이라고 한다. (...) 프랙털은 자연이 만들어낸 가장 중요한 내재적인 특징 중의 하나이며 우리는 그속에서 아름다움을 느낀다고 물리학자들은 믿고 있다. 바흐가 작곡한 음악의 악보를 자세히 들여다보면 음표둘의 분포가 매우 질서 정연하며, 전체 패턴이 하나의 악절, 심지어는 한 마디 안에서 유사한 구조가 되풀이 되는 것을 발견할 수 있다.\n>  -133쪽 ∼ 134쪽\n\n- [부분과 전체가 동일한 모양으로 끊임없이 반복되는 프랙탈 구조 / YTN 사이언스](https://www.youtube.com/watch?v=bGhKj01mCLY)\n\n## 마치며 \n\n- 아생연후살타, 나에게 주어진 문제를 해결하고 주위를 둘러보자.\n- 남아있는 돈을 확인한 결과, 소비습관을 정비하고 잡다한 생각이 사라졌다. 당장 해야 할 일을 하자.\n\n### 오늘의 함께 읽기\n\n- [더이상 웹을 탐험하지 않는 시대](https://mag.surfit.io/the-end-of-web-exploration/): 조화가 중요하다고 느꼈다. 개인적으로 직접 검색하고, 개요를 전혀 모르는 지식만 AI의 도움을 받고 있다.\n- [시간 절약해주는 무료 아이콘 사이트](https://brunch.co.kr/@mobiinside/5383): 픽토그램을 사용해 생활코딩 방식으로 글을 작성할 수 있다.\n- [『해커, 광기의 랩소디(복간판)』(스티븐 레비, 한빛미디어, 2019)](https://product.kyobobook.co.kr/detail/S000001810147): 해커정신의 흥망성쇠\n- [김영한의 실전 자바 로드맵 소개](https://www.youtube.com/watch?v=mcD_lLViQqw): 문법을 넘어 깊이를 다루는 강의\n    - **백문이 불여일타**\n    - 예제를 꼭 따라 하세요. 명심하세요.\n    - 이해가 잘 되지 않아도 처음에는 쭉 따라 하며 익숙해지세요.\n    - 돌아와서 복습하며 정리하세요. 권장드립니다.\n- [튜링의 사과 '아르코 의자'](https://office.hyundailivart.co.kr/p/P200188609)\n- [카일 스쿨 '글또 1~10기. 7년의 커뮤니티 운영 회고'](https://zzsza.github.io/diary/2025/03/30/geultto-operation-retrospective/): 꾸글에 참고하기 좋은 자료, 전문 리뷰어가 가장 흥미롭다.\n- [안 보면 강의만 쌓인 개발자가 가질 공부법](https://www.youtube.com/watch?v=XO-r1PFCf3U&t=8s): 불안을 뒤로하는 방법\n    - 지금 당장 해야 할 문제를 탐색하고 실천한다.\n    - 포기를 하는 순간 핑계를, 할 수 있다고 다짐하는 순간 방법을 찾는다.\n\n[^1]: -2,147,483,648 (2의 31승)\n"},{"excerpt":"착수 작년 <월간 장태근> 시리즈는 자유롭게 한 달 일상을 정리했다. 이번 시리즈는 테마를 만들고 싶다는 생각이 들었다. 이번 글은 『미생』을 참고했다. 벚꽃과 눈이 공존할 수 있음을 체험하는 3월을 보냈다. 1수 <일간 장태근> 부검: Under Pressure  학습한 내용을 한 수 복기하듯 정리했지만 쉽게 발행까지는 이어지지 않았다. 미처 완생 하지…","fields":{"slug":"/monthly-20250330/"},"frontmatter":{"date":"March 30, 2025","title":"2025 월간 장태근 3월호 'Not a Dream'","tags":["회고/월간"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/EOEOe_2C6ZQ?si=pf2qwQ577b1pk4qR\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n## 착수\n\n> 작년 <월간 장태근> 시리즈는 자유롭게 한 달 일상을 정리했다. 이번 시리즈는 테마를 만들고 싶다는 생각이 들었다. 이번 글은 『미생』을 참고했다.\n\n벚꽃과 눈이 공존할 수 있음을 체험하는 3월을 보냈다.\n\n## 1수 <일간 장태근> 부검: Under Pressure\n\n![3월 일간 장태근 결과 <출처: 장태근블로그>](results-of-the-daily-series-in-march.png)\n\n학습한 내용을 한 수 복기하듯 정리했지만 쉽게 발행까지는 이어지지 않았다. 미처 완생 하지 못한 글을 바라볼 때마다 숨 쉬듯 아쉬웠다.\n시리즈 덕분에 기술 글쓰기, 테크니컬 라이팅에 걸린 부담을 덜었다. 뜻밖의 수확도 많았다. 일상엔 소소한 규칙이 포석처럼 놓였고 곧 삶의 리듬이 됐다. 기록과 발행이 즐겁다.\n\n임시로 둔 두 편을 빼고 총 열다섯 편을 작성했다. **스무 번의 기회중 열다섯이니, 75% 성과를 이뤘다.** 발행하지 못한 기록을 추가할 까 했으나, 끝내 부자연스럽다는 결론을 내렸다.\n미생에 사활을 걸지 않은 덕에 다음을 기약한다.\n\n## 2수 강철의 연금술사: Again\n\n![강철의 연금 술사 <출처: 장태근블로그>](fullmetal-alchemist.JPG)\n\n> 강철의 연금술사 캐릭터들의 대사에는 인사와 감사의 말을 되도록 신경을 썼다. 인사는 자신과 타인을 잇는 커뮤니케이션 방법 중 가장 간단히 할 수 있는 것. \n> 감사의 말은 \"사람은 주의 사람과 서로 도우며 살고 있다는 것\"을 실감하게 해주는 것이라고 생각하기 때문이다. 그리고 이 연재를 마친 지금, 이 작품에 관여해 주신 모든 분들께 \n> \"어디선가 다시 만나요\"와 \"정말 고마웠습니다\"를 바칩니다.\n> <br>\n> <출처: 강철의 연금술사>\n\n강철의 연금술사 명예회원이 될 수 있다면 정기적으로 후원하고 싶다. 미쳤다. 생일선물로 받은 기회가 전권 소장으로 이어졌다. 덕분에 과거의 '나'와 또다시 연결됐다. \n읽기에 거부감 없던 비결은 만화책 덕분이다. 너무 재밌어서 용돈을 쪼개고, 언덕을 넘어 빌려읽던 시절의 풍경이 선명하다. 웃음이 새어 나온다. \n앞으로 더 많은 만화책을 만나고, 따뜻한 감상을 블로그에 자주 녹여내고 싶다. 함께여서 행복하다.\n\n## 3수 이달의 인터뷰: CREDIT\n\n질문과 답변을 모아 인터뷰 형식으로 정리했다. \n\n### Q. 학습 동기, 원동력이 무엇인가요?\n\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/o5BtIoHwB7k?si=qw5f-7yR3g_wB8FS&amp;start=982\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n생존확률을 높이기 위해 포석을 깔았다. 다른 선택지는 애초에 없다고, 삶을 인정하고 각인시켰다. **정석이나 수 읽기보다 중요한 건 적극적으로 임하는 자세라고 생각한다.** \n누구도 다음 수를 알려줄 수 없다. 스스로 묻고, 탐색하는 수순만이 유일한 최선이라 믿는다. 매 순간이 미생이겠지만, 그래서 두어볼 가치가 있다.\n\n> 해야 하는 일이 아니라, 하고 싶은 일이 될 수 있기를\n\n### Q. 블로그의 방향성이 있나요?\n\n![나는 행복합니다 <출처: 장태근블로그>](boardgames-in-march.png)\n\n따뜻한 봄과 함께 친구를 유독 자주 만났다. 마음껏 대화를 나누고, 보드게임도 원 없이 즐겼다. 흔한 \"어떻게 지냈어\" 인사 속에도 가끔은 사려 깊은 마음이 느껴진다.\n자연스레 좋아하는 글쓰기 이야기를 꺼냈고, 블로그도 소개했다. \"이해하기 어렵다\", \"무슨 말을 하는지 모르겠다\"라는 반응을 흘려들을 수도 있었지만 이번엔 조금 더 주목하고 싶다.\n누군가의 이야기를 귀담아듣듯, 친절한 글을 쓰고 싶다.\n\n## 마치며\n\n방송국의 봄은 수 읽기 같다. 다양한 수순의 변화를 꾀하듯, 삶의 포석을 다채롭게 펼쳤다. 숱한 변칙수와 응수를 거친 끝에, 쓸만한 한수가 발견되면 좋겠다.\n부디 수 읽기가 헛되지 않기를, 원하는 국면에 안착하기를 기대한다.\n\n### 예고\n\n- 프로세스와 스레드\n- 퍼사드 패턴\n- 동적 언어 vs. 정적 언어, 함수와 클래스\n- 키노트 이미지 편집, vim\n"},{"excerpt":"감탄사 연발! 일상은 시트콤이다. 컴퓨터 밑바닥의 비밀 chapter 2, 프로그램이 실행되었지만, 뭐가 뭔지 하나도 모르겠다 프로세스는 무엇이고, 왜 존재하는가 스레드란 무엇이고, 왜 존재하는가 자바 알고리즘 인터뷰 with 코틀린 3장_코틀린, 구글이 인정한 공식 언어 디스어셈블러,  디컴파일(Decompile)은 이해를 돕는다. 코틀린 파일을 자바로…","fields":{"slug":"/daily-250328/"},"frontmatter":{"date":"March 28, 2025","title":"2025-03-28 우주 like 섬띵 투 드링크","tags":["회고/일간","CS","Kotlin/코틀린"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/1jaxahszmrHF1WG2HdYXaD?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**감탄사 연발! 일상은 시트콤이다.**\n\n## 컴퓨터 밑바닥의 비밀\n\n> chapter 2, 프로그램이 실행되었지만, 뭐가 뭔지 하나도 모르겠다\n\n- 프로세스는 무엇이고, 왜 존재하는가\n- 스레드란 무엇이고, 왜 존재하는가\n\n## 자바 알고리즘 인터뷰 with 코틀린\n\n> 3장_코틀린, 구글이 인정한 공식 언어\n\n- 디스어셈블러, `javap`\n- 디컴파일(Decompile)은 이해를 돕는다. 코틀린 파일을 자바로 디컴파일하면 코틀린이 어떤 자바 코드로 변환, 실행하는지 유추할 수 있다.\n  - IntelliJ, CFR\n- 코틀린은 컴파일 타임에서 자바보다 다소 느리다. 하지만 런타임에서는 실행 속도가 동일하다.\n\n## 마치며\n\n![<출처: 거침없이 하이킥!>](high-kick!.jpg)\n\n왁자지껄 시끌벅적 우당탕탕 좌충우돌 천방지축, 수식어가 끝없이 붙어야 할 정도로 웃었다. 지하철도 잘못 타고 벽에 부딪혔는데 재밌었다. 아무래도 유토피아의 황홀함에 얼빠 졌던 게 분명하다. 자주 방문하고 싶은 아지트를 찾았다.\n\n좋다, 나쁘다의 기준은 실행했을 때 풍기는 냄새로 판별한다. 웃음이 많고 간직하고 싶던 추억을 보면 좋음이 분명하다. 읽기 쉬운 글에 주위를 돌린다.\n\n### 오늘의 함께 읽기\n\n- [이선협 '개발자의 추상적, 구조적 사고'](https://kciter.so/posts/developers-abstraction-structural-thinking/)\n- [이선협 '코딩 테스트 이모저모'](https://kciter.so/posts/coding-test-story/)\n- [GeekNews '커스텀 웨딩 캐릭터 만들기'](https://news.hada.io/topic?id=19804)\n\n구조의 아름다움에서 세상을 바라보는 따뜻한 시선을 느낀다.\n"},{"excerpt":"노동요, 내가 나로 살 수 있다면, 재가 된대도 난 좋아 1. Java to Kotlin 1. 당신의 엔티티는 안전하십니까 는 와 1:1 대응될까? 가 없으면 는 허상인가? 추상적이고 보편적인 엔티티를 구체화한 결과가 라고 생각한다. 문맥에 따라 다르지만, 주로 사용하는 엔티티는 도메인 엔티티(비즈니스 객체)를 의미한다. 의 뿌리는 에 가깝다. 추상적인 …","fields":{"slug":"/daily-250327/"},"frontmatter":{"date":"March 27, 2025","title":"2025-03-27 HOT","tags":["회고/일간","Kotlin/코틀린","CS","Design Pattern/디자인 패턴"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/406IpEtZPvbxApWTGM3twY?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n- 노동요, 내가 나로 살 수 있다면, 재가 된대도 난 좋아\n\n## 1. Java to Kotlin\n\n### 1. 당신의 엔티티는 안전하십니까\n\n> 1. `엔티티`는 `JPA의 엔티티(@Entity)`와 1:1 대응될까?\n> 2. `JPA`가 없으면 `엔티티`는 허상인가?\n\n- 추상적이고 보편적인 엔티티를 구체화한 결과가 `JPA 엔티티`라고 생각한다.\n- 문맥에 따라 다르지만, 주로 사용하는 엔티티는 도메인 엔티티(비즈니스 객체)를 의미한다.\n- `JPA 엔티티`의 뿌리는 `DB 엔티티`에 가깝다. 추상적인 엔티티를 구현 기술(JPA)에 맞춰 구체화한 결과물이다.\n- **따라서, `JPA 엔티티`는 `영속성 객체(PO: persistent object)`[^1]다.**\n- [『자바/스프링 개발자를 위한 실용주의 프로그래밍』(김우근, 위키북스, 2024)](https://product.kyobobook.co.kr/detail/S000213447953)\n\n## 2. 컴퓨터 밑바닥의 비밀\n\n> chapter 2, 프로그램이 실행되었지만, 뭐가 뭔지 하나도 모르겠다\n\n- CPU를 우선 다루는 이유는 가장 간단하기 때문이다. 적재된 명령을 선택하고 실행한다. 반복한다.\n- CPU는 한 번에 한 가지 일을 수행한다.\n- `프로세스(process)`, 얼음땡 마법으로 멀티 태스킹이 가능하다.\n- 운영체제, 코드 재사용성의 정수\n- 다중 프로세스에서 발생하는 문제\n\n## 3. 자바 알고리즘 인터뷰 with 코틀린\n\n> 3장_코틀린, 구글이 인정한 공식 언어\n\n```java\n@Test\nvoid calculateTotalPriceUsingVar() {\n    // given\n    var calculator = new OrderCalculator();\n    var orders = new ArrayList<Order>();\n    orders.add(new Order(\"단위 테스트의 기술\", 36000, 1));\n    orders.add(new Order(\"Kotlin in Action 2/e\", 48000, 1));\n    \n    // when\n    var results = calculator.calcualteTotalPrice(orders);\n    \n    // then\n    assertThat(results).isEqualTo(84000);\n}\n```\n\n- 고수준 언어와 저수준 언어는 자동차의 자동, 수동 변속기와 유사하다.\n- 자바도 10 버전 이상에서는 타입 추론을 지원한다.\n\n> 117, C++.와 자바에서는 이 기능이 존재하지 않아서 디자인 패턴 중 빌더 패턴(Builder Pattern)이란 것을 고안해 사용해왔는데, \n> 코틀린은 파라미터 이름을 지정할 수 있어서 굳이 빌더 패턴을 사용할 필요가 없으며, 훨씬 더 간단하게 처리할 수 있다. 참고로 이 기능은 파이썬에서도 지원한다.\n\n## 마치며\n\n강철의 연금술사에 홀린 덕분에, 연금술을 부리듯 매일이 즐겁다. 컴퓨터 과학의 마법에 깨달음을 얻고, 이어지는 정리의 순간이 더없이 짜릿하다.\n\n- 강철의 연금술사의 영향인지 연금술을 하고 있는 것 같아 매사가 즐겁다. 정리가 재밌다.\n\n### 오늘의 함께 읽기\n\n> [얄팍한 코딩사전 '01. 파사드(Facade) 패턴'](https://www.youtube.com/watch?v=FrdG_n2ZWtE&t=113s)\n\n- `퍼사드 패턴(Facade Pattern)`, 소통 창구를 열어 클라이언트와 소통한다. 구조패턴에 속한다.\n- `Spring`은 어떻게 활용하고 있을까?\n\n[^1]: 데이터가 영원히 이어지도록 임의의 공간에 저장하고 불러온다.\n"},{"excerpt":"여름을 기대하는 단 한가지 이유 Java to Kotlin POJO(Plain Old Java Object) 란 구조에 종속되지 않는 순수한 자바 객체를 의미한다. 상속(extends)하지 않기 구현(implements)하지 않기 어노테이션 사용하지 않기 P O J O What is a POJO in Java? Almost EVERYONE Gets Thi…","fields":{"slug":"/daily-250326/"},"frontmatter":{"date":"March 26, 2025","title":"2025-03-26 New Face","tags":["회고/일간"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/25YgkxnU4UzEG4ORni69Rw?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n- 여름을 기대하는 단 한가지 이유\n\n## Java to Kotlin\n\n### POJO(Plain Old Java Object)\n\n- `POJO`란 구조[^1]에 종속되지 않는 순수한 자바 객체를 의미한다.\n\n1. 상속(extends)하지 않기\n2. 구현(implements)하지 않기\n3. 어노테이션 사용하지 않기\n\n- [P O J O](https://martinfowler.com/bliki/POJO.html)\n- [What is a POJO in Java? Almost EVERYONE Gets This Wrong](https://www.youtube.com/watch?v=oqPiEc2zNb0&t=25s)\n\n## 왜 내가 쓰는 GPT는 대답을 잘못할까?\n\n[//]: # (![박재호 '왜 내가 쓰는 GPT는 이상한 대답만 할까?' <출처: 한입 커뮤니티>]&#40;bite-sized-lunch-box.jpg&#41;)\n\n- LLM 배경 지식\n- LLM의 특성에 맞춰 활용하기\n\n## 생각을 정리하는 독서법\n\n> 8장, 저자와 협약해 용어 파악하기\n\n- 122, 사람들은 대게 능동적으로 읽으려 하지 않는다. 보이는 대로만 볼뿐 의욕적으로 읽으려 하지 않는 독자들의 큰 잘못은 단어에 주의를 기울이지 않는 것, 저자와 협약에 실패하는 것이다.\n- 124, 제일 좋은 방법 같은 것은 없다. 이렇게 해서 안 되면 저렇게 해보는 그림 맞추기 퍼즐과 같다. 맞추어 놓은 조각이 많을수록 나머지는 쉬워진다. (중략) 책은 이미 많은 단어가 맞춰져 있는 상태로, \n  \"제자리에 맞춰져 있는 단어는 저자의 의미가 파악된 단어다.\" 저자와 독자가 같은 의미로 사용하는 협약이 이루어져 제자리를 찾은 것이다. 나머지 단어도 제자리를 찾아주어야 한다. \n  그러려면 이렇게도 맞추어 보고 저렇게도 맞추어 봐야 한다.\n- **단어는 여러 의미로 해석될 수 있다. 저자가 상황에 따라 동일한 단어를 어떻게 사용했는지 의미를 꼭꼭 씹어먹자. 이해력은 자연스레 따라온다.**\n\n## 마치며\n\n어쩌다 3월이 이렇게 여름처럼 달아오를까. 물음표가 생긴다. 날씨와 컴퓨터 과학의 열기로 가슴이 뜨겁다. 흠뻑쇼는 이미 시작됐다.\n부디 흠뻑쇼가 오래 이어지길 바란다.\n\n### 오늘의 함께 읽기\n\n- [이제 React는 프론트엔드? 아니, 풀스택이다.](https://velog.io/@composite/%EC%9D%B4%EC%A0%9C-React%EB%8A%94-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%84%EB%8B%88-%ED%92%80%EC%8A%A4%ED%83%9D%EC%9D%B4%EB%8B%A4): `React v19`는 풀스택 시장까지 넓히는 행보를 보인다.\n- [깔끔한 포맷팅을 위한 klint 적용하기 (feat. kotlin)](https://msyu1207.tistory.com/entry/%EA%B9%94%EB%81%94%ED%95%9C-%ED%8F%AC%EB%A7%B7%ED%8C%85%EC%9D%84-%EC%9C%84%ED%95%9C-ktlint-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-feat-kotlin)\n- [Book Overflow](https://www.youtube.com/@BookOverflowPod/videos): 원서 재밌게 읽기, 확장하기\n- [강남언니 '[Sass] 테스트 안정감을 N배로 확보할 수 있었던 이유'](https://blog.gangnamunni.com/post/how-we-improved-test-stability/): 실무에서는 어떻게 테스트 환경을 구성할까?\n\n[^1]: 프레임워크와 라이브러리에 종속되지 않는다."},{"excerpt":"나는 왜 성장해야하는가? 컴퓨터 밑바닥의 비밀 1장, 프로그래밍 언어부터 프로그램 실행까지, 이렇게 진행된다 컴파일러는 번역가다 우리의 기록은 이다. 는 을 가 실행할 수 있도록 로 변환한다. 토큰은 최소 단위다 컴파일러는 소스 코드에서 을 추출한다. 추출하는 과정을 이라고 한다. 링커는 예언자다 소스 파일은 이 존재한다. 대상 파일과 소스 파일을 병합하…","fields":{"slug":"/daily-250325/"},"frontmatter":{"date":"March 25, 2025","title":"2025-03-25 살기 위해서","tags":["회고/일간","CS","Kotlin/코틀린"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/4UasKCFGJCnCchh3UrpV58?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n- 나는 왜 성장해야하는가?\n\n## 컴퓨터 밑바닥의 비밀\n\n> 1장, 프로그래밍 언어부터 프로그램 실행까지, 이렇게 진행된다\n\n### 컴파일러는 번역가다\n\n우리의 기록은 `소스 파일(source file)`이다. `컴파일러`는 `소스 파일`을 `CPU`가 실행할 수 있도록 `실행 파일`로 변환한다.\n\n### 토큰은 최소 단위다\n\n컴파일러는 소스 코드에서 `토큰(token)`을 추출한다. 추출하는 과정을 `어휘 분석(lexical analysis)`이라고 한다.\n\n### 링커는 예언자다\n\n소스 파일은 `대상 파일(object file)`이 존재한다. 대상 파일과 소스 파일을 병합하기 위해 `링커(linker)`를 사용한다. 링커는 압축 프로그램처럼 소스 파일과 대상 파일을 묶어 하나의 실행 파일을\n만든다. 링커는 전역 변수, 외부 모듈 같은 참조할 수 있는 대상에 관심을 둔다.\n\n### 톺아보기: 자바와 링커\n\n- 자바도 컴파일이 필요하다. 하지만 이전에 배운 전통적 방식[^1]과 다른 방식을 채택했다. 목적파일을 연결하고 실행 파일을 만들지 않는다.\n- `클래스 로더(Class Loader)`, 자바는 클래스 로딩, 링킹, 초기화가 모두 '프로그램 실행 중(Runtime)'에 동적으로 이뤄진다.\n- `WORA(Write Once, Run Anywhere)`, 하드웨어 플랫폼에 종속되는 구조를 탈피했다.\n- 링킹은 `검증(verification) -> `준비(preparation) -> 해석(resolution)` 단계로 이뤄진다.\n\n**<참고 자료>**\n\n- [『JVM 밑바닥까지 파헤치기』(저우즈밍, 인사이트, 2024)](https://product.kyobobook.co.kr/detail/S000213057051)\n- [Stack Overflow 'How Java linker works?'](https://stackoverflow.com/questions/6440310/how-java-linker-works)\n\n## 자바 알고리즘 인터뷰 with 코틀린\n\n### 1. 제네릭: 안전한 코드 작성하기\n\n`컴파일 타임(Compile Time)`에 클래스나 메서드에 사용할 자료형을 지정하여 타입 검사에 도움을 받는다.\n\n### 2. 함수형 프로그래밍 언어\n\n- 람다 표현식\n- 스트림 API\n\n`Java 8` 이전에는 객체 지향 외에 절차 지향, 함수형 프로그래밍 개념을 배척하다 싶은 행보를 보냈다. `OOP`를 코딩 테스트에서 활용하기란 어렵다. 하지만 함수형은 코딩 테스트에 매우 유용하다.\n\n## 마치며\n\n'왜 성장해야 하는가'는 개발을 다시 시작할 때부터 가슴속에 품던 질문이다. 표현하고 싶다는 생각을 했는데 기회를 얻었다.  \n"},{"excerpt":"착한 내 친구의 삶까지는 내가 못 챙겨 서로 이해해 컴퓨터 밑바닥의 비밀 프로그래밍 언어는 컴퓨터 과학의 극히 일부다. 컴퓨터와 대화하는 방법이다. 간단한 스위치는 로 전환됐다. , 에서 마침내 진화한다. 는 개발자가 더 많은 신경을 써야 한다. 어려움에 봉착하여 더욱 편리한 언어의 필요성이 대두됐다. 일상에서 주로 사용하는 언어를 어떻게 에 전달할까? …","fields":{"slug":"/daily-250321/"},"frontmatter":{"date":"March 21, 2025","title":"2025-03-21 비행","tags":["회고/일간","CS","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/05vY4piKAbBXJXaaa4xOCt?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**착한 내 친구의 삶까지는 내가 못 챙겨 서로 이해해**\n\n## 컴퓨터 밑바닥의 비밀\n\n- 프로그래밍 언어는 컴퓨터 과학의 극히 일부다. 컴퓨터와 대화하는 방법이다.\n- 간단한 스위치는 `CPU`로 전환됐다.\n- `어셈블리어`, `기계어`에서 마침내 진화한다.\n- `저수준 언어`는 개발자가 더 많은 신경을 써야 한다.\n- 어려움에 봉착하여 더욱 편리한 언어의 필요성이 대두됐다.\n- 일상에서 주로 사용하는 언어를 어떻게 `CPU`에 전달할까? 명령에 공통점은 `문(statement)`이 됐다.\n- `코드(code)`는 단도직입적인 문장이다.\n- 세상의 모든 코드의 기본은 `구문(syntax)`다.\n- `컴파일러(compiler)`, `자료구조`는 무의미할까?\n- 마침내 `고수준 언어`가 탄생했다. `고수준 언어`의 등장으로 날개를 달았다.\n- `CPU`는 다양한 형식을 갖는다. 문제를 해결하기 위해서 각 `CPU`를 추상화한 `인터프리터(interpreter)`가 등장했다.\n\n## 생각을 넓혀주는 독서법\n\n> 읽기 수준은 쌓여가는 것이다. 기초가 없으면 분석하며 읽을 수 없다.\n\n**방법**\n\n- 책을 분류한다. 이미 읽은 책과 비교한다.\n- 목차 확인\n- (비소설) 찾아보기 확인\n- 출판사 광고 확인\n- 요약 자세히 읽기\n- 탐정 접근법\n- 겉만 핥아보기: 처음부터 끝까지 읽기, 살피지 않기\n\n> 50, 이해할 수 있는 부분은 주위를 기울여 읽고 금방 이해가 안 되는 부분은 멈추지 말고 그냥 넘어가라. 아무리 어려워도 계속 읽으면 곧 이해할 수 있는 부분이 나타난다.\n> 그러면 다시 이 부분을 집중해서 읽는다. 이렇게 각주, 주석, 참고문헌 등으로 빠져나가지 말고 끝까지 읽는다. 딴 데로 새면 길을 잃는다. 모르는 문제는 붙들고 있어봤자 풀 수 없다.\n> 다시 읽어야 훨씬 쉽게 이해하게 된다. 그러니 '일단 처음부터 끝까지' 읽고 나서 다시 읽어야 한다.\n\n- 다양한 속도 읽기\n- 이해력 높이기\n    - 이해력을 높여야 적극적으로 책을 읽을 수 있다.\n\n**너, 내 동료가 돼라**\n\n> 62, 글을 읽는다는 것은 저자와 독자 사이에 대화가 되어야 한다는 것이다.\n> (중략) 그런데 이해 한다는 것은 상호적이다. 즉 뭔가를 배우려면 자신에게 질문하고 가르치는 사람에게도 질문해야 한다. 가르치는 사람이 하는 이야기를 이해하고 나면 기꺼이 그와 토론하고 싶어 할 정도가 되어야\n> 한다.\n\n- 질문을 위해 메모하는 다양한 방법을 설명한다.\n    - 책에 직접 메모하는 방법을 선호하지 않는다.\n    - 지적 소유권 주장, 면지에 요약 정리하기\n\n**구조 파악**\n\n> 개념 파악 전초제\n\n1. 어떤 분류인가?\n2. 전체적으로 무엇을 이야기하는가?\n3. 저자는 어떤 방식으로 주제를 전개하는가?\n\n**습관 만들기**\n\n> 66, 기술이 있다는 말은 뭔가를 만들거나 어떤 일을 하는 원칙을 아는 것이 아니라 그 일을 하는 데 어떤 습관을 익혔다는 말이다.\n> ...(중략) ...\n> 원칙을 모르면서 원칙대로 할 수 없다. 원칙대로 하지 않으면서 습관처럼 익숙하게 기능이나 기술을 발휘할 수도 없다. 배워서 터득할 수 있는 기술에는 원칙이 있다. 그리고 배워서 터득한 기술은 원칙을 따라 하는\n> 습관에서 생겨난다.\n\n습관을 어떻게 만들 수 있을까?\n\n> 69, 원칙이 다양하다는 것은 별개 습관이 여럿 모인다는 것이 아니라 형성할 하나의 습관이 그만큼 복잡하다는 뜻이다. 각각의 원칙이 저절로 움직이는 단계에 이르면 서로 맞물려 하나를 이루게 된다.\n\n## 자바 알고리즘 인터뷰 with 코틀린\n\n> OOP, 복잡도, 재사용성, 독립적, 유연하게 협력하는 방법\n\n- 캡슐화, 변수와 함수를 클래스 단위로 묶어 분리하다.\n- 외부와 협력하기 위해 `접근 제어자(Access Modifier)`를 도입했다.\n- 추상화, 의도 자체에 집중하여 복잡도를 낮추다.\n- 상속, 필요한 개념을 이어 물려받아 재사용성을 높이다.\n- 다형성, 상황에 따라 달리 동작하다. (오버로딩, 오버라이딩)\n- [FizzBuzzEnterpriseEdition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition): 과도한 추상화의 결과\n\n## 마치며\n\n컨디션이 좋지 않아 평소보다 적은 학습을 이어갔다. 날카로운 예민함을 덜어가는 것으로 한 잔.\n\n### 오늘의 함께 읽기\n\n- [MDN Web Docs - Mozilla 'High-level programming language'](https://developer.mozilla.org/en-US/docs/Glossary/High-level_programming_language)\n- [광주축구 'ACLE 요코하마전 대승을 부른 이정효 감독의 한마디!'](https://youtube.com/shorts/nwodUEQUoZ4?si=G3Pcibgf8oIMCocf)\n- [외교부 '페이커 이상혁 기조연설'](https://youtu.be/YGAFaLEoK8M?si=zW4aHjdRV2e0IU2c)\n"},{"excerpt":"아무도 만질 수 없는 기억의 바람 Kotlin in Action 7장, 널이 될 수 있는 값 nullable type 최신 언어들은 실행 환경이 아닌 아닌 컴파일 단계에서 가 발생할 수 있도록 지원한다. 타입 뒤에 는 해당 타입이 널을 참조할 수 있음을 암시한다. 널이 될 수 있는 타입과, 널이 될 수 없는 타입을 구분하면 어떤 연산이 가능한지 명확하게 …","fields":{"slug":"/daily-250318/"},"frontmatter":{"date":"March 18, 2025","title":"2025-03-18 바람","tags":["회고/일간","Kotlin/코틀린","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/686EAFs0uJRvVTHaOhkP1u?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**아무도 만질 수 없는 기억의 바람**\n\n## Kotlin in Action\n\n> 7장, 널이 될 수 있는 값\n\n- **nullable type**\n    - 최신 언어들은 실행 환경이 아닌 아닌 컴파일 단계에서 `NPE(NullPointerException)`가 발생할 수 있도록 지원한다.\n- 타입 뒤에 `?`는 해당 타입이 널을 참조할 수 있음을 암시한다.\n- 널이 될 수 있는 타입과, 널이 될 수 없는 타입을 구분하면 어떤 연산이 가능한지 명확하게 이해할 수 있다.\n    - 실행 환경은 같은 타입이다. 래퍼 타입이 아니다.\n- **`null`을 다루는 방법**\n    - `if`\n    - `?.`\n        - 호출 값이 `null`이 아니면 일반 메서드 호출처럼 동작한다.\n        - 호출 값이 `null`이라면 호출을 무시한다.\n    - `?:`\n        - `null`을 특정 값으로 변경한다. 기본값 할당에 주로 사용한다.\n    - `안전한 캐스트 연산자(safe-cast operator)`\n    - `!!(not-null assertion)`\n        - 컴파일러에게 `null`이 아님을 단언한다.\n        - `null`이면 `NPE`가 발생한다.\n        - 다른 방법을 우선 고려하자.\n    - `let 함수`\n    - `lateinit`\n    - `DI(Dependency Injection`를 적용한 프레임워크 사례\n- [Nullability in Java and Kotlin](https://kotlinlang.org/docs/java-to-kotlin-nullability-guide.html#support-for-definitely-non-nullable-types)\n- [Null safety](https://kotlinlang.org/docs/null-safety.html)\n\n## 자바 알고리즘 인터뷰 with 코틀린\n\n> 플랫폼 별 특징과 활용, 사전 준비\n\n- 코딩 인터뷰는 마이크로소프트가 처음 도입한 것으로 추정된다. 꾸준히 확대되어 컴퓨터 과학 기본기 검증에 주로 사용한다.\n- 면접관이 함께하는 방식을 '인터뷰'로 분류하고, 시험을 치르는 방식을 '테스트'로 분류한다.\n- **온라인 코딩 테스트의 사전 준비 사항**\n    - 연습장과 필기도구: 값의 변화, 최종 결과를 기록하고 풀이를 비교한다.\n    - 나만의 코드 스니펫(Snippet)\n    - 예외 처리\n    - REPL(Read Evaluate Print Loop) 도구로 코드 검증\n    - 코딩 테스트 플랫폼 숙지: 해커랭크, 프로그래머스\n\n## 생각을 넓혀주는 독서법\n\n- 투수와 타자의 관계, 읽고 듣기도 적극적인 자세가 필요하다.\n- 깊이 이해하는 독서는 깨달음을 동반한다.\n- 읽기란 보이지 않는 교사에게 배우는 방법이다.\n\n## 마치며\n\n마감 기한을 지키고 방문하는 도서관은 산들바람이 되어 가슴에 안긴다.\n\n### 오늘의 함께 읽기\n\n- [『우주비행사의 지구생활 안내서』(크리스 해드필드, 더퀘스트, 2014)](https://product.kyobobook.co.kr/detail/S000001031978)\n    - Chris Hadfield\n- [GeekNews '새로운 출발을 준비할 때 읽어볼 100권의 책'](https://news.hada.io/topic?id=19809&v2)\n- [GeekNews 'HTTP/3가 널리 지원되지만 실제로는 거의 사용되지 않는 이유'](https://news.hada.io/topic?id=19816)\n- [Kotlin Docs 'Nullability in Java and Kotlin﻿'](https://kotlinlang.org/docs/java-to-kotlin-nullability-guide.html#support-for-definitely-non-nullable-types)\n- [Kotlin Docs 'Null safety'](https://kotlinlang.org/docs/null-safety.html)\n- Predicate: 주어진 조건 만족 여부를 검증하는 함수나 표현식\n- Precondition: 사전 조건\n"},{"excerpt":"언젠가 빛을 다하고 끊어질까 Kotlin in Action 컬렉션을 다룹니다. 그런데 함수형을 곁들인 컬렉션을 다룰 때, 표준 라이브러리와 람다를 조합하면 우아한 코드가 만들어진다. 일반적인 연산을 일관성 있게 표현한다. 적은 콘텍스트를 공유하여 인지비용을 낮춘다. 시퀀스: 컬렉션 연산 지연 후 실행하기 즉시 실행과 지연 실행, 적재적소에 활용하기 fil…","fields":{"slug":"/daily-250317/"},"frontmatter":{"date":"March 17, 2025","title":"2025-03-17 필라멘트","tags":["회고/일간","Kotlin/코틀린","CS"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/1FESBLH9hFuNMIaK7pVxrF?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**언젠가 빛을 다하고 끊어질까**\n\n## Kotlin in Action\n\n- **컬렉션을 다룹니다. 그런데 함수형을 곁들인**\n    - 컬렉션을 다룰 때, 표준 라이브러리와 람다를 조합하면 우아한 코드가 만들어진다.\n    - 일반적인 연산을 일관성 있게 표현한다.\n    - 적은 콘텍스트를 공유하여 인지비용을 낮춘다.\n- **시퀀스: 컬렉션 연산 지연 후 실행하기**\n    - 즉시 실행과 지연 실행, 적재적소에 활용하기\n\n> filter, map, reduce, fold\n\n- 람다를 인자로 받은 함수에 람다를 넘기면 불필요한 계산이 발생할 수 있다. 작성한 코드가 어떤 결과를 불러올지 명확히 이해해야 한다.\n- `reduce`: 첫 번째 값이 누적기(accumulator)에 전달된다.\n- `fold`: 초깃값을 선택한다.\n- `find` vs. `firstOrNull`\n- `associate`\n- `replaceAll` vs. `fill`\n\n### 자바 알고리즘 인터뷰 with 코틀린\n\n> 코딩 테스트 준비 그 이상을 향해.\n\n- 알고리즘은 취업에만 유용할까? 스프링 기술을 잘 이해하기 위해서는 스프링 각 기술에 적용된 알고리즘을 이해해야 한다. 알고리즘이 사용되지 않는 곳이 없다.\n    - `DispatcherServlet`\n    - `DI(Dependency Injection)`\n    - `DataSource`\n- 스프링을 사용하는 개발자는 매일 알고리즘을 설계하고 조합하여 서비스를 제공한다 해도 과언이 아니다.\n- **자료구조의 특징을 이해하고 적절한 활용이 중요하다.**\n    - 시간 복잡도 제대로 계산하는 방법\n- **직접 풀고 풀이와 비교하기, 코드 품질과 최적화 기법 익히기**\n- 인텔리제이는 2001년에 출시됐다.\n- [(LC-Replied) New kotlin version](https://leetcode.com/discuss/post/1251018/lc-replied-new-kotlin-version-by-kevlar_-wtx5/)\n\n### 만화로 배우는 리눅스 시스템 관리\n\n- System Admin Girl, 이 세계에서는 내가 시스템 관리자?\n- `SSH(Secure SHell)`, 암호화를 곁들인 원격 접속\n    - 안전하지 않은 쉘 `RSH(Remote SHell)`\n- `root`, 모든 힘을 갖고 있는 절대 관리자.\n    - `sudo`를 통해 권한을 위임한다. (암행어사)\n- `grep(Global Regular Expression Print)`, 정규표현식을 통해 문자열 검색\n- `vim`\n    - 서버는 최소한의 서버를 구성하기 위해 '데스크톱 환경'을 구축하지 않는다.\n    - `vim`은 `vi`의 업그레이드다. PC가 대중화되기 이전, 하나의 키가 여러 역할을 하도록 설계했다.\n    - `i`: 편집 모드\n    - `:wq`: 쓰기 종료\n    - `esc`: 일반 모드\n    - `/`: 일반 모드 검색\n        - `N`: 다음 검색 결과로 이동\n        - `Shift` + `N`: 이전 검색 결과로 이동\n\n## 마치며\n\n- 리듬을 바꾸고 있다.\n- 책을 주로 읽었더니 강의 영상이 낯설어 고민이다.\n"},{"excerpt":"하염없이 달리고 또 달려. 불타는 금요일 Kotlin in Action 워밍업 클럽 확장판 워밍업 클럽 3기 백엔드 코드 스터디 중간점검(코치 박우빈) 지나갑니다. 리팩터링 일인칭 단수 마치며 추억이 깃든 장소에 방문만으로 마음이 편안했다. 세계관을 확장하고 싶다. 오늘의 함께 읽기 Kotest 'Testing Styles' 안 보는 강의만 쌓인 개발자가…","fields":{"slug":"/daily-250314/"},"frontmatter":{"date":"March 14, 2025","title":"2025-03-14 말 달리자","tags":["회고/일간","Kotlin/코틀린","워밍업클럽","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/42OTaKIDWseqiU8qflqjap?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**하염없이 달리고 또 달려. 불타는 금요일**\n\n## Kotlin in Action\n\n## 워밍업 클럽 확장판\n\n> 워밍업 클럽 3기 백엔드 코드 스터디 중간점검(코치 박우빈)\n\n- 지나갑니다.\n- 리팩터링\n\n## 일인칭 단수\n\n## 마치며\n\n- 추억이 깃든 장소에 방문만으로 마음이 편안했다. 세계관을 확장하고 싶다.\n\n### 오늘의 함께 읽기\n\n- [Kotest 'Testing Styles'](https://kotest.io/docs/framework/testing-styles.html)\n- [안 보는 강의만 쌓인 개발자가 가질 공부법](https://www.youtube.com/watch?v=XO-r1PFCf3U)\n"},{"excerpt":"어지로운 세상 속, 넘어지고 다쳐도 잡아줄 서로가 있으니 괜찮지 않을까? Kotlin in Action 비공개 생성자 동등성 불변 객체와 다중 스레드 익명 객체 4장은 전체적으로 어려웠다. 의식적으로 사용할 때 개념 정리를 병행해야겠다고 느꼈다. 주말에 폭넓게 사용하며 복습하자. 마치며 몸살이 찾아왔다. (비 맞을 땐 좋았는데!) 이석증을 걱정했는데 단순…","fields":{"slug":"/daily-250313/"},"frontmatter":{"date":"March 13, 2025","title":"2025-03-13 비틀비틀 짝짜꿍","tags":["회고/일간","Kotlin/코틀린","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/2Wr6kLaSkUfgffOQ7nuMgr?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**어지로운 세상 속, 넘어지고 다쳐도 잡아줄 서로가 있으니 괜찮지 않을까?**\n\n## Kotlin in Action\n\n- 비공개 생성자\n- 동등성\n- 불변 객체와 다중 스레드\n- 익명 객체\n\n4장은 전체적으로 어려웠다. 의식적으로 사용할 때 개념 정리를 병행해야겠다고 느꼈다. 주말에 폭넓게 사용하며 복습하자.\n\n## 마치며\n\n몸살이 찾아왔다. (비 맞을 땐 좋았는데!) 이석증을 걱정했는데 단순한 편두통으로 확인됐다.\n재밌는 시기에 몸은 좋지 않으니 컨디션 관리에 조금 더 신경 써야겠다.\n\n### 오늘의 함께 읽기\n\n- [♟ [퀸스겜빗]으로 보는 냉전시대 역사배경설명ㅣ넷플릭스 추천](https://youtu.be/lRs80MGcyNo?si=nSwFfAh-k3EAp14a): 냉전시대 배경을 몰입하기 위한 차선책\n- **지. -지구의 운동에 대하여-**: 지식을 갈구하는 자들에 대한 핍박\n- [카일스쿨·변성윤 '7년 동안 회고하며 깨달은 것들'](https://inf.run/9QSpS)\n    - KIPET\n    - 회고 여행\n    - Action Item 도출하기와 도식화\n"},{"excerpt":"오늘 날씨 완전 지구 멸망 한 시간 전 Kotlin in Action 짧은 구문으로 주 생성자를 정의하는 방법 인터페이스 클래스는 오로지 하나, 인터페이스는 여러 개 상속할 수 있다. 는 의무다. 기본 구현을 제공할 수 있다. 구현을 제공하지 않은 메서드는 반드시 구현해야 한다. 자식 클래스는 이름, 시그니처가 같은 메서드를 사용하기 위해 중복을 해결하는…","fields":{"slug":"/daily-250312/"},"frontmatter":{"date":"March 12, 2025","title":"2025-03-12 지구 멸망 한 시간 전","tags":["회고/일간","Kotlin/코틀린","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/66uK5I0K4wsCeZ57l59RF6?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**오늘 날씨 완전 지구 멸망 한 시간 전**\n\n## Kotlin in Action\n\n- 짧은 구문으로 주 생성자를 정의하는 방법\n- **인터페이스**\n    - 클래스는 오로지 하나, 인터페이스는 여러 개 상속할 수 있다.\n- `override`는 의무다.\n- 기본 구현을 제공할 수 있다. 구현을 제공하지 않은 메서드는 반드시 구현해야 한다.\n- 자식 클래스는 이름, 시그니처가 같은 메서드를 사용하기 위해 중복을 해결하는 구현을 제공해야 한다.\n- **내부 클래스와 내포된 클래스**\n    - 용어 구분과 활용이 아직 난해하다.\n- 취약한 기반 클래스가 가장 흥미롭다. '상속보다는 조합을 사용하라'는 격언을 자주 들었다. 자주 들어 암기하다시피 했었는데 오늘은 기점으로 풀어낼 수 있는 주제가 확장되고 있다.\n- [취약한 기반 클래스(Fragile base class)](https://en.wikipedia.org/wiki/Fragile_base_class)\n- 『이펙티브 자바』(조슈아 블로크, 인사이트, 2018): 상속을 의도하지 않았다면 모두 `final`을 사용하라.\n\n## 자본주의\n\n- 자본주의는 '은행'을 중심으로 이뤄진다.\n\n한 번쯤 은행이 돈을 버는 구조에 의문을 가졌다. 은행에서 돈을 버는 구조가 그려지기 시작했다.\n\n## 생산성을 올려보자\n\n- Obsidian\n- Live Templates\n\n## 마치며\n\n- 비 맞으며 달렸음에도 기분이 좋았다.\n- 입덕주의, 안성재 씨에 빠지고 있다. 자신의 분야에 미친 사람들이 흥미롭다.\n- 강철의 연금술사, 진리는 잔혹하지만 공정해.\n\n### 오늘의 함께 읽기\n\n> [LY Corporation Tech Blog '린트 적용으로 코드 대량 변경 시 AST를 이용해 검증하기'](https://techblog.lycorp.co.jp/ko/using-ast-to-verify-the-code-after-code-linting)\n\n- 린트(lint)는 코드에 있는 보풀을 의미한다. 스웨터 보풀에서 유래됐다.\n- 부모 클래스 구현을 변경함으로 자식 클래스가 의도하지 않은 동작을 범한다.\n\n> [6개월 안에 합격하는 사람들의 비밀, 반복의 승리](https://youtu.be/RK5hWI1clio?si=FYz6NOBCbtyuGLX9)\n\n- **계획(역순)**\n- **기본강의 듣기**\n    - 간단하게 휴대할 수 있도록 단권화\n    - 추상화, 불필요한 내용을 덜어내기\n- **[복습] 631 공부법**\n    - 동일한 범위를 무조건 제한된 시간 안에 해결한다.\n    - 측정이 되는 순간 성취감을 느끼고 자신감이 생긴다.\n- **문제 풀기**\n    - 문제 풀이가 아닌 '개념을 정리한다'로 접근\n- **빠른 회독**\n- **단권화를 통한 복습**\n"},{"excerpt":"색다름에서 찾아오는 편안함 Kotlin in Action 가변 인자 함수 스프레드, 구조 분해 할당 중위 호출 3중 따옴표 문자열 로컬 함수를 통해 중복을 제거 책을 통해 개념을 배우고 있다. 몰입된다. 행복한 일상을 보내는데 코틀린이 일조하고 있다. 극한까지 다뤄보고 싶다. Vercel 강동윤 AI 웨비나 AI가 경계를 허물고 있다. 그럼에도 불구하고 …","fields":{"slug":"/daily-250311/"},"frontmatter":{"date":"March 11, 2025","title":"2025-03-11 Peanut butter Sandwich","tags":["회고/일간","Kotlin/코틀린","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/3A76bRRuVaIJrV8mrVeb21?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**색다름에서 찾아오는 편안함**\n\n## Kotlin in Action\n\n- 가변 인자 함수\n- 스프레드, 구조 분해 할당\n- 중위 호출\n- 3중 따옴표 문자열\n- 로컬 함수를 통해 중복을 제거\n\n책을 통해 개념을 배우고 있다. 몰입된다. 행복한 일상을 보내는데 코틀린이 일조하고 있다. 극한까지 다뤄보고 싶다.\n\n## Vercel 강동윤 AI 웨비나\n\n- AI가 경계를 허물고 있다. 그럼에도 불구하고 개념은 여전히 중요하다. 취업 이후에 개념 공부와 AI 활용 능력을 함께 늘려가길 바란다.\n- 프롬프트에 우선 테스트를 작성 후 내용을 제공하라고 지시할 때 괜찮은 결과를 얻었다.\n- **추천 도구:** roo cline, cursor, v0.dev\n\n## 자본주의\n\n- 물가, 화폐 가치, 인플레이션\n- 은행은 돈을 보관하지 않는다. 창조한다.\n\n## 마치며\n\n- 구상이 전부 틀어졌다. 평소 계획을 이행하지 못할 때 쉽게 스트레스를 받았다. 자연스레 결과를 예견했다. 하지만 오늘은 의연하게 대처했다.\n  문제를 유연하게, 다양한 방법으로 해결해서 뿌듯하다.\n- 광화문에 방문할 때 마다 피할 수 없는 지독한 소음에 괴로웠다. 오늘은 해결된 결과를 마주했다. 상쾌하다.\n\n### 오늘의 함께 읽기\n\n- [『코틀린을 다루는 기술』](https://kscory.com/daliy-life/review/gilbut_joy_of_kotlin): 코틀린을 코틀린답게, 우아하게 작성하는 방법\n- [『제대로 연습하는 법』](https://product.kyobobook.co.kr/detail/S000214977195): 연습을 '잘'하는 방법, 스포츠와 연관 지어 설명한다.\n- 『(만화로 배우는) 하웓 진의 미국사』: 냉전시대 간략하게 살펴보기\n- [디스코드(Discord) 알림음 차단 또는 관리하기](https://jsmall.tistory.com/1531): 음성 채널에서 방해받지 않는 방법\n- [이윤규 '시간으로 공부계획 세우면 안 됩니다'](https://youtube.com/shorts/VGjiM7yEJHM?si=6pXNqG7o7YUVplH8): 어려운 부분을 기록하고 이후 일정에 도움 받는다. '\n  왜' 어려웠는지 확인한다.\n"},{"excerpt":"낭만을 잃지 않고 익어간다. Kotlin in Action 컬렉션 확장함수 설명이 자연스럽다. \"코틀린은 자바와 상호작용을 강조한다\"는 표현을 자주 접했다. 하지만 부족함은 꾸준히 느껴졌다. 이 책은 자연스럽게 공식 문서로\n유도하며 상호작용을 설명한다. 코틀린을 배우며 지난 어노테이션 과제가 연결됐다. 어노테이션의 활용도는 어디까지일까? 일인칭 단수 보드…","fields":{"slug":"/daily-250310/"},"frontmatter":{"date":"March 10, 2025","title":"2025-03-10 33","tags":["회고/일간","Kotlin/코틀린","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/3tqXynBuF095sqRV9OjwNJ?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**낭만을 잃지 않고 익어간다.**\n\n## Kotlin in Action\n\n- 컬렉션\n- 확장함수\n- 설명이 자연스럽다. \"코틀린은 자바와 상호작용을 강조한다\"는 표현을 자주 접했다. 하지만 부족함은 꾸준히 느껴졌다. 이 책은 자연스럽게 공식 문서로\n  유도하며 상호작용을 설명한다.\n- 코틀린을 배우며 지난 어노테이션 과제가 연결됐다. 어노테이션의 활용도는 어디까지일까?\n\n## 일인칭 단수\n\n> 보드카 김렛을 천천히 홀짝이면서 스무 쪽쯤 읽어나갔지만 이상하게 집에서와 마찬가지로 여기서도\n> 독서에 신경을 집중할 수 없었다. 소설이 딱히 재미있지 않아서만은 아닌 듯 했다. 그렇다고 바의 분위기가 어수선한 것도 아니다\n> (쓸데없는 음악이 나오지도 않고, 조명도 적당하고 독서 환경으로는 거의 흠잡을데가 없었다). 아마도 내가 아까부터 느껴온 막연한 위화감 탓인것 같았다.\n> 뭔가 미묘하게 어긋난 느낌이었다. 나라는 내용물이 지금의 그릇에 잘 맞지 않는다. 혹은 마땅히 존재해야 할 정합성이 어디서부턴가 손상돼어버렸다는 감각이다.\n> 가끔 그럴 때가 있다.<br>\n> <출처: 『일인칭 단수』(무라카미 하루키, 문학동네, 2020)>\n\n- 환경이 좋아도 집중되지 않던 순간이 스쳐갔다. 파노라마처럼\n\n## 마치며\n\n- 싱그러운 봄을 몸소 느꼈다. 산책할 때 가장 행복했다. 우아하다.\n- 갚을 수 없을 만큼 수면을 대출했다. 상환할 시간이다.\n- 쪽잠에서 살발한 경고를 받았다.\n\n### 오늘의 함께 읽기\n\n- [goormblog](https://blog.goorm.io/commit/)\n    - 타입으로 견고하게 다형성으로 유연하게\n    - 클린 코드\n    - 소프트웨어 장인 정신\n- [IdeaVim](https://blog.jetbrains.com/ko/webstorm/2022/11/ideavim-in-webstorm/): 생산성 깎고 또 깎아.\n- 한무무, 한성 무접점키보드 GK893B (텐키리스)\n\n행방불명 된 도서[^1] 덕분에 차선책으로 2권을 대출했다. 기존에 읽지 않았던 분야라 더욱 설렌다. 풍족한 한 주를 기대한다.\n\n[^1]: [『리틀 라이프 1』(한야 야나기하라, 시공사, 2016)](https://product.kyobobook.co.kr/detail/S000000733954)\n"},{"excerpt":"시켜줘 명예 멜로디 Kotlin in Action 젯브레인즈(JetBrains)는 C#의 생산성을 부러워했다. 고심 끝에 코틀린 개발에 착수했다. 정식 버전인 버전까지 5년 걸렸다. '코틀린'이란 이름은 상트페테부르크 인근 섬이다. 코틀린의 시작은 '더 나은 자바'다. 여러 다른 언어의 아이디어를 다수 차용했다. 코루틴은 비동기 프로그래밍에 사용한다. 정…","fields":{"slug":"/daily-250305/"},"frontmatter":{"date":"March 05, 2025","title":"2025-03-05 #RUN","tags":["회고/일간","Kotlin/코틀린","인프런워밍업클럽","독서"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/5MDJtAqhrcqjcRO9pnntPX?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**시켜줘 명예 멜로디**\n\n## Kotlin in Action\n\n- 젯브레인즈(JetBrains)는 C#의 생산성을 부러워했다. 고심 끝에 코틀린 개발에 착수했다.\n- 정식 버전인 `1.0`버전까지 5년 걸렸다.\n- '코틀린'이란 이름은 상트페테부르크 인근 섬이다.\n- 코틀린의 시작은 '더 나은 자바'다.\n- 여러 다른 언어의 아이디어를 다수 차용했다.\n- 코루틴은 비동기 프로그래밍에 사용한다.\n- 정적 타입 지정은 실행이 아닌 컴파일 시점에 오류를 잡는다.\n- 타입 추론은 컴파일러가 문맥을 고려한다.\n\n## Clean Code\n\n- 소통을 위한 기초 지식을 제공한다.\n- 보이스카우트 규칙은 셰프들의 부엌 정리 습관과 비슷하다. 만들기 만큼 정리도 중요하다.\n- 클린 코드는 한 번에 배워지지 않는다. 게임을 플레이하며 배우듯, 고생 끝에 찾아온다.\n- 르블랑의 법칙, 나중은 결코 돌아오지 않는다.\n- 좋은 코드를 사수하는 일은 개발자의 책임이다.\n- 클린 코드는 마치 한줄평 같다. 명료하게 의도를 표현한다.\n\n### 워밍업 클럽 서포터로 살아남기\n\n서포터 오프라인 모임을 가졌다. 어색함은 기우였다. 편안한 분위기로 다양한 이야기를 나눴다. 특히 서포터를 시작하게 된 계기와 방향성을 들어서 좋았다.\n좋은 인연 오래가길 바란다.\n\n## 일인칭 단수\n\n- 무라카미 하루키 씨가 일상에서 영감을 얻어 단편집을 엮어내는 모습이 인상 깊다. 사소한 호기심이 탐구로 이어져야 작품이 되지 않을까?\n\n## 마치며\n\n피로가 풀리지 않는다. 아무리 자도 피곤하다! 규칙적인 시간에서 조금 벗어났는데, 다시 정상화되길 바란다.\n"},{"excerpt":"마침내 봄을 시작한다. 워밍업 클럽 확장판 추상이란 무엇일까? Gilded Rose Refactoring Kata by: Dmitry Kandalov 지난 기수에서 배운 클린 코드와 테스트 코드 복습을 시작했다. 부족한 부분은 강의로 보충하고 영상을 따라하는 중이다. 마치며 미루다 운동을 못해 아쉽다. 아침에 하지 않으면 계속 포기하는 운동, 가볍게 시작…","fields":{"slug":"/daily-250304/"},"frontmatter":{"date":"March 04, 2025","title":"2025-03-04 개화","tags":["회고/일간","인프런워밍업클럽"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/0qhreE12TQ0x669kJDfL3V?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**마침내 봄을 시작한다.**\n\n## 워밍업 클럽 확장판\n\n> 추상이란 무엇일까?\n\n- [Gilded Rose Refactoring Kata by: Dmitry Kandalov](https://youtu.be/AxxNHKCldzA?si=orgrmn8QGkUYKhVR)\n\n지난 기수에서 배운 클린 코드[^1]와 테스트 코드[^2] 복습을 시작했다. 부족한 부분은 강의로 보충하고 영상을 따라하는 중이다.\n\n## 마치며\n\n미루다 운동을 못해 아쉽다. 아침에 하지 않으면 계속 포기하는 운동, 가볍게 시작하면 좋겠다.\n\n### 오늘의 함께 읽기\n\n- [『세컨드 브레인은 옵시디언』(시안, 골든래빗(주), 2024)](https://product.kyobobook.co.kr/detail/S000213513105): 옵시디언 기초 배우기\n- [『Clean Code(클린 코드)』(로버트 C.마틴, 인사이트, 2013)](https://product.kyobobook.co.kr/detail/S000001032980): 왜 중요할까?\n"},{"excerpt":"시네마에서 보내는 시네마는 예술이다. 트러블슈팅(Troubleshooting) 이미지가 출력되지 않았다. 로 블로그를 운영한 지 1년, 처음 겪는 오류다. 보통 패키지 버전 충돌이 전부였는데, 이번에는 로그조차 없었다.\n해결 방법을 검색하기 전, 상황을 정리했다. 원인 운영체제 이미지 포맷 캐시 1. 운영체제 macOS와 Windows를 모두 사용한다. …","fields":{"slug":"/daily-250303/"},"frontmatter":{"date":"March 03, 2025","title":"2025-03-03 CINEMA","tags":["회고/일간","트러블슈팅","문화/보드게임"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/5oyTzFXDUIPeIaLUsvk01d?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**시네마에서 보내는 시네마는 예술이다.**\n\n## 트러블슈팅(Troubleshooting)\n\n이미지가 출력되지 않았다. `Gatsby`로 블로그를 운영한 지 1년, 처음 겪는 오류다. 보통 패키지 버전 충돌이 전부였는데, 이번에는 로그조차 없었다.\n해결 방법을 검색하기 전, 상황을 정리했다.\n\n### 원인\n\n- 운영체제\n- 이미지 포맷\n- 캐시\n\n**1. 운영체제**\n\nmacOS와 Windows를 모두 사용한다. Windows 문제인가 싶었지만, macOS에서도 동일한 증상을 보였다.\n\n**2. 이미지 포맷**\n\n이미지 포맷으로 `PNG`, `JPEG`, `AVIF`[^1]를 섞어 쓴다. 특정 이미지 포맷에서 발생한 문제인가 싶었지만, 그러기엔 뜬금없다.\n더불어 해결해야 할 과제가 많았고, 언제 문제가 또 생겨도 이상하지 않았다. 아니길 빌었다.\n\n**3. 캐시**\n\nMac mini와 MacBook Air를 번갈아 쓰는데, 둘 다 에러가 발생했다. 환경설정 문제라고 강하게 느꼈다.\n\n### 결과\n\n![설마? <출처: 명탐정 코난: 베이커가의 망령>](detective-conan-the-phantom-of-baker-street.jpg)\n\n문제는 캐시였다. `yarn run deploy-gh` 명령은 빌드한 결과를 배포한다. 노트북에서 혼자 작업할 때는 문제가 없었지만 여러 컴퓨터를 사용하다 누락한 내용이 있었다. `.cache`를 삭제하고\n`gatsby clean`을 실행한 뒤 빌드하니 정상 동작했다. 다행이다.\n\n## GitHub Actions\n\n### 원인\n\n> 22시, 저장소에 쌓인 커밋을 자동 배포한다.\n\n매일 글을 작성하니 배포가 번거로웠다. 자동화가 절실했다.\n\n### 결과\n\n![좌절 <출처: GIPHY>](frustration.gif)\n\n> `GitHub Actions`에서 `cron schedule` 사용하기\n\n유레카, `GitHub Actions`에서 `cron schedule`을 사용해 문제를 해결하면 되겠다! 단순해 보였다. 그런데 왜 해결하지 못했을까 (...) 스케줄링은 성공하지만 실제 배포가 이뤄지지\n않는다. 부디 해결하고 싶다.\n\n## 제 1회 보드게임 동호회\n\n![레디 셋 뱃(Ready Set Bet) <출처: 장태근블로그>](ready-set-bet.jpeg)\n\n동굴 속에서 빛도 없이 1년을 굶고 드디어 나왔다. [^2] 마감기한을 지키며 부하상태에 빠진 정신에 안정을 더했다. **오랜만에 룰북을 준비하며 보드게임은 테스트 코드 연습에 적합하다 느꼈다.** 요구사항과 결과가\n분명해서 영어 학습자료로도 적합하다. 추후에 스터디를 운영하게 되면 IT종사자를 모아 보드게임을 진행하고 싶다.\n\n### 개발자에게 적합한 보드게임 추천(논리)\n\n- [튜링 머신(Turing machines)](https://boardm.co.kr/front/product/product_detail.php?seq=18603&pinid=): 현대 컴퓨터의 기반, 튜링머신이\n  보드게임으로 등장했다.\n- [리코셰 로봇(Ricochet Robot)](https://boardm.co.kr/front/product/product_detail.php?seq=12847&pinid=): 알고리즘 사고 능력 향상\n  코딩게임\n- [마틴 파울러(Martin Fowler)](https://martinfowler.com/tags/board%20games.html)씨는 유명한 보드게임 마니아다.\n\n## 마치며\n\n예정된 일정 덕분에 더욱 바삐 움직였다. 독학을 선택한 지 1년 넘었다. 스스로 정한 마감은 어느 정도 지켜왔지만, 다른 사람과 약속한 마감은 또 다른 무게가 있다.\n마치 퀘스트를 깨는 게임 캐릭터가 된 기분이다. 전략적으로 이용하자.\n\n입춘은 지났어도 진짜 봄은 이제부터다. 개학이다. 포근해진 얼음도 녹아내리길 바란다.\n\n[^1]: [AVIF는 웹 이미지의 미래다](https://news.hada.io/topic?id=13927)\n[^2]: 개발이나 운동외에 외출없이 산다.\n"},{"excerpt":"울다가 웃으면? 꾸글 개발과 동행할 수록 좋아하는 분야가 있는 덕후와 함께 하고 싶다. 다음이 기대된다. 행복하다. 사고가 확장되고 연결하는 표현이 익어감을 느낀다. 마치며 바람의 노래를 듣기엔 우렁찼다. 금방이라도 벽을 허물겠다는 기세가 보였다.\n그럼에도 마음은 따뜻한 일요일을 보냈다. 모난 것 없이 둥글게 적당히 불어오는 행복에 해맑다. 좋아하는 일을…","fields":{"slug":"/daily-250302/"},"frontmatter":{"date":"March 02, 2025","title":"2025-03-02 NOT OK","tags":["회고/일간","스터디/꾸글"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/0tSDqQOK8EgoRxYXWkP5rR?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**울다가 웃으면?**\n\n## 꾸글\n\n- 개발과 동행할 수록 좋아하는 분야가 있는 덕후와 함께 하고 싶다. 다음이 기대된다.\n- 행복하다. 사고가 확장되고 연결하는 표현이 익어감을 느낀다.\n\n## 마치며\n\n바람의 노래를 듣기엔 우렁찼다. 금방이라도 벽을 허물겠다는 기세가 보였다.\n그럼에도 마음은 따뜻한 일요일을 보냈다. 모난 것 없이 둥글게 적당히 불어오는 행복에 해맑다. 좋아하는 일을 하고 있음을 다시 한번 실감했다.\n"},{"excerpt":"아무것도 하기 싫어. 우리는 그늘을 찾았네. 워밍업 클럽 서포터로 살아남기 전략적이 아닌, 적극적으로 다가가기 드디어 올해 워밍업 클럽이 시작됐다. 우연히 기회를 잡았다. 인연을 맺어준 활동인 만큼 올해는 어떤 즐거움과 어려움이 다가올지 기대된다. 운영팀과 러너의 사이에서 원활한 활로가 되고싶다. 영화: 미키17 봉준호 '미키 17' 죽는건 어떤 느낌이야…","fields":{"slug":"/daily-250301/"},"frontmatter":{"date":"March 01, 2025","title":"2025-03-01 시퍼런 봄","tags":["회고/일간","인프런워밍업클럽","문화/영화"]},"rawMarkdownBody":"\n<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/4644JaCBBX7EpiZY1XXJaW?utm_source=generator\" width=\"100%\" height=\"152\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\n\n**아무것도 하기 싫어. 우리는 그늘을 찾았네.**\n\n## 워밍업 클럽 서포터로 살아남기\n\n> 전략적이 아닌, 적극적으로 다가가기\n\n드디어 올해 워밍업 클럽이 시작됐다. 우연히 기회를 잡았다. 인연을 맺어준 활동인 만큼 올해는 어떤 즐거움과 어려움이 다가올지 기대된다. 운영팀과 러너의 사이에서 원활한 활로가 되고싶다.\n\n## 영화: 미키17\n\n![봉준호 '미키 17'](mickey-17.JPG)\n\n> 죽는건 어떤 느낌이야? 비범한 하루\n\n- '미키 17'은 평점보다 중요한 질문을 남겼다.\n- 행복은 과연 어디에 있는 것일까? 미키가 행복을 느꼈던 순간은 '우주'라는 도피처를 찾았을 때 아니었을까.\n- 죽고 또 죽었지만 고통 속에서 더욱 강해지는 미키가 인상 깊다. 포기하지 않고 살고 싶은 의지를 표현한 결과로 느껴졌다.\n\n> 현대사회 과학기술윤리, 당신은 어떤 사람으로 남아 선택하고 싶은가\n\n- 애석하게도 가장 두려웠던 존재가 삶에 가장 큰 위안거리로 다가왔다.\n- 등가교환, 누군가의 희생덕에 비로소 존재한다.\n- 계약서를 한번 더 검토하세요.\n- 익숙한 배우들이 표현하는 다채로움\n- 강철의 연금술사, 호문클로스, 연금술과 연성\n- 미키 17의 연장선, [실리카겔 (Silica GEL) - 2집 : POWER ANDRE 99](https://www.yes24.com/Product/Goods/124520301)\n\n## 마치며\n\n기록을 좋아한다. 지금까지 기록은 '나'를 위해 존재했다. 앞으로 '일간 장태근' 시리즈로 정재된 가벼운 하루를 표현하고 싶다.\n"},{"excerpt":"머니업 챌린지 첫번째 시간, 마치며 머니업 챌린지 LIVE 350개의 앱으로 월급의 7배를 벌고 경제적 자유 찾기 https://www.youtube.com/live/2-vJME8ohwo?si=CALnkL3D2tdDepbl 지금은 앱 개발 적기다! -워렌버핏 \"잠자는 동안에도 돈이 들어오는 방법을 찾아내지 못한다면\" 이래도 지랄. 저래도 지랄. 이미 시작…","fields":{"slug":"/moneyup2502/"},"frontmatter":{"date":"February 25, 2025","title":"머니업 챌린지","tags":["회고"]},"rawMarkdownBody":"\n머니업 챌린지 첫번째 시간,\n\n## 마치며\n\n# [머니업 챌린지 LIVE] 350개의 앱으로 월급의 7배를 벌고 경제적 자유 찾기\n\n> https://www.youtube.com/live/2-vJME8ohwo?si=CALnkL3D2tdDepbl\n\n- 지금은 앱 개발 적기다!\n\n* -워렌버핏 \"잠자는 동안에도 돈이 들어오는 방법을 찾아내지 못한다면\"\n* 이래도 지랄. 저래도 지랄.\n* 이미 시작하면 늦었어. 흔하게 들린다. 그런데 다른 시장도 똑같지 않아?\n\n## 실패 사례\n\n- 완벽함을 추구하다가 제작기간에 비해 성과를 얻지 못해서 아쉽다.\n\n* 윤종신 똥.\n\n## 정답?\n\n> 폴인 윤종신 참고\n\n- 회사 월급 대비 7배 수익을 얻는 중\n\n* 물론, 모든 말이 정답은 아니다. 나에 맞는 답을 찾아가길 바란다. 지식공유자는 다작을 선호한다.\n* 주제 상관없이 돈이 될만한 개발을 다했다.\n\n## 시작하고, 지속하는 것\n\n누구나 답은 알고있다. 누구나 처음엔 미미하다.\nNo Pain, No Gain 계단식 성장!\n\n1년동안 5만원 벌기 힘들었는데\n300만원 까지도 들어왔다. 역주행 하기도 했다.\n\n> 대나무 종자\n\n- 하루에 1시간만 해보자. 무리하지 말자.\n\n* GitHub 잔디심기, 관성을 부여한다.\n\n## 진짜 중요\n\n진짜 중요한 건 기술 역량도 중요하지만 멘탈, 수 없는 실패에 무던해지기, 좋은 경험으로 이어지기, 마라톤\n\n> 아 참, 앱개발 하기 좋은 날씨네. 수익화 광고!\n> 한줄의 코드가 모여 당신의 자유가 되기를.\n\n모르는 사람의 이야기보다 이미 알고있던 사람의 이야기를 들어서 인상깊었다.\n\n## 도전\n\n1. 개발, 너무 힘주지 않기\n2. 수익, 너무 큰 목표 X, 처음엔 `$1`\n\n- 아무도 나를 모르고 돈이 많았으면 좋겠다.\n\n## 도라\n\n> 이 사람, 보험팔면 위험하다.\n> 도라님이 머니업 챌린지를 한게 최고의 선택이 아닐까. 돈 쓸어 담을것같다... 반응 맛있네. 같이 보드게임해보고 싶은데?\n> Spotify에 이어 올해 처음으로 인상깊은 세션.\n> 마케팅은 E가 맞아.\n> 묘하게 둘이 티키타카가 좋다.\n\n- 머니업챌린지 참여해서 30만원 회수할까? (수강료 100%) 3명, 블로그? 투자할 만 한데?\n\n* 도라 말잘하네. 개고수네. 케이테스트.\n* 직접뵜다고 한다.\n\n## Q & A\n\n챌린지\n\n> 챌린지 참여자만 코배투 세션 참여 가능\n\n- 어떤유형의 앱을 선택하면 좋을까요?\n\n* 시장에서 어떻게 소비를 하는지 파악한다. 사전조사가 필요, 비용절약, 시간절약, 향상, 재미(도파민)\n    * 인앱결제, 구독, 광고 수익화(진입장벽이 낮다)\n* 광고가 수익화가 가장 낮다.\n\n**간단한 앱도 수익화 가능?**\n\n- 6년동안 1억이 넘는 수익을 얻음, 페이지 1개임. 중요한건 사용자의 요구를 만족해야 한다.\n\n* 계산기 만들어야겠다.\n\n**350개 앱 관리 노하우**\n> 고양이 커피 똥.\n\n- 야근수당 계산앱?\n\n* 모두관리하지는 않음. 뚜렷한 수익이 나지 않으면 포기함.\n* 모듈화를 통해 재사용성을 높임.\n* 느낌이 오면 더 간다.\n\n**앱 소비 경향, 수익 변화**\n\n- 모든 서비스, 자영업에서 겪는 동일한 현상\n\n**수익 관리**\n\n- 왜 떨어질까? 분석\n\n* 똥은 똥으로 덮는다. 사람이 다른 사람으로 잊혀지네. 앱이 다른 앱으로 잊혀지네.\n\n**경제적인 안정 외에 현재 단점**\n\n- 없다.\n\n**앱 개발을 이어올 수 있었는지, 동기** (나잖아?)\n\n- 결핍, 결혼하고 싶은데 돈이 없다.\n\n* 롤모델, 동경(다이어트)\n\n**선택과 집중, 경력 시도 vs. 하면서 성장**\n\n- 후자를 추천, 하면서 성장하세요.\n\n**내가 해도 되는건가?**\n\n- 공감해. 나도 신입일때 그랬어. 하지만 지금이 적기야.\n\n**초기 투자, 소요되는 금액**\n> 프좀챌린지\n\n- 초기 서버없이 Native로 운영\n\n* 이후 AWS를 사용, 프리티어를 알차게 적용, 프좀 프리티어 챌린지\n\n**프좀의 경쟁자**\n\n- 경쟁자라기보다, 비슷한 사람이 많은가?\n\n* 무리에서 가장 적게 돈벌고 있음(????)\n\n- 꿀단지를 찾아라. 💕\n\n> 이름을 갑자기 말해서 웃기네 사건사고\n\n**프로그램의 수명과 업데이트 딜레마**\n\n- 구글의 기습 경고, 보통 1~2년은 무난하게 버틴다.\n\n### 현장 질문\n\n- **RN vs. Native**: 니가 잘하는걸로 하세요\n- **앱 심사**: 구글 맘대로, 길면 2주, 평균 1~2시간.\n\n* **광고 수익, 영업비밀**: 자본주의, 나이가 많을수록... 직업이..., 타겟을 명확하게.\n* **사업자 필수?**: 인앱결제가 없으면, 광고로도 가능\n\n**디자인**\n\n- 노디자인, 구글참고\n\n**AI, 도구**\n\n- Cursor: 전, 후 차이가 크다. ChatGPT, Claude와 비교해도 대폭줄었다. 강력추천. GPT, Claude, Copliot 4개\n\n> 아빠 전 커서 프좀님이 될래요.\n\n3 실명 언급.\n"},{"excerpt":"2월이 다가왔을 때 나는 안개 자욱한 거리를 마주했다. 과거와 똑같은 모습으로 나를 기다렸다. 행사: 항복 모닝콜이 울리는 순간부터 잠들기 직전까지 끊임없이 싸우던 발자취 🍀 2025 지피지기 릴레이 라이브 - 인프런  1월부터 '2025 지피지기 릴레이 라이브'에 참여했다. 총 4개가 진행됐고 3개에 참가했다. 특히 마지막 라이브는 오프라인으로 참가했다…","fields":{"slug":"/monthly-20250223/"},"frontmatter":{"date":"February 23, 2025","title":"2025 월간 장태근 2월호 'Träumerei'","tags":["회고/월간"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/6z82w0l6kwE?si=J2yrpJ6J96GUfdcY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n2월이 다가왔을 때 나는 안개 자욱한 거리를 마주했다. 과거와 똑같은 모습으로 나를 기다렸다.\n\n## 행사: 항복\n\n모닝콜이 울리는 순간부터 잠들기 직전까지 끊임없이 싸우던 발자취\n\n### 🍀 2025 지피지기 릴레이 라이브 - 인프런\n\n![2025 지피지기 릴레이 라이브 - 인프런 <출처: 인프런>](inflearn-2025zpzglive.png)\n\n1월부터 '2025 지피지기 릴레이 라이브'에 참여했다. 총 4개가 진행됐고 3개에 참가했다. 특히 마지막 라이브는 오프라인으로 참가했다.\n\n**불안과 불확실 속 '나의 이름'으로 거뜬히 살아남기**\n\n작년, 알고리즘은 꾸준히 한기용 님의 강연을 추천했다. 나는 매번 미뤘고, 결국 지난 6월이 되어서야 마주했다.\n송길영 님도 비슷하다. 알고리즘이 몇 번이나 강연을 권했지만 선택하지 않았다.\n\n오프라인으로 첫 만남을 가졌다. 묘하게도 '기분 좋은 불편함'을 느꼈다. 모호하지만 마땅한 표현이 떠오르지 않는다.\n책에서 그려둔 그림이 강연 덕분에 더욱 선명해졌다. 늦은 시간이었지만, 끝까지 기다려 질문을 던졌다.\n\n송길영 님께서 \"오늘 들은 질문 중 가장 듣고 싶었던 질문\"이라는 말을 해주셨다. 인사치레 같은 말일 수 있지만 뜻깊었다.\n책은 얇지만 깊게 나눠야 할 내용이 가득하다. 통권 읽기를 마치고 토론하고 싶다.\n\n### 🧞 Kotlin Backend Meetup\n\n![Kotlin Backend Meetup](kotlin-backend-meetup.png)\n\n- **정철희 'Ktor Framework Starter'**\n    - 실습으로 진행됐다. 실습하는 행사를 처음 참여해서 그런지 색다르고 재밌었다.\n    - `Ktor`에서 `Express`에 향기를 느꼈다.\n- **박재성 'Gilded 리팩터링 챌린지'**\n    - 관심 있던 챌린지를 [Gilded Rose Refactoring Kata](https://youtu.be/AxxNHKCldzA?si=i4wGnhdATPotWlFM) 설명해 주셔서 유익했다.\n      도전욕구가 샘솟았다.\n    - IntelliJ IDE의 무궁무진함을 느꼈다.\n\n끝까지 참석하고 싶었지만 일정이 생겨 2개를 듣고 나왔다. 경품 이벤트에 당첨됐었다는 사실을 알게 되어 쓰라렸다.\n\n## 크림: 무중력\n\n> la crème de la crème <출처: 『일인칭 단수』(무라카미 하루키, 문학동네, 2020)>\n\n등대가 꺼졌다. 지원했던 모든 활동에서 떨어졌다. 내색하지 않고 잘 버텼다고 여겼지만 오만이었다. 최근 찾아온 스트레스 중 가장 강력했다.\n새가 지저귀는 소리, 세탁기 소리까지 모든 신경이 곤두섰다. 아무것도 손에 잡히지 않았다. 무기력한 공기에 잠식되어, 좋아서 하던 일까지 허상으로 보였다.\n형식적으로 어영부영 시간을 죽이던 건 아닐까.\n\n잠깐 눈을 감았다 뜨면 많은 것이 사라져 있었다. 흔적 하나 남기지 않고 어딘가로 날아가버렸다. 감정의 미로를 왕복하는 사이, 의식은 표지판을 놓쳐버렸다.\n정신을 차려보니 숨이 제대로 쉬어지지 않았다.\n\n모든 일은 수수께끼의 고대문자 같았다. 아무리 시도해도 불가사의하고 설명되지 않았다. 스스로를 잃어버릴 만큼 치명적으로 다가왔다.\n\n![끝날 때 까지는 끝난 게 아니다. <출처: H2>](h2-yogi-berra.jpg)\n\n그러나 시간이 지나 멀찌감치 물러나 바라보니 아무래도 상관없는 시시한 일처럼 느껴졌다. 인생의 크림과는 아무 관계없는 일.\n\n## 마치며: We live in the jurassic park\n\n![최악의 날, 최고의 날 <출처: 명탐정 코난>](case-closed-worst-day-best-day.jpg)\n\n심장이 다시 뛰기 시작했다. 침묵을 지키던 겨울은 끝났다. 아쉬웠던 시간을 반면교사 삼아 기회를 잡자. 봄이 오기 전 준비를 마쳐 마침내 꽃이 피길 바란다.\n"},{"excerpt":"국경의 긴 터널을 빠져나오자 눈의 고장이었다. 밤의 밑바닥이 하얘졌다. 신호소에 기차가 멈춰섰다.\n<출처: 『설국』(가와바타 야스나리, 민음사, 2009)> 2025, 새로운 시즌이 시작됐다. 이번 시즌 주제는 '나눔'이다. 성과는 나눌수록 커지고, 이야기는 퍼질수록 깊어진다. 혼자 오르는 산은 없고, 지나는 강도 없다. 서로가 이어질 때 비로소 길이 만…","fields":{"slug":"/monthly-20250126/"},"frontmatter":{"date":"January 25, 2025","title":"2025 월간 장태근 1월호 '눈'","tags":["회고/월간"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/fiGSDywrX1Y?si=yzKk6CEQkIZ0HxdZ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n> 국경의 긴 터널을 빠져나오자 눈의 고장이었다. 밤의 밑바닥이 하얘졌다. 신호소에 기차가 멈춰섰다.\n> <출처: 『설국』(가와바타 야스나리, 민음사, 2009)>\n\n2025, 새로운 시즌이 시작됐다. 이번 시즌 주제는 '나눔'이다.\n\n성과는 나눌수록 커지고, 이야기는 퍼질수록 깊어진다. 혼자 오르는 산은 없고, 지나는 강도 없다. 서로가 이어질 때 비로소 길이 만들어진다.\n도전은 계속된다. 축적도된 지식은 바탕이 된다. 실패는 흙이 되고, 배움은 비가 된다. 새로운 뿌리가 내려앉는다. 아직 쌓을 것이, 나눌 것이 많다. 발자국을 남긴다.\n\n## 밟다: First Step\n\n![나는 이 게임을 해봤어요! <출처: 오징어 게임2>](have-played-these-games-before.avif)\n\n새로운 친구, `Kotlin`에 다가갔다. 12월, 어색함이 감돌았다. 아직 남아있다. 하지만 지금은 일상에 자리 잡았다. 변화는 어떻게 일어났을까?\n\n### 📕 학자형: 코틀린 아카데미 핵심편\n\n가장 마음에 든 책은 『코틀린 아카데미 핵심편』이다. 구성, 번역, 크기까지 마음에 든다. 추천받아 참고했던\n『Kotlin in Action』, 『아토믹 코틀린』도 좋았지만 밀렸다. 미래까지 고려했을 때 가장 현명한 소비다.\n\n### 🐍 야생형: 리팩터링 읽기모임\n\n야생에 뛰어들었다. 이전부터 다른 언어로 된 자료를 주로 사용하는 언어로 변환하고 정리하는 습관을 들였다. 유명 고전이지만 시도할 때마다 고역을 치뤘다.\n\n꼭 읽고 싶었다. 드디어 펼쳤다. `commit`을 남기고 페이지를 넘길 때마다 리듬감이 느껴졌다.\n\n**사실 리팩터링이 아니라 불과 얼음의 춤(A dance of Fire and Ice)이 아닐까? 강력 추천한다.**\n\n### 📝 정리: 일거양득\n\n한 없이 미뤄 항아리에서 익던 기회를 잡아 다행이다. 두 방법이 상호보완 관계로 유지되면 좋겠다.\n\n**<참고 자료>**\n\n- [『코틀린 아카데미 핵심편』(마르친 모스카와, 인사이트, 2024)](https://product.kyobobook.co.kr/detail/S000213720494)\n- [토비의 스프링 '리팩터링 2판 스터디 모임'](https://youtu.be/NJQ5_BuAPwc?si=2GGw7bE9hoebtyFq)\n- [A Dance of Fire and Ice](https://store.steampowered.com/app/977950/A_Dance_of_Fire_and_Ice/)\n\n## 피하다: 꾀병\n\n> 꾹 참았던 말 전부 다<br>\n> 딱 오늘만<br>\n> 꾀병 부릴래<br>\n\n행복, 급작스레 찾아왔다. 기쁨을 억누를 수 없었다. 과부하에 빠졌다. 새로고침이 되지 않자 꾀병을 부렸다.\n다행히 쌓아둔 습관 덕분에 금세 돌아왔다. 일상으로 돌아올 때 두려움은 적었고, 무던하게 흘러갔다.\n어차피 돌아가면 할 일이 명확하다. 다시 걷는다.\n\n## 톺아보다: Lovers\n\n- [I'm Live 'Ep.340 MRCH(윤마치)'](https://youtu.be/1iCQSP2h14g?si=6_pvrF0szkPi1-y-)\n\n### 👀 보다: 나인데\n\n- [[라디오스타] 윤종신에게 나타난 번아웃의 증상](https://youtu.be/xECN2LB5DJ8?si=VK3PMmFquzKZMDmS)\n- [Matthew McConaughey winning Best Actor | 86th Oscars](https://youtu.be/wD2cVhC-63I?si=A87taZmYrUN47LuO)\n\n좋아하는 사람과 대화를 나눌 때면 고민이 해결된다. 스스로 대화하기도 하지만 오늘은 영상 덕분에 해결했다.\n\n### 📚 읽다: Love is a magic\n\n- 열두 발자국\n- 어떻게 사랑할 것인가\n\n두 권이 인상 깊다. 과학과 문학을 바라보는 시야를 넓혀줬다. 변화를 이뤘다.\n\n### 🏃🏻‍♂️ 나아가다: 아직은 낭만\n\n- 앞으로 과학 도서 위주로 읽을 것 같다. 문학은 한국 소설 또는 SF를 읽고 싶다. 표현 방법 중 하나인 '말하기'도 관심 있다.\n- 공식 문서를 원문으로 주로 읽어서 그런지, 영어에도 흥미가 가득하다. 행보가 기대된다.\n- **명료한 글을 작성하다 보면 오감으로 경험할 수 있는 글이 되지 않을까?**\n\n## 마치며: 선물\n\n> 발에 힘을 주며 올려다본 순간, 쏴아 하고 은하수가 시마무라 안으로 흘러드는 듯했다.<br>\n> <출처: 『설국』(가와바타 야스나리, 민음사, 2009)>\n\n눈 떠보니 2018년이다. 2025년의 경험을 2018년 발자취와 연결한다. 과거의 나는 현재의 뿌리였고, 오늘의 나는 미래의 줄기가 됐다.\n다시 시작되는 터널을 지나, 더 깊고 넓은 숲을 꿈꾼다.\n"},{"excerpt":"명료한 커밋 메시지를 통해 의도를 전달한다. 하지만 가끔은 실수한다. 잘못된 커밋메시지를 작성했는지 모르고 묵혔다. 어떻게 문제를 해결할 수 있을까? 이전 커밋을 이야기할 때 흔히 마주하던 상황은 두 가지이다. 방금 만든 커밋 과거 커밋 1. 방금 만든 커밋 수정하기 방금 작성한 커밋을 수정하기 위해서는 다음과 같이 작성한다.을 사용해서 쉽게 덮어쓴다. …","fields":{"slug":"/changing-commit-message/"},"frontmatter":{"date":"January 19, 2025","title":"Git 커밋 메시지 수정하기","tags":["Git"]},"rawMarkdownBody":"\n명료한 커밋 메시지를 통해 의도를 전달한다. 하지만 가끔은 실수한다. 잘못된 커밋메시지를 작성했는지 모르고 묵혔다. 어떻게 문제를 해결할 수 있을까?\n\n이전 커밋을 이야기할 때 흔히 마주하던 상황은 두 가지이다.\n\n1. 방금 만든 커밋\n2. 과거 커밋\n\n## 1. 방금 만든 커밋 수정하기\n\n```shell \ngit commit --amend \n```\n\n방금 작성한 커밋을 수정하기 위해서는 다음과 같이 작성한다.`amend(수정)`을 사용해서 쉽게 덮어쓴다.\n\n> `--force-with-lease`: 원격저장소에 푸시한 커밋은 똑같이 수정하고 '강제 푸시' 해야 한다.\n\n## 2. 과거 커밋 수정하기\n\n```shell \ngit log \n```\n\n먼저 수정하고 싶은 커밋을 확인하자.\n\n> 방금 만든 커밋 수정하기에 비해 골치 아프다. 하지만 금방 익숙해질 수 있다.\n\n### 2.1 여러 커밋\n\n```shell \ngit rebase -i HEAD~n \n``` \n\n1. 마지막 커밋 `n`개를 표시한다.\n2. `pick`을 `reword`로 수정한다.\n3. 수정한 커밋 메시지를 작성하고 종료한다.\n\n### 2.2 조금 더 오래된 커밋\n\n![과거 커밋 수정하기 시나리오 <출처: 장태근블로그>](how-to-setup-rebase.png)\n\n`git log` 명령을 실행해서 커밋내역을 확인한다. 예를 들어 수정하고 싶은 커밋이 `0eb0d7`로 시작하는 커밋일 때 `HEAD`를 바로 직전커밋인 `230339`로 이동해야 한다.\n\n```shell \ngit rebase -i 230339 #<직전커밋> \n``` \n\n수정하고 싶은 커밋에 직전커밋 로그로 이동하고 `pick`으로 표시되는 해쉬값을 `edit`으로 수정한다. 에디터로 작업을 마치면 해결하고 싶던 파일을 작성하고 추가하면 된다.\n\n![과거 커밋 수정하기 완료 <출처: 장태근블로그>](rebase-continue.png)\n\n개발도구로 파일을 추가한 후 커밋 메시지를 수정했다.\n\n### 2.3 정리하기\n\n여러 커밋을 수정하는 두 가지 방법을 알아봤다. 비교적 최근 커밋을 수정한다면 첫 번째(`git rebase -i HEAD~n`) 방법이 편리하다. 반면 조금 더 오래된 커밋을 수정해야 한다면 내역을 확인하고 직전\n커밋으로 확인하는 두 번째 방법이 유용하다.\n\n## 마치며\n\n흔히 마주하는 두 가지 상황을 알아봤다. 커밋을 최소한의 단위로 잘 나눠야 된다고 한번 더 느꼈다. 분기를 잘 나눠야 충돌과 같은 다른 문제가 발생했을 때도 쉽게 해결할 수 있다.\n더불어 명료한, 좋은 커밋 메시지를 작성하는 방법도 관심이 생겼다.\n\n> 협업을 진행 중이라면 한번 더 확인하자. 커밋 내역 수정을 조심하자.\n\n**<참고 자료>**\n\n- [GitHub Docs 'Changing a commit message'](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message)\n"},{"excerpt":"나는 괜찮아 지나갈거라 여기며 덮어 둔 지난 날들 <출처: 정승환 - 보통의 하루> 누구나 쉬고 싶은 때가 찾아온다. 11월 말이 그랬다. 개발을 놓고 싶지만 완전히 놓고 싶지 않았다. 고민 끝 선택한 방법이 '과학'분야 책 읽기다. 과학 분야의 책을 읽을 땐 항상 기술과 아이디어가 떠올랐다.\n색다른 위로도 받는다. 오랜만에 읽은 『과학 콘서트』(정재승,…","fields":{"slug":"/into-the-impossible/"},"frontmatter":{"date":"January 07, 2025","title":"물리학자는 두뇌를 믿지 않는다","tags":["독서","과학(400)"]},"rawMarkdownBody":"\n![『물리학자는 두뇌를 믿지 않는다』(브라이언 키팅, 다산초당, 2024)](9791130652016.avif)\n\n> 나는 괜찮아 지나갈거라 여기며 덮어 둔 지난 날들 <출처: 정승환 - 보통의 하루>\n\n누구나 쉬고 싶은 때가 찾아온다. 11월 말이 그랬다. 개발을 놓고 싶지만 완전히 놓고 싶지 않았다. 고민 끝 선택한 방법이 '과학'분야 책 읽기다. 과학 분야의 책을 읽을 땐 항상 기술과 아이디어가 떠올랐다.\n색다른 위로도 받는다. 오랜만에 읽은 [『과학 콘서트』(정재승, 어크로스, 2011)](https://product.kyobobook.co.kr/detail/S000001599745)가 그랬다.\n\n재밌다. 더 재밌는 건 없을까? 이 책이 다가왔다.\n\n## 막막한 그 순간 뇌는 일하고 있다\n\n![중요한 것은 꺾이지 않는 마음 <출처: League of Legends World Championship 2023>](2023-drx-deft.avif)\n\n> 우리 뇌에서 꾸준히 처리를 진행하다가 마침내 문이 열리는 지점에 도달하는 거예요. 하지만 그 문에 도달하기 전까지는 드러나질 않아요. 그 모든 막막한 고민이 올바른 방향으로 가도록 뇌를 준비하고 연결하게 하고\n> 있었다는 거예요. 그런 다음에 마지막 고리를 완성하는 겁니다. 이 점을 염두에 두는 게 중요해요. \"그냥 기다리면 큰 도약이 일어나겠지.\" 그건 아니에요.\n\n> 되도록 넓은 면적을 깨끗이 닦아두면 지나가던 위대한 착상이 달라붙을 가능성이 커지지 않겠는가\n\n일신우일신, 진인사대천명, 중요한 것은 꺾이지 않는 마음과 같은 표현을 좋아한다. 나는 그저 지금 내가 해야 할 일을 찾아 하고 있다.\n\n누구나 드라마 주인공 같은 삶을 꿈꾼다. 로또가 당첨되고 코인이 떡상해서 일을 그만두는 상상. 하지만 무엇이든 한 순간에 일어나지 않고 전조증상이 있다 믿는다. 아무것도 하지 않으면 변하지 않는다. 끝없이 시도하길.\n\n## 마치며\n\n편안한 분위기에서 사유하며 읽는다. 평소 밑줄 치며 읽기를 선호하지 않는다. 만약 밑줄을 치며 읽었다면 이 책은 너덜너덜 해졌을 것이다. 그만큼 글로 담아내기 버겁다. 구매해서 읽고 싶다.\n\n학창 시절 가장 싫어하는 과목을 묻는다면 단연코 과학이다. 알코올램프를 만질 때부터 담을 쌓았다. 과학자와 대화하며 위로받을지 몰랐다. 또 다른 세계를 유영하고 싶다.\n\n- 좋아요\n    - 가볍게 읽기 좋은 구성과 크기\n    - 속도감 있는 문체\n    - 지혜를 담은 이야기\n- 아쉬워요\n    - 명확한 정답\n    - 한 가지 주제에 대해 깊은 고민하기\n\n**<참고 자료>**\n\n- [『물리학자는 두뇌를 믿지 않는다』(브라이언 키팅, 다산초당, 2024)](https://product.kyobobook.co.kr/detail/S000213026035)\n"},{"excerpt":"객체 클래스 프로퍼티 생성자 가시성 변경자 패키지 테스트 코틀린은 왜 그럴까? 객체는 모든 곳에 존재한다 클래스는 상태와 행동을 정의하여 사용자 정의 타입이 된다. 멤버(member)란 객체에 소속된 프로퍼티, 함수를 의미한다. 객체에 소속된 일원이다. 인스턴스는 객체 생성을 통해 만들어진 결과물이다. 멤버 함수 호출은 메시지를 보내는 행동과 같다. 코틀…","fields":{"slug":"/kotlin-start-01-class-object/"},"frontmatter":{"date":"January 01, 2025","title":"객체 | 코틀린 입문 EP.1","tags":["Kotlin"]},"rawMarkdownBody":"\n- 객체\n- 클래스\n- 프로퍼티\n- 생성자\n- 가시성 변경자\n- 패키지\n- 테스트\n- 코틀린은 왜 그럴까?\n\n## 객체는 모든 곳에 존재한다\n\n- 클래스는 상태와 행동을 정의하여 사용자 정의 타입이 된다.\n- 멤버(member)란 객체에 소속된 프로퍼티, 함수를 의미한다.\n    - 객체에 소속된 일원이다.\n- 인스턴스는 객체 생성을 통해 만들어진 결과물이다.\n- 멤버 함수 호출은 메시지를 보내는 행동과 같다.\n- 코틀린은 명시적으로 타입 변환이 필요하다.\n    - 컴파일러가 임의의 타입을 변환할 때 생기는 혼란을 피하기 위해 내린 결정이다.\n- 이름 짓기는 여전히 중요하다. 이름을 신경 쓰면 이해하기 쉬운 코드에 한 걸음 다가갈 수 있다.\n\n## 클래스 만들기\n\n- 필요한 개념만 표현하는 '객체'를 떠올리는 행동이 문제 해결의 시발점이다.\n- `class` 키워드를 사용하여 클래스를 선언한다.\n    - 헤더와 본문은 선택 사항이다.\n    - 복잡한 클래스 선언이 필요하면 본문을 구성한다.\n- 멤버 함수는 클래스에 속한 함수다. 최상위(top-level) 함수는 클래스에 속하지 않은 함수다.\n    - 함수를 선언하기 위해 `class`가 필요한 자바와 달리 최상위에 선언할 수 있다.\n- 함수가 호출되는 동안 다른 멤버에 접근할 수 있다.\n- `this` 키워드가 존재한다. 하지만 가급적 불필요한 `this` 사용을 권장하지 않는다.\n\n## 프로퍼티\n\n> 프로퍼티(property)는 클래스에 속한 `var`, `val`이다.\n\n- 멤버 함수는 점 표기법 외에도 자신이 속한 객체의 프로퍼티에 접근할 수 있다.\n    - `this` 키워드를 사용할 수 있지만 권장하지 않는다.\n- 가변(var, mutable) 최상위 프로퍼티 선언하기는 안티 패턴이다.\n    - 프로그램이 복잡할수록 공유된 가변 상태를 추론하기 어렵다.\n- `var`를 사용하면 참조 대상을 다른 대상으로 변경할 수 있다.\n- `val`를 사용하면 참조 대상을 변경할 수 없다.\n- 가변성이란 내부 상태를 바꿀 수 있는 상태를 의미한다.\n\n## 생성자\n\n> 객체를 효과적으로 초기화하는 기본적인 방법\n\n- 클래스 본문 밖에서도 생성자 파라미터에 접근하기 위해서는 `var`, `val` 키워드를 사용해야 한다.\n    - 식별자가 프로퍼티로 변경된다.\n- `override`는 이미 정의된 함수를 재정의 하겠다는 의도를 전달한다.\n\n## 가시성 변경자\n\n> 작성한 코드를 다시 보면 더 좋은 방법이 떠오른다.\n\n- 리팩터링(refactoring)을 하는 이유는 코드를 다듬어 유지 보수하기 좋은 코드를 작성하기 위해서다.\n- 소비자는 버전이 변경돼도 기능이 똑같이 동작하길 원한다. 새로운 코드를 작성하고 싶지 않다. 생산자도 마찬가지다. 변경하는 내용이 소비자에게 영향을 끼치지 않는다는 확신을 가지고 개선하고 싶다.\n    - 확신을 주는 장치는 자동화된 테스트다.\n- 소프트웨어를 설계할 때 변경해야 하는 요소와 유지되어야 하는 요소를 분리해야 한다.\n- 가시성 변경자를 통해 영역을 분리한다.\n- `private`는 주로 클래스 멤버에 사용한다.\n- 필요한 함수와 클래스만 외부에 공개하고 가능한 많은 요소를 `private`로 선언한다.\n    - 리모컨을 사용할 때 내부의 구조를 알지 못해도 사용할 수 있듯이 클라이언트에게 필요한 부분만 공개하고 내부 구현을 숨긴다.\n\n## 패키지\n\n> DRY(Don't Repeat Yourself)\n\n- 같은 내용이 반복될 때 이를 수정, 개선하기 위해서는 더 많은 고통을 인내해야 한다.\n    - 중복은 실수 할 여지가 크다.\n- `import`를 사용하여 코드를 재사용한다.\n- 패키지(package)는 연관 있는 코드를 모아둔 공간이다.\n- `as` 키워드를 사용하여 `import` 할 때 이름을 변경할 수 있다.\n- 패키지 이름은 소문자만 사용한다.\n\n## 테스트\n\n> 프로그램을 빠르게 개발하기 위해서는 지속적인 테스트가 필수다.\n\n- 코드의 동작을 검증할 때 `println()`은 부실한 방법이다. 매번 출력을 자세히 살펴보고 의식적으로 확인해야 한다.\n    - 오류를 찾는데 시각적인 검사를 신뢰할 수 없다.\n- 테스트를 배우면 테스트가 포함되지 않은 코드를 보면 점점 불편해지고, 테스트가 없는 코드는 틀린 코드라고 정의하기도 한다.\n\n### 테스트 프레임워크\n\n- [JUnit](https://junit.org/junit5/): 자바에서 가장 널리 쓰인다. 코틀린에서도 유용하다.\n- [Kotest](https://kotest.io/): 코틀린 전용으로 설계됐다. 언어의 여러 기능을 살려 작성 가능하다.\n- [Spek](https://www.spekframework.org/): 명세 테스트(specification test)라는 다른 형태의 테스트를 제공한다.\n\n### 테스트는 프로그램의 일부분이다\n\n- 소프트웨어 개발 과정에 테스트가 포함되어 있어야 자연스럽고 효과적이다.\n\n## 코틀린은 왜 그럴까?\n\n사소하지만 왜 그럴지 나름의 근거로 추론한다.\n\n- Member function vs. Method\n- Visibility modifier vs. Access modifier\n- JUnit vs. Kotest\n\n### Member function vs. Method\n\n클래스에 소속된 함수는 보통 메서드(method)라고 부른다. 하지만 코틀린 공식 문서는 '멤버 함수(member function)'라고 지칭한다.\n\n코틀린은 `class` 없이도 최상위(top-level) 함수를 선언할 수 있다. 더불어 메서드도 사실 함수가 아닐까? 클래스에 소속된 함수는 멤버 함수, 소속되지 않은 함수는 함수라고\n부르면 자연스럽다.\n\n## 마치며\n\n**<참고 자료>**\n\n- [Kotlin Docs 'Classes'](https://kotlinlang.org/docs/classes.html)\n- [Kotlin Docs 'Properties'](https://kotlinlang.org/docs/properties.html)\n- [Kotlin Docs 'Visibility modifiers'](https://kotlinlang.org/docs/visibility-modifiers.html)\n"},{"excerpt":"어수선한 2024, 드디어 끝이 다가왔다. 사건을 기록하고 감정을 요약했다. 2024 총평 시도하다: 시퍼런 봄 블로그를 시작하고 정착했다. '나를 위한 글'에서 '다른 사람도 생각하는 글'로 확장됐다. 다양한 책을 읽었다. 기술책 외에도 자기 계발서를 주로 읽었다. 중복되는 내용도 많았지만 지식보단 지혜를 얻기 위해 메시지에 집중했다. 공부법 데스크톱과…","fields":{"slug":"/retrospective-2024/"},"frontmatter":{"date":"December 30, 2024","title":"행보 2024 장태근 'Love wins all'","tags":["연간"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/JleoAppaxi0?si=L3xanBMUTJYGAdFV\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n어수선한 2024, 드디어 끝이 다가왔다. 사건을 기록하고 감정을 요약했다.\n\n## 2024 총평\n\n### 시도하다: 시퍼런 봄\n\n- 블로그를 시작하고 정착했다.\n    - '나를 위한 글'에서 '다른 사람도 생각하는 글'로 확장됐다.\n- 다양한 책을 읽었다. 기술책 외에도 자기 계발서를 주로 읽었다. 중복되는 내용도 많았지만 지식보단 지혜를 얻기 위해 메시지에 집중했다.\n- 공부법\n    - 데스크톱과 노트북 함께 사용하기를 선택했다.\n    - 공부법을 바꾸기에 두려움이 사라졌다. 고정적인 사고보다 유연한 사고가 필요하다. 상황에 맞는 선택.\n- 함께 자라기를 선택했다.\n    - 오랫동안 혼자 공부했다. 고독에서 얻은 경험도 소중했지만 함께를 통해 사고의 전환을 이뤘다.\n\n### 잘하다: 내 생에 아름다운\n\n- 10대, 20대 모습이 어딘가 부자연스럽게 단절되어 있었다. 개발을 하며 잃어버린 모습을 찾았다.\n    - 함께 개발자를 꿈꾸던 친구와 연락이 이어졌다.\n    - 어렸을 때 꿈꿨던 직업을 모두 이루고 있는 기분에 설렌다.\n    - 인터뷰, 용기 내길 잘했다. 부끄러움이 많아 걱정했다. 소풍 전날처럼 밤잠도 설쳤다. 용기 내서 얻은 경험 덕분에 행복하다. '질문하는 방법'을 특히 고민하기 시작했다.\n- 함께 자라기\n    - 워밍업 클럽, 커리어 랠리, 오프라인 밋업, 콘퍼런스까지. 어떻게 올해 다 했지?\n    - 꾸글(블로그 글쓰기), 자바스크립트, 자바 등 다양한 스터디에 참여했다.\n    - 아무리 채용공고에서 테스트 코드를 강조해도 어떻게 개선하고 무엇이 좋은지 느끼지 못했다. 하지만 함께 공부하며 경험을 나누니 개발을 바라보는 시야가 넓어졌다.\n- '나'와 조금 더 친해졌다.\n    - 회고를 통해 강점과 약점을 알았다.\n    - 개발 데이터베이스를 구축했다.\n- 목 놓아 외치던 바다를 봤다. 훌륭한 선택!\n- 이른 새벽, 산책길에 오르다 돈을 주웠다. 경찰서도 다녀오고 다사다난했던 만큼 복이 되어 떨어진다.\n\n### 아쉽다: LAST DANCE\n\n- 마침표를 찍지 못해 아쉽다.\n    - 쉼표가 있어도 마침표를 찍었다면 또 다른 세계가 열리지 않았을까?\n    - 오늘 또 일을 미루고 말았다\n- 휴식에 인색하다.\n    - 좋은 날이 있으면 좋지 않은 날도 있다. 인정하지 않고 애써 부정하려다 더 큰 화를 불렀다. 응급실까지 다녀왔다.\n    - 나만의 공부법처럼 매일 컨디션을 확인하는 프레임워크가 필요하다.\n- 기술 블로그\n    - 기술과 일상을 담은 블로그를 생각했다. 하지만 기술을 고민한 흔적은 담지 못해 아쉽다. 의식적으로 간단한 주제부터 작성하며 색채를 띄고 싶다.\n\n## 마치며\n\n> Dearest, darling, my universe<br>\n> 날 데려가 줄래?\n\n- 혼자와 함께를 잘 버무리고 싶다.\n    - 주도적인 선택이 이어지기를.\n- 사랑, 감사함을 나누고 싶다.\n    - 받는 것도 좋지만 나눌 수 있는 사람으로 성장하고 싶다.\n- 쫓아가는 것이 아닌 할 수밖에, 될 수밖에 없는 상황을 만들고 싶다. 2025, 역대급 시즌을 위하여, Welcome to the Show!\n"},{"excerpt":"바람은 차갑고 날카롭다. 일상은 한없이 고요하고 따뜻하다. 별다른 일 없이 흘러갔다. 아니, 없어서 더 좋았다. 배우고 익어가는 시간이 중심을 이뤘다. 후련하다: number one girl Tell me I'm that new thing\ntell me that I'm relevant\n<출처: ROSÉ - number one girl> 돌아오지 않는 메아…","fields":{"slug":"/retrospective-20241229/"},"frontmatter":{"date":"December 29, 2024","title":"2024 월간 장태근 12월호 'Heavy Is the Crown'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZAt8oxY0GQo?si=TaG0aGr9GkiJ-mpx\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n바람은 차갑고 날카롭다. 일상은 한없이 고요하고 따뜻하다. 별다른 일 없이 흘러갔다. 아니, 없어서 더 좋았다. 배우고 익어가는 시간이 중심을 이뤘다.\n\n## 후련하다: number one girl\n\n> Tell me I'm that new thing<br>\n> tell me that I'm relevant<br>\n> <출처: ROSÉ - number one girl>\n\n돌아오지 않는 메아리, 일방적으로 바라보던 해가 졌다. 내년을 향하던 그림도 물거품이 됐다. 강제로 다가온 겨울 방학이 오히려 좋고 설렌다.\n새로운 친구를 사귀기 시작했다.\n\n## 알쓸신잡: 세일즈\n\n지난달과 또 다른 방법을 시도했다. 관심 분야에 조금 더 몰두했다. 의식적으로 책을 빌리지 않았다. 스터디도 전부 끝나 보유 중인 책에 관심을 돌렸다.\n\n- 면도날\n- 물리학자는 두뇌를 믿지 않는다\n- 아토믹 코틀린\n- 세컨드 브레인은 옵시디언\n\n기술서, 소설, 에세이 위주로 읽었다. 우열을 가리기 어려울 정도로 시간 가는지 몰랐다.\n\n## 마치며\n\n![2024 서울빛초롱축제 <출처: 장태근블로그>](2024-seoul-lantern-festival.avif)\n\n> This is what you asked for, heavy is the crown<br>\n> <출처: LINKIN PARK - Heavy Is the Crown>\n\n늘어진 시간 끝자락에 섰다. 우려 섞인 목소리가 들린다. 해야 할 일을 했을 뿐인데 과분한 관심과 사랑을 받았다. 덕분에 지금까지 버티고 살아남았다.\n\n작년 이 맘 때는 어땠는지 기억나지 않을 정도로 따뜻하게 보냈다. 기세를 이어 1월로 한 발 딛자.\n"},{"excerpt":"가장 먼저 도착했다. 운영진분들이 배려해 주신 덕분에 가벼운 농담을 나누고 가운데 자리에 앉았다. 분위기에 취했다. 매번 다른 장소에서 진행되는 덕분에 새로웠다. 특히 예상하지 못한 폴라로이드, 음식 등 다양한 이벤트가 준비되어 더욱 반가웠다.\n하지만 숨 멎을 듯 침묵이 이어져 힘들었다. 혜린님께서 등장해 주셔서 몹시 감사했다. 빛! 식사 및 직무별 네트…","fields":{"slug":"/inflearn-warmup-club-networkingday-241213/"},"frontmatter":{"date":"December 14, 2024","title":"인프런 워밍업 클럽 네트워킹 데이 후기","tags":["행사","인프런","인프런워밍업클럽","네트워킹데이"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 네트워킹 데이 <출처: 인프런>](warmup-networking-thumb.avif)\n\n가장 먼저 도착했다. 운영진분들이 배려해 주신 덕분에 가벼운 농담을 나누고 가운데 자리[^1]에 앉았다.\n\n분위기에 취했다. 매번 다른 장소에서 진행[^2]되는 덕분에 새로웠다. 특히 예상하지 못한 폴라로이드, 음식 등 다양한 이벤트가 준비되어 더욱 반가웠다.\n하지만 숨 멎을 듯 침묵이 이어져 힘들었다.\n\n~~혜린님께서 등장해 주셔서 몹시 감사했다. 빛!~~\n\n## 식사 및 직무별 네트워킹\n\n행사가 시작됐다. 2기 코치로 참여하신 우빈님께서 바로 옆자리에 앉으셔서 웃음[^3]이 새어 나왔다. 운이 좋았다.\n\n> 네트워킹을 통해 얻을 수 있는 가장 큰 가치는 '지혜'다.\n\n오프라인 행사에서 나누는 대화가 뜻깊다. 현직자 입장에서 바라보는 상황과 고민을 들을 수 있어 좋다. 고려해 본 적 없던 이직과 기술적인 문제를 들었을 때\n마치 소설을 읽는 기분이다. 상상을 하며 현재 상황을 위로받고 생각을 전환했다.\n\n추가로 우빈님께 현장에서 떠오른 질문을 드렸다.\n\n### 코치님과 함께 춤을\n\n> Q. 테스트 코드와 클린 코드를 기획한 배경, 유레카를 외쳤던 경험은 무엇인가요?\n\n**우빈:** 신입, 업무에 투입했을 때 가장 먼저 코드 베이스를 검토하고 테스트 케이스를 추가했다. 다양한 주제 중 오랫동안 관심 가졌던 주제여서 선택했다.\n\n> Q. 지식공유자의 질문 & 답변 알람은 어떤 구조인가요?\n\n**우빈:** 메일로 알림이 온다.\n\nSlack 알림을 따로 사용하시는 지식 공유자가 [^4] 떠올라 질문드렸다. 우빈님께서 '수강생과 지속적으로 소통하시는 지식 공유자'라고 생각하여 질문드렸다.\n\n> Q. 수강 후기를 작성해도 될까요?\n\n강의를 듣고 무엇을 얻었는지, 포부와 달라진 점은 무엇인지 비교하는 것을 좋아한다. 더불어 다른 수강생은 어떤 생각을 하는지 궁금했다.\n\n책을 읽고 서평을 통해 사고를 확장하듯이 수강평을 넘어 다른 수강생들은 어떤 생각을 하는지 궁금했다. 수강평은 짧다! 도움을 받았다면 감사함을 표현할 줄 알아야 한다고 생각한다.\n현재 할 수 있는 최선의 방법, 강점이 '글쓰기'라고 생각한다. 조금이라도 도움 되면 좋겠다.\n\n## 발표: 제어의 역전\n\n### 1. 나다운 커리어 여정 만들기: 양준식(제이든)\n\n![지금껏 본 적 없는 극한 상상력! 광기의 멀티버스가 깨어난다! <출처: 닥터 스트레인지: 대혼돈의 멀티버스>](doctor-strange-multiverse.avif)\n\n> 점(Dot)을 어떻게 연결, 이동, 기록할 수 있을까?\n\n발표를 들으며 스스로 던질 수 있는 3가지 질문이 떠올랐다.\n\n1. 왜 개발자가 되고 싶나요? (연결)\n2. 왜 이동하고 싶나요? (이동)\n3. 어떻게 표현할 수 있나요? (기록)\n\n기술의 발전으로 더욱 생각을 덜 하고 쉽게 문제를 해결할 수 있도록 도움 받고 있다. 하지만 글, 발표, 코드 이하 표현하는 모든 방법에서 나만의 경험을 섞어 '사람 냄새가 나는 작품'을 만들어야 한다고 생각한다.\n제이든님의 발표에서는 울림이 느껴졌다.\n\n발표자료가 공유되면 가장 이상적이다. 하지만 발표자료 없이 블로그에 작성하신 글을 읽어도 어떤 발표를 진행하셨는지 배경을 알 수 있다. 참고 자료를 꼭 읽고 스스로 위 질문들에 답변을 작성하면 좋겠다.\n새로운 멀티버스가 기다린다.\n\n큰 기대 하지 않았지만 올해 들은 발표 중에 손꼽을 만큼 좋았다[^5]. '나만의 채용공고 만들기'라는 구체적인 방법이 인상 깊다. 더불어 제이든님께서 어떻게 도움받고 영감을 얻는지 공유해 주셔서 감사했다.\n\n**<참고 자료>**\n\n- [MARKING DOT '2024 Jul | Hello, 인프런](https://medium.com/joonsikyang/2024-jul-hello-인프런-138d5f31db98)\n- [인프랩 실Log '제이든 수습회고'](https://doc.clickup.com/d/3gfz7-5843/log/3gfz7-964996/%EC%A0%9C%EC%9D%B4%EB%93%A0%EC%9D%98-%EC%88%98%EC%8A%B5%ED%9A%8C%EA%B3%A0)\n\n### 2. 2024 이력서 안티패턴 톺아보기: 강승현\n\n![너 T야? <출처: 잔망루피>](zanmang-loopy-t.avif)\n\n> 결과에만 집중하지 않고 과정에도 집중하는 방법을 알아보자. <br>\n> 이력서 작성 스킬, 영구적으로 끌어올릴 수 있다?\n\n기존에 수강하던 강의 지식 공유자 분을 마주했다. 좋은 강의에 현장이라는 생동감이 추가됐다.\n\n발표를 들으며 워밍업 클럽에서 배웠던 추상화가 거듭 떠올랐다. 코드는 추상화를 어떻게 할지 고민하는데 이력서는 오히려 추상화를 하지 않고 직관적으로 표현하는 방식으로 작성해야 한다고 느꼈다.\n\n승현님께서 굉장히 사려 깊은 분이라고 느꼈다. 강의도 물론 훌륭하지만 발표를 마치고 자료 공유와 함께 주신 메일에서 울림이 느껴졌다.\n\n> 굉장히 사소해 보여도 이런 배려에서 지속적인 관심이 생긴다. 이력서, 커리어를 고민 중이라면 직무 상관없이 추천한다.\n\n**<참고 자료>**\n\n- [강승현 '서류합격률 4%를 탈출하는 개발자 이력서 작성법'](https://inf.run/6neUh)\n\n## 추첨 이벤트 및 자리 이동\n\n장소, 분위기 전부 색달랐다. 인프랩 (거의) 전 직원분께서 운영에 힘써주셔서 재밌게 즐겼다. 물론 한정판 굿즈에 당첨되지 않아 아쉬웠다.\n\n## 자유 네트워킹\n\n일부러 교류가 없는 테이블을 선택했다. 프로덕트 디자이너, PM, 백엔드, B2B 매니저 다양한 직군이 앉아서 그런지 재밌었다.\n전혀 다른 직군과 이야기하고 싶다는 생각을 항상 가지고 있었는데 비로소 마무리하여 기분 좋았다.\n\n전혀 다른 경험이지만 현재 나의 상황에 빗대어 볼 수 있는 경험이 많았다. 덕분에 더욱 알찼다.\n\n새로운 사람들과 교류하여 사고를 확장했다. 제이든님과 함께 테이블에 앉아 더욱 즐거웠다. (이 또한) 의도하지 않았는데 제이든님께서 어색한 분위기를 풀어주시고 가벼운 농담과 함께 경청하는 자세를 보여주셨다.\n다시 대화할 기회가 주어진다면 오랫동안 깊게 대화 나누고 싶은 분이다.\n\n> Jay Park을 언급하셔서 놀랐다. 나는 어떤 아티스트에게서 영감을 얻을까? 장범준, G-Dragon, 한로로 등이 떠올랐다. 기술도 그렇지만 평소 아티스트의 인터뷰, 앨범 소개 등을 항상 찾아보는 편이다.\n> 제이든님에게 비슷한 느낌이 들었다.\n\n## 마치며\n\n![워밍업 클럽 2024 <출처: 장태근블로그>](inflearn-warmup-club-networkingday-2024.avif)\n\n평소 어색한 상황에 직면하면 몸 둘 바를 모른다. 숨이 당장 멎을 것 같았다. 하지만 테이블에 러너, 코치님께서 분위기를 형성해 주셔서\n경험 공유, 감사함을 전달할 기회를 얻어 좋았다.\n\n노트북을 챙기지 않아 다행이다. 노트북을 사용하지 않고 메모하기와 글 작성하는 방법을 깨달았다. 빠른 체력소진에 일조하던 노트북을 챙기지 않아 더욱 날뗬다(?)\n\n> 앞으로 다른 행사에 참여할 때도 다양한 방법, 장·단점을 비교해 보자.\n\n어렸을 때 연말 시상식을 보며 마무리를 실감했듯이 이번 네트워킹 파티 덕분에 2024 공식적인 여정이 종료됐다고 느꼈다.\n\n### 그래서, 프로그램을 통해 무엇을 배웠나요?\n\n![완벽한 엔딩, 편안함에 이르렀나? <출처: 나의 아저씨>](my-mister.avif)\n\n질문이 주어진다면 답변에 오랜 시간이 필요할 정도로 배움이 깊다. 짧게 요약하면 '꾸준히 사유할 요소를 건네주는 프로그램'이다.\n지식보단 지혜를 배우기 위해 신경 쓰는 편인데, 덕분에 알차게 놀았다.\n\n내년에도 운이 좋아 참여할 수 있다면 다른 직군에도 참여해서 견문을 넓히고 싶다.\n혹여 그대로 백엔드에 참여하더라도 교류가 없던 러너와 함께 프로그램을 진행하거나 또 다른 방식으로 문제를 해결해나가지 않을까?\n\n**<참고 자료>**\n\n- [인프런 워밍업 클럽 네트워킹 데이](https://inf.run/92Mpr)\n\n[^1]: 모든 사진에 존재하는 초록 니트 빌런, 그 사람이 바로 나예요.\n[^2]: 프로그램이 다르더라도 장소가 매번 바뀌고 분위기가 달라진다는 게 신기하다. 운영진은 동일한데 어떻게 가능한 구조인지 알고 싶다.\n[^3]: 우빈님께서 배려해 주신 덕분에 네트워킹 데이 이틀 전 우수러너 혜택, 멘토링을 진행했다. 잠깐 눈뜨고 일어나니 현장에 나타나셨다.\n[^4]: 제로초(조현영)\n[^5]: 친한 형이 조언해 주듯이 맞춤 조언을 들었다. 따뜻하다.\n"},{"excerpt":"빛나는 이 세상은 날 초라하게 해\n꼭 눈부신 사람들이 나도 빛나라 해 <출처: LUCY - 빌런> 늪에 빠져 허덕였다. 연달아 찾아온 지옥에 몸 둘 바를 몰랐다. 시도하다: 낙화 학습 환경의 변화를 일궜다. 이전에는 주로 MacBook만 사용했다. 하지만 현재는 데스크톱과 MacBook을 함께 사용 중이다. 강의를 수강할 때 메모가 항상 불편했는데\n현재는…","fields":{"slug":"/retrospective-20241130/"},"frontmatter":{"date":"November 30, 2024","title":"2024 월간 장태근 11월호 '빌런'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/K25eYCAXknQ?si=dLSEUQplr5O0NxSa\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n> 빛나는 이 세상은 날 초라하게 해<br>\n> 꼭 눈부신 사람들이 나도 빛나라 해\n>\n> <출처: LUCY - 빌런>\n\n늪에 빠져 허덕였다. 연달아 찾아온 지옥에 몸 둘 바를 몰랐다.\n\n## 시도하다: 낙화\n\n학습 환경의 변화를 일궜다. 이전에는 주로 MacBook만 사용했다. 하지만 현재는 데스크톱과 MacBook을 함께 사용 중이다. 강의를 수강할 때 메모가 항상 불편했는데\n현재는 모니터가 2개여서 만족스럽다. 진작에 시도할 걸, 아쉬웠다.\n\n### 커리어 랠리\n\n덕분에 이력서 작성하는 환경에 더욱 몰입했다[^1].7일, 순식간에 지나가 아쉬웠다. 하지만 한편으론 짧은 과정 덕분에 몰입하기 쉬웠다.\n부족한 점이 무엇인지 적나라하게 드러났다.\n\n매력적인 프로그램이다. Discord와 생성형 AI를 접목해서 운영하는 방식은 혁신이다. 스터디를 직접 운영하게 된다면 적용하고 싶은 방법들이 즐비했다. 운영에 신경써주셔서 과정에 충실할 수 있었다. 특히 특강과\n글이 기억에 남는다. 동료가 커리어를 고민 중이라면 직무, 경력(신입, 재직자) 상관없이 추천한다.\n\n### 함께 자라기\n\n> 저 넓은 세상에서 큰 꿈을 펼쳐라 <br>\n> <출처: 2025학년도 대학수학능력시험 필적 확인 문구>\n\n워밍업 클럽, 커리어 랠리와 같은 주도적인 스터디 프로그램 덕분에 다양한 변화를 이뤄냈다고 거듭 느꼈다. 특히 이뤄낸 성과는 다음과 같다.\n\n- 프로그램에서 얻을 수 있는 점은 무엇인가\n- 상대방이 전달하고 싶은 메시지는 무엇인가\n\n2가지를 중점으로 꾸준히 사고하고 시도했을 때 결과가 좋았다. 더불어 강의, 책의 목차가 얼마나 중요한지 실감했다. 목차를 읽고 내용을 우선 작성하고 자료를 다시 검토했을 때\n정리하기 좋았다. 지식, 지혜를 얻는 것을 넘어 피드백을 받는 구조로 변화한 것 같아 뿌듯하다. 강력 추천한다.\n\n## 변화하다: POWER\n\n![모든 길은 실행컨텍스트를 통합니다 <출처: 리그 오브 레전드>](worlds-2023-faker.avif)\n\n스터디 덕분에 실행컨텍스트를 다시 정리할 기회를 얻었다. 직관적으로 보이지 않는 엔진 중심으로 사고하기는 말 처럼 쉽지 않았다. 아무리 생각해도 도저히 이해되지 않았다.\n분명 존재하지만 보이지 않는 물체를 세상에 드러내는 작업처럼 느껴졌다.\n\n하지만 마감기한 덕분인지, 생각의 근육 덕분인지 몰라도 이번 기회를 통해 균열이 생겼다. JavaScript 주요 개념을 제대로 이해했는지 확인하는 가장 확실한 방법이다.\n설명할 수 없다면 부족한 부분이 밝혀졌다. 모든 길은 실행컨텍스트를 통합니다.\n\n## 아쉽다: 뚫고 지나가요\n\n![욕망의 항아리 <출처: 유희왕>](yu-gi-oh.avif)\n\n오늘 당장 해야 하는 일을 최소한으로 할당하고 더 하고 싶은 부분은 내일의 내일로 미뤘다. 그런데 최소한의 일도 제때 마치지 못했다. 더욱 문제는 미루기 시작했을 때\n다음날 일정에 영향을 끼쳤다. 문제가 또 다른 문제를 만드는 연쇄 작용이다. 불안에도 빠지고 의심도 많았다.\n\n하지만 몸 상태, 상황에 따라 최소한의 기준도 바뀔 수 있는 점을 알았다. 욕심을 부려 발생한 문제라고 인지했다. 주기적으로 묻고, 방법을 조금씩 바꿔 벗어나자. 변화는 두렵지 않다.\n\n### 스터디\n\n각자의 이유로 스터디가 와해되는 모습이 고통스러웠다.\n\n'스터디를 직접 운영하면 어떨까?'\n\n운영하는 입장이 나에게 유리하지 않을까 고민했다. 안건을 제출한 이상 고민은 시작됐다. 현재 학습 방법에서 무엇을 얻을 수 있고, 잃을 수 있는지 섣부른 오판을 하지 않길 바란다.\n냉정하게 고민하고 결정하면 좋겠다.\n\n## 알쓸신잡: Glass: Études: No. 5\n\n이번달에 수학, 과학, 경제 분야를 읽을 것이라고 기대했다. 하지만 수학 분야는 읽지 않았다.\n\n> *사실 회고를 작성하다 다짐을 알았다. 수학 분야를 읽지 못해 아쉬웠다.\n\n- 함께 자라기: 워밍업 클럽, 우빈님 추천으로 다시 한번 선택했다. 읽을 때마다 새로움을 더한다. 커리어 동안 어림잡아도 10번은 더 읽지 않을까? 하고 싶은 말이 많은 책이다.\n- 오늘 또 일을 미루고 말았다: 10월에 진행된 행사에서 받은 '개발자 원칙' 공동저자 향로님께서 추천하신 책이다. 학습 환경 변화에 크게 일조했다. 시간관리 하는 방법을 고민할 때 읽기 좋다.\n- 그대들, 어떻게 살 것인가: 10월에 진행된 행사에서 질문하고 추천받은 도서다. 전혀 생각지 못한 책이어서 당황했다. 하지만 읽고 나서야 왜 이 책을 추천하셨는지 이해했다. '동양의 데미안'이라고 생각한다.\n- 자전거 여행: 커리어 랠리에 참여했을 때 '김훈씨의 문체로 이력서를 작성하면 좋겠다'라는 생각이 들었다. 전체보다 목차를 읽고 궁금한 키워드를 선택했다.\n- 테스트 주도 개발: 이전에 참여했던 워밍업 클럽에서 배웠던 내용을 적용하여 정리하기 위해 선택했다. 앞부분은 많이 읽고 나름의 이유가 생겼다고 생각하는데 끝까지 읽지는 않았다. 이번에는 끝까지 읽고\n  정리하는 것이 목표다.\n- 프로그래머의 길 멘토에게 묻다: 박성철님 추천 도서, 기존에 읽던 책 보다 조금 가벼운 책을 선택했다. 그런데 끝까지 읽지 못해 아쉽다. 다시 한번 읽고 싶은 책이다. 어떤 마음으로 커리어를 지속하면 좋을지\n  안내한다.\n\n이번달을 시작할 때부터 '커리어 시작을 빠르게 하고 싶다'라는 열망이 가득했다. 그래서 상대적으로 기술서를 덜 읽은 경향이 있다. 작성한 목록 외에 다양한 책의 도움 덕에 생각을 정리할 수 있었다.\n덕분에 여러 방을 옮기며 생각을 확장했다.\n\n하지만 하루에 여러 전략을 동시에 나눠 진행할 수 있었다. 이력서와 같은 커리어 분야는 지속적으로 관심 가지되, 12월은 다시 기술에 집중하면 좋겠다. 물론 여전히 책과 사람, 영상 등 다양한 자료의 도움을\n받을 것이다. 미리 감사인사 전한다.\n\n## 마치며: 나무는 결국 겨울을 견뎌낼 거야\n\n> 높은 하늘을 갈라 멀리 날아 온 친구는<br>\n> 내게 기대 쉬곤 다시 날개를 펴<br>\n> 언제나 그랬듯<br>\n> <출처: 성진(SUNGJIN) - 나무는 결국 겨울을 견뎌낼 거야>\n\n평소 습관이라면 지난주 발행되었어야 할 글이 지연됐다.\n\n'해내야 한다'\n\n가슴속에 아무리 외쳐도 한번 지연된 사고는 막을 수 없었다. 결국 벌점을 받았다. 어떤 작업을 해도 계속 생각나 사소한 스트레스였는데 결국에 웃으며 작성하여 다행이다.\n혹시라도 잘 만들어 놓은 습관을 애써 포기하지 않을까 걱정했다. 오히려 바로 쓰지 않고 시간을 둬 숙성되지 않았나 싶다. 덕분에 아름다운 설경을 보며 회고를 작성했다.\n\n![미래를 원한다면 증명하세요 <출처: 리그 오브 레전드>](prove-it.avif)\n\n첫눈이 내렸다. 아름다운 설경을 마주하니 기분이 좋다. 그런데 새삼 한 해가 얼마 남지 않았다는 사실이 실감됐다. 계절이 바뀌듯, 12월 올해 내 모습도 작년과 비교했을 때 변화했길 바란다.\n미래를 원한다면 증명하세요.\n\n[^1]: 물론 결과는 아쉽다. 더 잘할 수 있었을 것 같은데! 진작에 최선을 다하지.\n"},{"excerpt":"근심이 가득했다. 강의 2개를 하나의 1달 동안 다루기 때문에 부담스러웠다. 특히 다른 과정과 겹쳐 끝까지 고민했다.\n하지만 거듭 고민해도 듣고 싶은 마음이 변하지 않았다. 테스트 코드는 올해 가장 큰 고민거리였다. 더불어 지난 7월부터 염두에 두던 강의다. KPT 회고  Keep 코드를 다루는 마음가짐 기술도 배웠지만 더 큰 '친절'을 배웠다고 생각한다…","fields":{"slug":"/inflearn-warmup-club-2-241101/"},"frontmatter":{"date":"November 03, 2024","title":"인프런 워밍업 클럽 스터디 2기 후기","tags":["스터디","인프런","인프런워밍업클럽","스터디2기"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 스터디 2기 - 백엔드 클린 코드, 테스트 코드 <출처: 인프런>](inflearn-wamup-club-study-2-be.avif)\n\n근심이 가득했다. 강의 2개를 하나의 1달 동안 다루기 때문에 부담스러웠다. 특히 다른 과정[^1]과 겹쳐 끝까지 고민했다.\n하지만 거듭 고민해도 듣고 싶은 마음이 변하지 않았다.\n\n> 테스트 코드는 올해 가장 큰 고민거리였다. 더불어 지난 7월부터[^2] 염두에 두던 강의다.\n\n## KPT 회고\n\n![워밍업 클럽에서 만난 인연 <출처: 장태근블로그>](thank-you-warmup-club-study.avif)\n\n### Keep\n\n- 코드를 다루는 마음가짐\n    - 기술도 배웠지만 더 큰 '친절'을 배웠다고 생각한다.\n- 인터뷰, 질문하는 방법, 블로그 등 다양한 소프트 스킬을 배웠다.\n    - 커피챗 덕분에 수료식이 더욱 즐거웠다.\n- 부족한 점을 명확하게 파악했다.\n    - 구현 능력\n    - 객체지향 사고\n- 4주 차에 시도한 '예습 후 문제 해결하기'가 만족스럽다. 키워드로 미리 자료를 검색하고 강의를 수강할 때 복습도 되고 다른 의견도 접할 수 있어서 좋았다.\n- 우수러너에 선정됐다. 기존처럼 다양한 실험을 통해 나만의 방법을 만들어가는 여정이 긍정적으로 느껴졌다.\n- 함께 자라기의 즐거움을 다시 한번 느꼈다.\n\n### Problem\n\n- 구현 역량이 부족하다고 느꼈다.\n- 일정 관리가 원활하지 않았다. 특히 테스트 코드, 3주 차에 욕심이 가득했다. 여러 방법을 동시에 실험하려고 할 때 이도 저도 안 됐다.\n- 커뮤니케이션이 원활하지 않았다.\n\n### Try\n\n- 이번 과정을 통해 배운 내용을 연습하고 다듬어서 체화시키고 싶다. 같은 주제로 이야기를 다시 나눈다면 더 많은 이야기를 나누고 싶다.\n- 작은 단위로 쪼개기가 중요하다고 느꼈다. 욕심은 불안이 되고 건강도 파괴시킨다.\n- 다음 과정을 도전한다면 백엔드 외에 다른 과정도 검토하고 싶다.\n\n## 마치며\n\n![warmup <출처: 네이버 사전 (NAVER dicionary)>](warmup.avif)\n\n워밍업 클럽 덕분에 하반기 재밌게 놀았다. **용기 내서 도전하지 않았다면 그대로 머물러 있지 않았을까?**\n\n우빈님, 셰리님, 워밍업 클럽 수료식까지 힘써주신 커뮤니티팀께 감사인사 드리고 싶다. 매일 올라오는 공지사항, 격려 메시지가 없었다면\n이번 과정도 쉽지 않았을 것 같다.\n\n과정은 끝났다. 하지만 여정은 이제 진짜 시작이다. 주어진 열쇠로 다양한 문을 열고 일신우일신 하길 바란다.\n이어지는 여정동안 강의에 우빈님을 몇 번 뵐 지 모르겠다. 앞으로가 기대된다. 수고했다.\n\n**<참고 자료>**\n\n- [박우빈 '클린 코드 & 테스트 코드 가이드 로드맵'](https://www.inflearn.com/roadmaps/5699)\n- [인프런 워밍업 클럽 스터디 1기 후기](https://devmeeple.github.io/inflearn-warmup-club-1-240531/)\n- [2024 월간 장태근 7월호 '시퍼런 봄'](https://devmeeple.github.io/retrospective-20240728/)\n\n[^1]: [우아한테크코스](https://www.woowacourse.io/)\n[^2]: 돈다발을 주었을 때 우빈님 강의를 구매하고 싶다는 생각이 스쳐 지나갔다. 더불어 7월부터 수강평을 읽고 주시했다.\n"},{"excerpt":"\"간질간질하게 피어나는 다가오는 이 순간의 하얀 Highlight\" 악에 물들다 겨우 깨어났다. 지옥에서 살아돌아온 생생후기를 공유한다. 오늘, 또 일을 미루고 말았다  부검이 필요하다. 삶이 마치 콜백 함수 지옥 같았다. 미루고 미루고 또 미뤘다. 악행을 서슴치 않게 반복했다.\n특히 3주차는 지옥이었다. 문제는 왜 발생했을까? 원인: 범인은 무엇인가? …","fields":{"slug":"/retrospective-20241027/"},"frontmatter":{"date":"October 27, 2024","title":"2024 월간 장태근 10월호 'Highlight'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/FfB_gH3P4_E?si=6KFHq8-XeeZbR0ul\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n**\"간질간질하게 피어나는 다가오는 이 순간의 하얀 Highlight\"**\n\n악에 물들다 겨우 깨어났다. 지옥에서 살아돌아온 생생후기를 공유한다.\n\n## 오늘, 또 일을 미루고 말았다\n\n![Callback Hell in JavaScript <출처: LinkedIn>](callback-hell-in-javascript.avif)\n\n부검이 필요하다. 삶이 마치 콜백 함수 지옥 같았다. 미루고 미루고 또 미뤘다. 악행을 서슴치 않게 반복했다.\n특히 3주차는 지옥이었다. 문제는 왜 발생했을까?\n\n### 원인: 범인은 무엇인가?\n\n평소 발견한 원인은 늦잠이다. 그리고 늦잠은 '해결하지 못한 일을 처리하다 늦게 잠들어서' 발생했다. 하루가 짧고 패턴이 꼬이니 붕괴되기 일쑤였다. 하지만\n이번에 추측한 원인은 귀찮음이다. '오늘 하지 않아도 내일 하면 되니깐'이라는 안일한 생각을 했다. 오랜만에 싫어하는 행동만 골라 했다.\n\n'잠'이란 어제와 오늘을 연결시켜주는 매개체, 잘못된 생각을 비워주는 중요한 역할을 맡았다. 그런데 일찍 일어나도\n쌓여있는 알람에 기분이 몹시 나빴다.\n\n마치 에러 처리와 비슷하다. 무조건 해결해야 하는 문제, 해결할 문제였다. 그런데 알면서도 계속 미뤘다. 결국 '나'라는 소프트웨어, 프레임워크가 파괴됐다.\n\n### 해결: 예술\n\n문제를 해결하는 방법은 아주 간단했다. 예술의 도움을 받았다. 특히 음악, 책의 도움이 컸다.\n'터치드'[^1]의 음악을 듣고 '오늘, 또 일을 미루고 말았다'[^2]를 읽었을 뿐이다.\n작품에서 전달하는 메시지들에서 위로를 받고 다시 시스템을 가동했다.\n\n> 다음에도 비슷한 상황이 발생하면 삶을 연결하는 '매개체'로 활용해야겠다.\n\n## 금쪽이의 놀라운 변화!\n\n문제가 발생할 때마다 일단 해결하고, 다음을 함께 고민한다. 감당해야 할 업보인가? 개선 가능한 부분인가? 성격에서 발생하는 스트레스를 오히려 기회로 삼는다.\n이번에도 일을 미룬 덕분에 오히려 다양한 변화를 이뤘다.\n\n### 공부법\n\n'나만의 공부법'은 압도적인 실험 순위 1등이다. 다양한 환경[^3]에서 영감을 얻어, 매일 실험하고 회고를 남겨둔다.\n그런데 이번에 유의미한 결과를 얻었다.\n\n![2배 계왕권 <출처: 나무위키>](kaio-ken.avif)\n\n앞서 언급한 책에서 영향을 가장 크게 받았다. '계왕권'이 없었다면 이번 워밍업 클럽은 완주하지 못했을 것 같다.\n몹시 짧은 책인데 간결한 문체가 생산성 도움에 가장 크게 기여했다. 꼭 읽고 나누고 싶은 책이다.\n\n> 물론 계왕권을 너무 자주, 잘못 사용하면 단명의 지름길 일 수 있다. 적절하게 사용하자. 더불어 업무가 아닌 일상에서도 어떻게 계왕권을 사용할지 고민 중이다.\n> *잡다한 생각을 버리고 현재에 집중하기 위해 내린 결정이다.\n\n### 글쓰기\n\n**\"블로그 중요하다\"**는 이야기는 강산이 바뀌어도 유효하다. 심지어 아직도 누가 어디서, 어떻게 말씀하셨는지 기억할 정도다.\n그런데 울림이 없었다. 결국 전달하고 싶은 메시지는 **'취업에 유리하다'**라고 생각한다. 그럼에도 너무 추상적이고 공감하는 데는 한계가 있었다.\n\n글쓰기 이전에 다음과 같이 생각했다.\n\n> '그래서 왜 필요할까?' 글을 쓰지 않은 세계관, 멀티버스도 있지 않을까? '글' 너는 대체 뭐야?\n\n이런 질문이 가장 중요하다고 생각한다. 테스트 코드랑 비슷하다.\n\"취업할 때 필요하다, 유용하다, 생산성이 올라간다, 안정적인 소프트웨어 개발을 위해 필요하다\" 다양한 이유를 찾을 수 있다.\n그런데 직접 해보지 않으면 알 수 없는 **'머리는 이해해도 가슴은 이해할 수 없는 영역'**이 있다고 생각한다.\n\n나름 정리한 **'글쓰기의 중요성'**에 대해 정리하자면 다음과 같다.\n\n- '사실과 오해'를 정리하는데 특화됐다.\n- 필연적으로 '읽어야 하는 운명'이다.\n\n핵심으로 느낀 점은 2가지다.[^4]\n\n변화를 설명하기까지 서론이 길었다. 평소 개념을 배우면 현재 상황과 연결을 시도한다. 평소 동경하던 지식 공유자 이전에\n블로거 [박우빈](https://www.inflearn.com/users/149026/@wbluke) 님께[^5] 질문을 자주 드렸다.\n특히 이미지 편집, 작성 노하우를 얻었다. 질문을 하다 보니 사고가 확장됐다.\n\n테스트 코드를 작성할 때 BDD 패턴을 적용해서 `given`, `when` , `then`절을 사용한다.\n**'코딩도 글쓰기다'**를 강력하게 주장한다. 새로운 간단한 글에서부터 방법을 적용해 봤다. 꽤 일리 있는 실험이었고, 실제 생산성에 큰 영향을 받았다.\n물론, 실험 결과가 부족하다. 앞으로 작성하는 글에 조금 더 녹여내면 좋겠다. 될 때까지 실험한다!\n\n## 알쓸신잡\n\n- 생산성 도구로 [TickTick](https://www.ticktick.com/)[^6]을 항상 사용한다. 그런데 직접 쓰는 다이어리도 있으면 좋겠다고 느꼈다.\n- 다음 달에는 어떤 분야의 책을 읽을지 고민 중이다. 매달 분야를 정하고 읽어야 다양한 분야를 읽을 것 같다. 그리고 다음 달이 기대되는 이유도 되지 않을까? 현재는 수학, 과학, 경제에서 고민 중이다. *물론\n  기술은 계속 함께한다.\n- 글쓰기, 블로그는 운명, 필연이 아니었을까? 예정된 수순, 시간문제였다.\n\n### 가장 인상깊었던 영상\n\n['전과자 ep.70 포함공대 컴퓨터공학과'](https://youtu.be/-k_Q9Svr7j4?si=Xb8UK1P9VCKOViFu) 영상을 너무 재밌게 봤다.\n컴퓨터 공학과는 동경과 이상이 공존하는 의문의 공간이다. 그런데 열정이 느껴졌다.[^7] 객체지향프로그래밍과 소프트웨어, 기술을 바라보는 일반인의 시선을\n가감 없이 볼 수 있어서 좋았다.\n\n### 내가 없는 시대에 태어났을 뿐인 범부여\n\n![안녕? 2023년 10월 31일 작성한 범부여 <출처: 장태근블로그>](past-self.avif)\n\n평행이론이 아닐까 싶을 정도로 내용도 비슷해서 재밌다. 작년도 올해도 포기하지 않고 나름의 방법을 찾아낸 나에게 박수를 보낸다.\n\n당시에 이런 짧은 글을 작성하기 위해 지금과 비슷한 시간을 사용했다. 그런데 현재 더 깊은 대화를 공유할 수 있는 것 같아 뿌듯하다. 글쓰기도 성장했다!\n\n## 마치며\n\n> 미룬 덕분에 아직 세상에 나오지 못한 슬픈 후기 시리즈 '유연함의 힘' '오늘, 또 일을 미루고 말았다', '데브코스' 애도합니다. 유감입니다. 꼭 남깁시다!\n\n작성 전 이번 회고는 우울한 분위기를 예상했다. 그래서 어떻게 진솔하게 담을지 고민했다. 그런데 다시 일어난 시간이 너무 유쾌하게 흘러갔다.\n덕분에 기대보다 밝은 분위기가 연출됐다. 이전 작성한 글을 자주 읽고 퇴고하는 편인데, 글쓰기 실력이 많이 는 것 같다.\n\n> 이전에 생각한 음악은 ['Divenire'](https://youtu.be/X1DRDcGlSsE?si=qzH1CVMmLiCH7EqR)였다. 삶이 무료하거나, 의문이 많다면 특히 더 추천한다.\n\n어느새 월간 장태근도 2번 남았다. 이제 '2024 장태근 행보'를 고민한다. 올해 가장 인상적이었던 강의, 도구 등 리소스를 정리하면 좋을 것 같다.\n*TOP 100 차트에서 영감받았다. 작년보다 더 깊고 많은 이야기를 풀 수 있으면 좋겠다.\n\n11월은 미리 예정된 일정이 있다. '행보 2024 장태근' 시리즈를 미루지 않고 끝내면 좋겠다. 시간 관리 잘하자!\n\n[^1]: 작년에는 재즈와 클래식을 즐겨 들었다. 올해는 밴드 위주로 듣는다. DAY6, 쏜애플, 터치드를 가장 좋아한다.\n[^2]: [『오늘, 또 일을 미루고 말았다』(나카지마 사토시, 북클라우드, 2017)](https://product.kyobobook.co.kr/detail/S000001767334)\n[^3]: 상상이상이다. 공부법 영상이 아닌 음악, 산책 등 계기가 정말 다양하다.\n[^4]: 물론 이외에도 몹시 많다. 글쓰기를 주제로 여러 글이 가능하다. 도메인 지식을 많이 발견했다.\n[^5]: 감사합니다. 워밍업 클럽. 자세한 이야기는 '워밍업 클럽 후기'에서 계속...\n[^6]: 강력하게 추천한다. 생산성 향상에 크게 기여한다.\n[^7]: 특히 'Bomb Lab 풀이'가 가장 흥미로웠다.\n"},{"excerpt":"무르익은 단풍 따라 워밍업 클럽 일정도 수료식만 남겨뒀다. 사실상 끝났다. 의존 없는 스스로 완벽하게 제어 가능한 시간이다.\n여러 실험 중 '성빈클럽'에 참여했다. 조금 다른 건 러너가 아닌 서포터로 참여한다. 다시 질문을 던진다. 그대들 어떻게 살 것인가 내가그린 성빈클럽 왜 성빈클럽인가요?  워밍업 클럽에서 느낀 점이 같았다. 스터디에 참여할 때 항상…","fields":{"slug":"/make-declaration-of-intent-for-sungbin-club/"},"frontmatter":{"date":"October 26, 2024","title":"성빈클럽 출사표","tags":["스터디","성빈클럽","출사표"]},"rawMarkdownBody":"\n![함께 자라기, 성빈클럽에서 <출처: 장태근블로그>](growing-up-together-in-sungbin-club.avif)\n\n무르익은 단풍 따라 워밍업 클럽 일정도 수료식만 남겨뒀다. 사실상 끝났다. 의존 없는 스스로 완벽하게 제어 가능한 시간이다.\n여러 실험 중 '성빈클럽'에 참여했다. 조금 다른 건 러너가 아닌 서포터로 참여한다. 다시 질문을 던진다.\n\n> 그대들 어떻게 살 것인가\n\n## 내가그린 성빈클럽\n\n### 왜 성빈클럽인가요?\n\n![일심동체 <출처: KBO '삼성 라이온즈 박진만-이병규'>](joined-at-the-hip.avif)\n\n워밍업 클럽에서 느낀 점이 같았다. 스터디에 참여할 때 항상 함께 자라기를 기대했다.\n러너의 모습도 자주 관찰했을 때 성빈 님께 느끼는 점이 가장 많았다. 공유하는 컨텍스트는 일부 다르지만 함께 자라기를 경험하기 가장 좋은 기회라고 생각했다.\n\n### 그래서 왜 운영진인가요?\n\n스터디 운영을 할 때 무엇이 중요하고, 어떻게 '함께 자라기'를 실천할 수 있을지 궁금하다. 운영할 때만 느낄 수 있는 부분을 체감할 수 있도록\n주위를 살필 것이다. 가감 없이 느낀 점을 정리하고 **앞으로의 여정에 도움 되면 좋겠다. 중요한 것은 '함께'다.**\n\n### 무엇을 신경 쓸 것인가요?\n\n- 미션 확인과 질문 & 답변, 네트워킹에 도움드릴 생각이다. **물론 부족한 점이 많지만 오히려 기회라고 생각한다. 이것이 진정한 함께 아닐까?**\n- Java의 Project Lombok과 비슷한 역할이라고 생각한다. 필수인 듯 필수 같지 않은 라이브러리, 그런 역할을 기대한다.[^1]\n- 출사표에도 남겼지만 진짜 학습이란 정의하는 바가 다르다고 생각한다. 하지만 각자의 기준은 있어야 한다고 생각한다. '진짜'가 무엇인지 다시 정리할 생각이다.\n- 다른 사람에게 많이 배우고 주로 에너지를 받았다. 그런데 이번에는 나누기에 조금 더 집중하고 싶다. 받은 관심과 사랑을 포장해서 돌려주는 선순환 구조를 꿈꾼다.\n- 모두 중요한 이야기 지만 가장 중요한 것은 건강이다. 과호흡으로 무리하지 않고 일정한 호흡을 유지, 관리할 것이다.\n    - 시간을 특히 어떻게 적절하게 분배할지 고민 중이다. 성빈 클럽에 집중하는 시간을 따로 분리하는 것도 고려 중이다.\n\n## 부록: 질문\n\n**질문 잘하는 법은 모두에게 중요한 주제다.** 개발자만 해당된다고 생각하지 않는다. 더불어 질문은 '관심'의 영역이라고 생각한다.\n나는 질문을 잘 못한다. 그래서 더 많이 관심을 둔다. 계속 연습하고 피드백 받는 구조가 중요하다고 생각한다.\n\n### 어떻게 질문을 잘할 수 있을까?\n\n조심스럽다. 하지만 나만의 기준이 있다. 비용을 항상 따진다. 가장 중요하다고 생각하는 비용은 '시간'이다.\n\n이전에 질문할 때 \"질문 많이 하세요\" 한 마디에 궁금한 부분 모두 물어본 적도 있다. 그런데 비용이 너무 컸다. 똑같은 질문을 거듭하는 모습을 돌아볼 수 있었다.\n상대방과 나의 시간은 같이 흘러간다. 서로의 자원을 어떻게 아낄 지 꾸준히 고민하는 수밖에 없다. '함께 풀어가야 하는 문제'에서 거듭 혼자 하는 것도 좋은 방법은 아니라고 생각한다.\n시간을 중심으로 '어떻게'를 고민하자.\n\n### 질문이 밥 먹여 주나요\n\n![체급의 왕, 쵸비 <출처: 젠지 이스포츠 Gen.G Esports>](chovy-weight-class.avif)\n\n업무 메일도 오래전에 작성했고, 면접 준비에 집중한 적 없지만 질문은 관심에서부터 시작되기 때문에 밥 먹여준다고 생각한다. AI와 대화할 때도 사람과 대화한다고 생각하고\n질문하는 습관을 들여도 좋다고 생각한다. 기술을 통해 '체급'을 올리자.\n\n## 마치며\n\n![저는 비빔인간입니다. <출처: 흑백요리사: 요리 계급 전쟁>](bibim.avif)\n\n포부를 남겼다. 위기에 빠질 때마다 상기시키길 바란다. 빠르게 집중해서 끝나는 스터디, 무엇을 배울지 벌써 기대된다.\n또 다른 세계관이 열리고 비벼지길 바란다.\n\n[^1]: 스포츠의 감독과 수석코치 관계와 비슷하다고 생각한다.\n"},{"excerpt":"*인프런 워밍업 클럽 2기, 18일차 미션을 '나만의 언어'로 정리한 글이다. 1. @Mock, @MockBean, @Spy, @SpyBean, @InjectMocks 차이는 무엇일까? 1.1 @Mock vs. @MockBean 은 Mockito에서 제공한다. 반면 은 Spring에서 제공한다. 1.2 @Spy vs. @SpyBean 는 Mockito에서…","fields":{"slug":"/inflearn-warmup-club-study-2-day-18-mission/"},"frontmatter":{"date":"October 25, 2024","title":"Mock을 마주합니다. 그런데 Test Fixture를 곁들인","tags":["스터디","인프런","인프런워밍업클럽","스터디2기"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 스터디 2기 - 백엔드 클린 코드, 테스트 코드 <출처: 인프런>](../images/inflearn-warmup-club-study-2.png)\n\n> *인프런 워밍업 클럽 2기, 18일차 미션을 '나만의 언어'로 정리한 글이다.\n\n## 1. @Mock, @MockBean, @Spy, @SpyBean, @InjectMocks 차이는 무엇일까?\n\n### 1.1 @Mock vs. @MockBean\n\n`@Mock`은 Mockito에서 제공한다. 반면 `@MockBean`은 Spring에서 제공한다.\n\n### 1.2 @Spy vs. @SpyBean\n\n`@Spy`는 Mockito에서 제공한다. 반면 `@SpyBean`은 Spring에서 제공한다.\n\n### 1.3 @InjectMocks\n\n테스트 대상 객체(SUT, System Under Test)에 `@Mock`이 사용된 모의 객체 의존성을 편리하게 주입하기 위해 사용한다.\n단위 테스트에 적합하고, 통합 테스트를 작성할 때는 `@Autowired`를 주로 사용한다.\n\n### 1.4 결론\n\n![의도된 바가 전해져야 돼요 <출처: 흑백요리사: 요리 계급 전쟁>](culinary-class-wars-intention.avif)\n\n**테스트 코드를 작성할 때 '의도'를 전달할 수 있어야 한다.** 순수 단위 테스트가 필요하다면 `@Mock`, `@Spy`를 요구사항에 맞춰 사용한다.\n반면 `Spring Context`가 필요한 통합 테스트라면 `@Bean 시리즈`를 사용해야 한다.\n\n## 2. Test Fixture 구성하기\n\n> *목표: `@BeforeEach`, `given`, `when`절에 어떻게 배치하면 좋을까?\n>\n> 요구사항\n> - 게시판 게시물에 달리는 댓글을 담당하는 Service Test\n> - 댓글을 달기 위해서는 게시물과 사용자가 필요하다.\n> - 게시물을 올리기 위해서는 사용자가 필요하다.\n\n시나리오는 위와 같다. 어떻게 구성하면 좋을까? 생각해 보자.\n\n### 2.1 사용자가 댓글을 작성할 수 있다\n\n- `setUp`\n    - 사용자 생성에 필요한 내용 준비\n    - 사용자 생성\n- `given`\n    - 게시물 생성에 필요한 내용 준비\n    - 게시물 생성\n    - 댓글 생성에 필요한 내용 준비\n- `when`\n    - 댓글 생성\n\n### 2.2 사용자가 댓글을 수정할 수 있다\n\n- `setUp`\n    - 2.1과 동일하다.\n- `given`\n    - 2.1와 동일하다.\n    - 댓글 생성\n- `when`\n    - 댓글 수정\n\n### 2.3 자신이 작성한 댓글이 아니면 수정할 수 없다\n\n- `setUp`\n    - 2.1과 동일하다.\n- `given`\n    - 2.1와 동일하다.\n    - 사용자 2 생성\n    - 사용자 1의 댓글 생성\n- `when`\n    - 사용자 2가 사용자 1의 댓글 수정 시도\n\n### 2.4 결론, 톺아보기\n\n검증하고 싶은 부분은 '댓글'이다. 사용자와 게시글 모두 필요하다. 하지만 조금 더 중요한 부분은 '댓글'이라고 생각한다.\n따라서 사용자를 생성하는 내용은 모두 `setUp`에 작성한다. 반면 댓글은 테스트 코드는 문서기 때문에 문맥을 이해할 때 필요하다.\n따라서 `given`에 작성한다. `when`에는 검증하고 싶은 기능을 담는다.\n\n> 테스트 코드는 `DRY`보다는 `DAMP` 하게 작성하자\n\n## 마치며\n\n![믿기 힘든 반전의 결과 속출 <출처: Show Me The Money 6>](show-me-the-money-6-fail.avif)\n\n마지막 미션인 만큼 의심을 한 번 더 했다. 특히 2번 문제, 'Test Fixture 구성하기'를 의심했다. '우빈 님께서 `setUp` 메서드에도\n물음표를 사용하셨지만 함정이 아닐까?' 돌다리를 두드려 봤다. 하지만 거듭 생각해도 생각이 바뀌지 않았다.\n\n마침내 미션, 과정 전부 끝났다. 배움이 많았다. 자세한 이야기는 '인프런 워밍업 클럽 2기 후기'로 알아보자.\n\n### 피드백: 부검\n\n![완벽히 이해했어 <출처: 팝 팀 에픽>](pop-team-epic-understood.avif)\n\n10월 25일 진행된 특강에서 문제 공통 피드백을 받았다. 우빈 님의 출제의도는 무엇이었을까?\n\n> 사용자, 게시물은 댓글을 검증할 때 필요하다. 하지만 `given`절에 포함할 만큼 중요하지 않다.\n> 핵심은 중복 제거가 아니다. '도메인'에 집중해야 한다. 따라서 사용자, 게시물은 `setUp()` 메서드에 작성한다.\n> 반면, 댓글은 직접적이기 때문에 `given`절에 포함한다.\n>\n> <br>2.3의 경우 조금 다르다. 사용자 생성 2는 의도 전달을 위해 `given`절에 포함한다. 그 외에는 동일하다.\n\n'댓글'에 집중해야 한다는 점을 공통적으로 생각하고 동의한다. 하지만 '무엇이 간접적으로 필요할까?'에 의견 차이가 있었다.\n그런데 사실 계속했던 고민이라 이해됐다. 덕분에 다른 Test Fixture를 구성할 때도 어떤 부분에 집중하면 좋을지 한 번 더 생각하는\n계기가 됐다.\n\n**<참고 자료>**\n\n- [박우빈 'Practical Testing: 실용적인 테스트 가이드'](https://inf.run/yoBRZ)\n- [Baeldung 'Mockito.mock() vs @Mock vs @MockBean'](https://www.baeldung.com/java-spring-mockito-mock-mockbean)\n- [Baeldung 'Difference Between @Spy and @SpyBean'](https://www.baeldung.com/spring-spy-vs-spybean)\n- [Baeldung 'Using @Autowired and @InjectMocks in Spring Boot Tests'](https://www.baeldung.com/spring-test-autowired-injectmocks)\n"},{"excerpt":"10월 23일, 약 300명의 경쟁률을 뚫고(?) 퇴근길 밋업에 다녀왔다. 밋업은 발표 세션과 질의 응답, 네트워킹 순서로 진행됐다. *인프런 편집 자료 시청을 권장한다. 말씀하신 내용에 근거하여 최대한 명료하게 작성했다. 하지만 사견이 포함됐다. 발표 세션 : 웹의 시작 (HTTP의 탄생과 기초를 쉽게 이해하는 시간) 발표에 강의 내용 맛보기를 제공해 …","fields":{"slug":"/pangyo-evening-meet-up-http-241023/"},"frontmatter":{"date":"October 24, 2024","title":"판교 퇴근길 밋업 with 인프런 #08 HTTP 후기","tags":["행사","판교퇴근길밋업","인프런","HTTP밋업"]},"rawMarkdownBody":"\n![판교 퇴근길 밋업 with 인프런 #08 HTTP <출처: 인프런>](pangyo-evening-meet-up-http.avif)\n\n10월 23일, 약 300명의 경쟁률을 뚫고(?) [퇴근길 밋업](https://inf.run/R44jf)에 다녀왔다. 밋업은 발표 세션과 질의 응답, 네트워킹 순서로 진행됐다.\n\n> *인프런 편집 자료 시청을 권장한다.\n>\n> 말씀하신 내용에 근거하여 최대한 명료하게 작성했다. 하지만 사견이 포함됐다.\n\n## 발표 세션 : 웹의 시작 (HTTP의 탄생과 기초를 쉽게 이해하는 시간)\n\n발표에 강의 내용 맛보기를 제공해 주셨다. 특별한 점은, 실습과 함께 요청, 응답 흐름을 이야기해 주셨다.\nHTTP 0.9를 기준으로 간단한 코드를 제공해서 출력 결과를 예상할 수 있었다. 하지만 다양한 직군이 참여하는 발표였던 만큼, 생동감을 위하여\n준비된 코드를 실행하고 출력 결과를 함께 보여주셨다면 더 좋은 발표가 됐을 것 같다.\n\n### TMI\n\n- 11월, 인프런에 '김정환 님에 HTTP 강의'가 공개된다.\n- 발표 스타일이 '오픈튜토리얼스 생활코딩 이고잉'님과 비슷하다고 느꼈다.\n\n## 질의 응답\n\n> 네트워킹이 현업에서 도움 되었던 순간이 있나요?\n\n네트워킹에 흠뻑 빠졌던 시기가 있다. 다른 사람과 대화를 나누며, 생각했던 부분을 정리하고 몰랐던 부분도 알게 됐다.\n사고를 확장하는 면에서 유용하다고 생각한다.\n\n> 개발할 때 HTTP 지식을 얼마나 많이 알아야 할까요?\n\n프론트 엔드 기준, 없어도 할 수 있다.\n하지만 MSA 도입으로 [CORS(Cross-Origin Resource Sharing)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) 문제를 해결할 때\n당황스럽고, 찝찝함을 느꼈다. 서버는 응답 형식에 따라 다르게 동작[^1]하기 때문에 특히 더 중요하다고 생각한다.\n\n결국, 서버와 클라이언트의 간극을 HTTP가 연결시켜주는 부분이 있어 알면 좋다고 생각한다. 다다익선이다.\n\n> 강의에서는 HTTP 어떤 부분을 다루나요?\n\nHTTP 1.1을 주로 다루고, 2까지 다룬다. 점진적으로 코드와 함께 개선한다.\n\n> 현업에서 HTTP 새로운 버전을 주로 사용하지 않는 이유가 무엇일까요?\n\n은연중에 자주 사용한다. 그런데 최근 [aws 'Amazon CloudFront'](https://aws.amazon.com/ko/cloudfront/)을 사용할 때 HTTP3를 꺼달라는 요청을 받았다.\n안정화가 덜 된 부분이 있다고 생각한다. 더불어 HTTP 1.1이 핵심이라고 생각하고 이후에 나온 2,3는 성능 개선이 많다.\n\n> 백엔드, 프론트 엔드 등 다른 직무와 협업할 때 어떤 방법으로 지식의 간극을 줄이면 좋을까요?\n\n우선, 기술에 대해 최대한 설명드린다. 부족한 부분은 도메인 지식, HTTP 등 공통으로 다루는 부분으로 풀어가는 편이다.\n\n## 네트워킹\n\n배정받은 네트워킹 조는 주로 백엔드 개발자로 구성됐다. 특히, 다른 행사와 다르게 취업준비생이 많았다. 재직자분들의 기술적인 고민[^2]도\n있었지만, 주로 취업준비생의 이야기를 듣고 조언해 주셨다. 더불어 구면이신 분도 있고, [글또](https://geultto.github.io/) 운영진도 계셔서 더욱 재밌었다.\n시간 가는 줄 모르고 놀다 끝나서 아쉬웠다!\n\n### 질문 & 답변\n\n- 제작 중인 강의 내용\n- 취업준비생, 그대들은 어떻게 살 것인가\n\n## 마치며\n\n발표를 처음 들었을 때, 생각했던 방향성과 달라 당혹감을 감추지 못했다. 하지만 정환 님의 강의 의도를 듣고 이해했다.\n\n네트워킹 시간에 소감을 들었다. '쉬웠다, 심화 내용이 없어서 아쉽다'라는 이야기와 '어려웠다'라는 내용이 공존했다.\n그렇다면 '나는 어땠을까?' 앞서 이야기했던 당혹감을 조금 더 풀어보면, HTTP를 코드와 함께 기초부터 풀어가는 방식[^3]을 전혀 생각하지 못했다.\n생각했던 부분보다 간단한 이야기를 전달해 주셔서 당황했다. 그런데 간단한 코드가 끝나고 풀어내신 이야기가 생각하지 못했던, 잘 모르던 개념[^4]이 있었다.\n정리하면, 당황스러웠지만 결국 사고를 확장해서 괜찮았다.\n\n### 그런데 그것이 실제로 일어났습니다\n\n![그런데 그것이 실제로 일어났습니다 <출처: 이말년씨리즈>](lee-mal-nyeon-series.avif)\n\n참가 과정부터 재밌었다. 가고 싶은 행사였는데 떨어졌다. '판교에 가지 않고 워밍업 클럽에 집중할 수 있네, 오히려 좋다' 생각했다.\n그런데 기적처럼 살아났다. 갑자기 휴대폰 진동이 울리고, 메일을 받았다.\n\n![Inflearn Lounge (인프런 라운지)](inflearn-lounge.avif)\n\n이전에 진행한 깜짝 이벤트도 당첨됐었는데, 추가 뉴스레터도 받아 신기했다.\n추가 뉴스레터에는 추천 강의와 다양한 혜택이 있었다. 하지만 신청까지 이어지지 않았다. 그런데 마침, 이번 달 혜택이 밋업이었다. 바로 신청했고 결국 당첨 안내를 받았다.\n만약 신청에서 당첨됐다면 이번 혜택도 신청하지 않았을 텐데 운이 좋았다.[^5]\n\n밋업에서도 인사 나눌 시간이 있었는데, 부끄러움을 많이 타서 인사드리지 못했다. 늦었지만 인프런 CX팀(태리, 타미) 측에서 안내해 주신 정보가 유익했다는 점, 감사 인사 꼭 드리고 싶다.\n~~(다음에도 잘 부탁드립니다)~~\n\n> 이 외에도 하고 싶은 이야기가 너무 많다. 자세한 이야기는 '월간 장태근 10월호'에서 계속된다.\n\n**<참고 자료>**\n\n- [김정환 블로그](https://jeonghwan-kim.github.io/)\n- [인프런 '웹의 시작 - HTTP의 탄생과 기초를 쉽게 이해하는 시간'](https://inf.run/qjkon)\n\n[^1]: 리다이렉션(Redirection), 캐시(Cache)\n[^2]: React 상태 관리 방법과 라이브러리\n[^3]: Node.js를 사용해서 간단한 서버를 만든다. 기존에 생각했던 방식은 코드 없이, 개념에 대해 이야기하는 방식이다.\n[^4]: httpd, Keep-Alive\n[^5]: 한편으로는 행동 패턴을 분석당한 기분이었다.\n"},{"excerpt":"*인프런 워밍업 클럽 2기, 18일차 미션을 '나만의 언어'로 정리한 글이다. 1. Presentation Layer '화면에 정보 표현하기'가 주관심사다. 외부 세계와 상호작용하는 영역이다.\n비즈니스 로직에 관심 두지 않는다. , 가 해당된다. 2. Business Layer 트랜잭션, 도메인 간 순서를 보장한다. 화면을 어떻게 출력할지, 데이터를 어떻…","fields":{"slug":"/inflearn-warmup-club-study-2-day-15-mission/"},"frontmatter":{"date":"October 22, 2024","title":"계층화 아키텍처(Layered Architecture)","tags":["스터디","인프런","인프런워밍업클럽","스터디2기"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 스터디 2기 - 백엔드 클린 코드, 테스트 코드 <출처: 인프런>](../images/inflearn-warmup-club-study-2.png)\n\n> *인프런 워밍업 클럽 2기, 18일차 미션을 '나만의 언어'로 정리한 글이다.\n\n## 1. Presentation Layer\n\n**'화면에 정보 표현하기'가 주관심사다.** 외부 세계와 상호작용하는 영역이다.\n비즈니스 로직에 관심 두지 않는다. `View`, `Controller`가 해당된다.\n\n## 2. Business Layer\n\n**트랜잭션, 도메인 간 순서를 보장한다.** 화면을 어떻게 출력할지, 데이터를 어떻게 가져오는지에 대해 관심 가지지 않는다.\nPersistence Layer에서 데이터를 가져와 로직을 수행하고 결과를 Presentation Layer에 전달한다.\n\n- `@Transaction`을 사용한다.\n\n### 3. Domain Layer\n\n**비즈니스 로직을 처리한다.**\n\n## 4. Persistence Layer\n\n**데이터 저장소에 접근한다.** `Repository`, `DAO`가 해당된다.\n\n## 테스트는 어떻게 작성해야 할까?\n\n- 테스트를 작성할 때 'ORM에서 기본적으로 제공하는 메서드'는 테스트를 작성하지 않는다.\n- 의존성 주입을 사용한다.\n- Mocking을 통해 단위 테스트를 작성한다.\n- 통합 테스트를 작성한다.\n"},{"excerpt":"9월 28일, PuddingCamp '학습과 성장 컨퍼런스 2024'에 다녀왔다.\n프로그램은 사전 공개 세션과 당일 공개 세션으로 진행됐다. 1. 도움을 주고 받으면서 배우고 성장하기 - 김태희·탐정토끼 '코칭의 삶'으로 어떻게 풍요롭게 변화했는지 들었다. 스터디 활용 방법과 위기를 기회로 바꿨던 경험을 공유해 주셔서 기억에 남았다.\n탐정토끼님의 이야기를…","fields":{"slug":"/conference-puddingcamp-20240928/"},"frontmatter":{"date":"October 11, 2024","title":"학습과 성장 컨퍼런스 2024 후기","tags":["행사"]},"rawMarkdownBody":"\n![학습과 성장 컨퍼런스 2024 <출처: PuddingCamp>](conference-puddingcamp.jpeg)\n\n9월 28일, PuddingCamp '학습과 성장 컨퍼런스 2024'에 다녀왔다.\n프로그램은 사전 공개 세션과 당일 공개 세션으로 진행됐다.\n\n## 1. 도움을 주고 받으면서 배우고 성장하기 - 김태희·탐정토끼\n\n'코칭의 삶'으로 어떻게 풍요롭게 변화했는지 들었다. 스터디 활용 방법과 위기를 기회로 바꿨던 경험을 공유해 주셔서 기억에 남았다.\n탐정토끼님의 이야기를 들으니 시 한 편이 떠올랐다.\n\n> 흔들리며 피는 꽃\n>\n> <br>흔들리지 않고 피는 꽃이 어디 있으랴<br>\n> 이 세상 그 어떤 아름다운 꽃들도<br>\n> 다 흔들리면서 피었나니<br>\n> 흔들리면서 줄기를 곧게 세웠나니<br>\n> 흔들리지 않고 가는 사랑이 어디 있으랴<br>\n> <br>\n> 젖지 않고 피는 꽃이 어디 있으랴<br>\n> 이 세상 그 어떤 빛나는 꽃들도<br>\n> 다 젖으며 젖으며 피었나니<br>\n> 바람과 비에 젖으며 꽃잎 따뜻하게 피웠나니<br>\n> 젖지 않고 가는 삶이 어디 있으랴\n\n'열려있는 질문'으로 코칭 하시는 분이라고 느꼈다. 흔들릴수록 오히려 '자신'을 돌봐야 한다는 이야기에 동의한다.\n탐정토끼님의 행보가 더욱 궁금해졌다.\n\n## 2. 개발자, 개발 리더, 그리고 프로덕트 오너로! - 서지연·치즈\n\n개발 리더의 관점은 한 번도 생각하지 않았다. 그런데 리더, 치즈님은 어떻게 문제를 바라보고 해결하려고 시도하시는지 들었다.\n\n'리더도 똑같은 사람이다'라는 메시지가 느껴졌다. 예를 들어 동료가 출산휴가를 떠났을 때 슬랙봇 학습을 통해 문제를 해결하셨다는 이야기가 재밌었다.\n\n치즈님이 아니었다면 '리더의 관점'이 당장 궁금하지는 않았을 것 같다. 하지만 이야기를 듣고 사고가 넓어졌다.\n동료와 대화를 할 때 서로의 관점을 이야기한다면 '함께 성장하는 팀'에 한발 더 다가갈 수 있다고 생각한다.\n\n팟캐스트를 들었던 시절이 떠올랐다. 최근에 쓰신 저서[^1]도 재밌게 읽었는데, 다음에 뵐 때는 꼭 사인받고 싶다.\n\n## 3. 사이드 프로젝트가 너를 성장케 하리라(<u>예상치</u> 못한 방향으로) - 조단원·Chloé\n\n사이드 프로젝트 1타 강사 콘셉트로 긍정적인 에너지를 전달해 주셨다.\n\n특히 개발에 관심이 없을 때도 이용해 본 서비스를 만든 개발자분의 이야기를 들어서 흥미로웠다. 가장 인상 깊었던 점은 Chloé님의 초심이다.\n서비스를 시작한 이유, 운영할 때 중요하다고 생각하는 포인트를 참고했다.\n\n올해는 산타파이브에서 어떤 서비스를 제공하실지 기대된다. 함께[^2], 따뜻한 연말을 보내야지.\n\n## 마치며\n\n진행되는 세션도 좋았지만 사전 인터뷰가 인상 깊다. 다른 컨퍼런스에서 흔히 볼 수 없는 방식이고, 상세 비하인드가 궁금한 나의 니즈에 적합했다.\n*인터뷰와 다시 보기를 함께 보면 재미가 배가 된다고 생각한다.\n\n다양한 행사에 참여해도, 시작을 함께한 적은 없다. 운이 좋았다. 야구팬이 가을을 기다리듯이,\n매년 가을이 기다려지는 또 하나의 컨퍼런스로 남길 바란다. 참여할 때마다 새로운 기분을 느끼고 싶다.\n그리고 다음에는 커리어가 있는 상태로, 조금 더 네트워킹에도 적극적으로 참여하고 싶다.\n\n**기대된다. 학습과 성장 컨퍼런스 2025**\n\n**<참고 자료>**\n\n- [PuddingCamp '학습과 성장 컨퍼런스 2024'](https://conference.puddingcamp.com/)\n- [PuddingCamp '컨퍼런스'](https://puddingcamp.com/topics?page=1&category=conference)\n\n[^1]: 『요즘 AI 페어 프로그래밍』(서지연, 골드래빗(주), 2024)\n[^2]: https://colormytree.me/\n"},{"excerpt":"*인프런 워밍업 클럽 2기, 18일차 미션을 '나만의 언어'로 정리한 글이다. \"어떻게 코드를 읽기 좋게 작성할 수 있을까?\" 워밍업 클럽 1주 차, 3가지를 배웠다. 추상과 구체 논리, 사고의 흐름 객체 지향 패러다임 학습한 내용을 정리, 연습하며 체화해 보자. 전체 코드는 GitHub에서\n만날 수 있다. 1. 리팩터링 사용자가 추가한 '주문'이 유효한…","fields":{"slug":"/inflearn-warmup-club-study-2-day-4-mission/"},"frontmatter":{"date":"October 03, 2024","title":"리팩터링과 SOLID","tags":["스터디","인프런","인프런워밍업클럽","스터디2기"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 스터디 2기 - 백엔드 클린 코드, 테스트 코드 <출처: 인프런>](../images/inflearn-warmup-club-study-2.png)\n\n> *인프런 워밍업 클럽 2기, 18일차 미션을 '나만의 언어'로 정리한 글이다.\n\n**\"어떻게 코드를 읽기 좋게 작성할 수 있을까?\"**\n\n워밍업 클럽 1주 차, 3가지를 배웠다.\n\n1. 추상과 구체\n2. 논리, 사고의 흐름\n3. 객체 지향 패러다임\n\n학습한 내용을 정리, 연습하며 체화해 보자.\n\n> 전체 코드는 [GitHub](https://github.com/devmeeple/readable-code/blob/mission/src/test/java/mission/OrderServiceTest.java)에서\n> 만날 수 있다.\n\n## 1. 리팩터링\n\n```java\npublic boolean validateOrder(Order order) {\n    if (order.getItems().size() == 0) {\n        log.info(\"주문 항목이 없습니다.\");\n        return false;\n    } else {\n        if (order.getTotalPrice() > 0) {\n            if (!order.hasCustomerInfo()) {\n                log.info(\"사용자 정보가 없습니다.\");\n                return false;\n            } else {\n                return true;\n            }\n        } else if (!(order.getTotalPrice() > 0)) {\n            log.info(\"올바르지 않은 총 가격입니다.\");\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n사용자가 추가한 '주문'이 유효한지 검증하는 메서드다. 동작하는 코드지만 부자연스럽다.\n리팩터링 전에 현재 상태를 글로 작성해 보자.\n\n> (리팩터링 전)\n>\n> 주문을 검증한다.\n>\n> - 주문에서 아이템 한번 보자. 사이즈 0이야? 그러면 실패야.\n> - 아니면 주문 총금액 가져와. 0원 넘어? 그리고 주문자 있어? 아니 없어? 그러면 실패야. 해당되는 거 없어? 그럼 성공이야.\n> - 그런데 주문 총금액 0원 넘지? 아니야? 그러면 실패야.\n> - 주문 성공이야.\n\n놀랍게도 현재 코드가 전달하는 내용이 그렇다. 어떻게 개선하면 좋을까? 강의에서 제안한 3가지 해결 방안이 떠올랐다.\n\n- 사고의 depth 줄이기\n- 부정어를 대하는 자세\n- 객체 설계하기\n\n### 1.1 사고의 depth 줄이기\n\n`if else` 키워드가 남용됐다. 특히 `else`가 없어도 되는 상황에서 사용하는 것은 '남용'이라 생각한다. 비용을 아껴보자.\n\n```java\npublic boolean validateOrder(Order order) {\n    if (order.getItems().size() == 0) {\n        log.info(\"주문 항목이 없습니다.\");\n        return false;\n    }\n\n    if (!(order.getTotalPrice() > 0)) {\n        log.info(\"올바르지 않은 총 가격입니다.\");\n        return false;\n    }\n\n    if (!order.hasCustomerInfo()) {\n        log.info(\"사용자 정보가 없습니다.\");\n        return false;\n    }\n\n    return true;\n}\n```\n\n조건 문의 depth를 조절하고, 순서를 바꿨다. 이전 코드는 총금액이 0원이 넘는지 검증하고 이어서 고객 정보 유무를 검증했다.\n하지만 조건을 나눴다. 길게 작성된 문장을 한 문장으로 쪼개는 방법과 같다.\n\n인지 비용 줄이기에 성공했다. 하지만 아직 부족하다.\n\n### 1.2 부정어를 대하는 자세\n\n부정어는 번역 투와 유사하다. '오늘 중으로 하지 않으면 안 된다'라는 표현은 부자연스럽다. '오늘 안에 해야 한다'처럼 코드도 직관적으로 바꿔보자.\n\n```java\npublic boolean validateOrder(Order order) {\n    if (order.getItems().size() == 0) {\n        log.info(\"주문 항목이 없습니다.\");\n        return false;\n    }\n\n    if (order.getTotalPrice() <= 0) {\n        log.info(\"올바르지 않은 총 가격입니다.\");\n        return false;\n    }\n\n    if (!order.hasCustomerInfo()) {\n        log.info(\"사용자 정보가 없습니다.\");\n        return false;\n    }\n\n    return true;\n}\n```\n\n부정어는 2곳이 사용되고 있다. 하지만 총금액을 묻는 조건만 수정했다. 이전 조건은 0원을 초과하는지 검증하고 뒤집었다.\n전달하고 싶은 의미가 무엇일까?\n\n0원을 넘지 않으면 실패한다. 사고를 바꾸면 부정어를 긍정으로 바꿀 수 있다.\n\n남은 부정어를 해결하자.\n\n### 1.3 객체 설계하기\n\n![객체에게 일삼는 폭력 getter, setter <출처: 귀귀 '열혈초등학교'>](guigui-violence.avif)\n\n부정어 외에도 현재 객체를 '폭력적'으로 사용하고 있다. 어떻게 격식을 차리고 객체를 존중할 수 있을까?\n\n```java\npublic boolean validateOrder(Order order) {\n    if (order.isEmpty()) {\n        log.info(\"주문 항목이 없습니다.\");\n        return false;\n    }\n\n    if (order.isNotValidTotalPrice()) {\n        log.info(\"올바르지 않은 총 가격입니다.\");\n        return false;\n    }\n\n    if (order.hasNoCustomerInfo()) {\n        log.info(\"사용자 정보가 없습니다.\");\n        return false;\n    }\n\n    return true;\n}\n```\n\n구현을 드러내지 않고 객체에게 물어보자.\n\n**\"객체님 알고 계시나요?\"**\n\n### 정리\n\n> (리팩터링 후)\n>\n> 주문을 검증한다.\n>\n> - 주문 안 했어? 그러면 실패야.\n> - 주문 총금액 0원 안 넘어? 그러면 실패야\n> - 주문자가 없어? 그러면 실패야.\n> - 주문 성공이야.\n\n리팩터링 후는 위와 같다. 이전보다 추상적이지만 2가지가 마음에 걸린다.\n\n- `log`가 아닌 `사용자 정의 Exception`을 사용하면 더욱 자연스럽지 않을까?\n- 주문 성공을 의미하는 값 `true`, `false`를 개선할 수 없을까?\n\n`log`또한 따로 `LoggerService`로 분리하고 적용했다. 그런데 에러를 정의하는 방법이 더 좋다고 생각했다. (물론 로그도 필요하다)\n\n`true`, `false` 값이 추상화 레벨이 다르다고 생각한다. 주문이 성공하면 `Order.OK`, 실패하면 `Order.cancle`과 같은 방법을\n적용하면 추상화 레벨을 맞출 수 있다고 생각한다.\n\n## 2. SOLID\n\nSOLID는 객체지향에서 가장 많이 이야기하는 주제다. 이유가 뭘까?\n\n### 2.1 단일 책임 원칙\n\n단일 책임 원칙(SRP: Single Responsibility Principle)은 변경으로 일어나는 '영향 범위 최소화'를 강조한다.\n\n> *하나의 책임이란, 변경해야 할 이유가 하나여야 한다는 의미다.\n\n### 2.2 개방 폐쇄 원칙\n\n개방 폐쇄 원칙(OCP: Open-Closed Principle)은 '확장'을 강조한다.\n\n> *추상화된 역할에 의존함으로 문제를 해결한다.\n\n### 2.3 리스코프 치환 원칙\n\n리스코프 치환 원칙(LSP: Liskov Substitution)이란 기본 클래스의 계약을 파생 클래스의 '치환 여부'를 강조한다.\n\n> *인터페이스는 계약이고, 테스트는 계약 명세다.\n\n### 2.4 인터페이스 분리 원칙\n\n인터페이스 분리 원칙(ISP: Interface Segregation Principle)은 클라이언트가 '사용하지 않는 인터페이스에 의존하지 않아야 한다는 점'을 강조한다.\n\n> 인터페이스의 크기를 작게 유지하고, 클래스는 필요한 기능에만 의존한다.\n\n### 2.5 의존성 역전 원칙\n\n의존성 역전 원칙(DIP: Dependency Inversion Principle)은 고수준/저수준 모듈이 '추상화'에 의존하도록 강조한다.\n\n> *의존은 사용하기만 해도 관계가 만들어진다.\n\n## 마치며\n\n![범인은 누구? <출처: 명탐정 코난>](case-closed.avif)\n\nSOLID를 나만의 언어로 정리하고, 리팩터링을 연습했다. 아직 객체지향에 맞는 코드를 작성하지 못해서 아쉽다.\n사고가 유연하지 않다.\n\n하지만 다시 생각하면 코드를 재밌게 작성할 여지가 많이 남았다. 풀지 못한 문제가 많다.\n단서를 모아 사건 해결에 앞장서야지.\n\n**<참고 자료>**\n\n- [박우빈 'Readable Code: 읽기 좋은 코드를 작성하는 사고법'](https://inf.run/kHiWM)\n"},{"excerpt":"\"살아있음을 느낄 때면, 난 산송장처럼 눕기 싫어!\" 2024년도 이제 100일이 남지 않았다. '올해 가장 행복할 때가 언제였어?' 자문했을 때 9월을 뺄 수 없다.\n시원한 바람, 바람막이, 헤드셋과 함께한 행복을 공유한다. Connecting the dots  '과거와 연결되어 있다'는 생각을 유독 많이 했다. 다시 개발을 시작하게 된 이유가 무엇일까…","fields":{"slug":"/retrospective-20240929/"},"frontmatter":{"date":"September 29, 2024","title":"2024 월간 장태근 9월호 'Always Awake'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/iGWKNrtbF9I?si=-oGCDSpgG9XJvbnv\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n**\"살아있음을 느낄 때면, 난 산송장처럼 눕기 싫어!\"**\n\n2024년도 이제 100일이 남지 않았다. '올해 가장 행복할 때가 언제였어?' 자문했을 때 9월을 뺄 수 없다.\n시원한 바람, 바람막이, 헤드셋과 함께한 행복을 공유한다.\n\n## Connecting the dots\n\n![스티브 잡스 \"Connecting the Dots\" <출처: EO planet>](connecting-the-dots.jpeg)\n\n'과거와 연결되어 있다'는 생각을 유독 많이 했다. 다시 개발을 시작하게 된 이유가 무엇일까, 어떤 포인트에 재미를 느낄까\n질문에 답을 할 수 있지만 시작이 어디인지는 알 수 없었다. 그런데 생각해 보면 모든 일은 경험에서 시작됐다.\n\n### 데이터 분석\n\n김나헌 님[^1]께서 만들어 주셨다. 참여하기 전까지는 별다른 생각 없었다. 다른 밋업처럼 흥미로워 참여했다.\n그런데 온라인 밋업을 보면서 느꼈다. 데이터를 어떻게 바라보시는지 기술적인 내용과 질문, 답변, 운영 모두 좋았다. 하지만 가장 좋았던 점은 다른 부분이다.\n\n![자바프로그램 할 수 있는 사람 두 명 타요 <출처: PD 수첩>](java-satirize.jpg)\n\n사회에서 개발자를 바라보는 시선은 처음 개발자를 접했을 때와는 전혀 다르다. 멀티버스가 아닌가 싶다.\n지금에서야 넘어갈 수 있는 주제지만 '컴공은 3D 업종이다', '개발의 끝은 치킨집이다'라는 내용을 숨 쉬듯이 들었다.\n\n개발자 인식이 좋아져서 돌아오고 싶었던 것은 전혀 아니었다. 관심도 없었다. 코로나 덕분에 오히려 활성화 됐는지도 몰랐다.\n당시에 하는 일은 하나밖에 없었다.\n\n![인생의 낙 훈수두기 <출처: YOUR.GG>](lol-data-analysis.png)\n\n관전 분석만 했다. 게임은 안 했다. 대회를 보고 분석하는 영상은 모두 챙겨봤다. 정리한 지식을 친구에게 알려줬다.[^2]\n오랜만에 삶이 재밌어서 데이터 분석가, 데이터 엔지니어를 찾아봤다. 잊고 살았다.\n\n나헌 님께서 풀어주신 이야기 덕분에 '스스로 개발자를 바라보는 인식'이 왜 변화했는지, 잃어버린 단서를 얻었다.\n다시 해석해 보면 한 가지를 깊게 알아갈 때의 재미와 반복을 버티는 방법을 배웠다.\n\n## 두 개의 심장\n\n### 1. SEF2024\n\n![SEF2024 성수 팝업](sef2024.avif)\n\n오프라인 팝업스토어에 다녀왔다. 성수에 위치해서 그런지, 코딩을 전혀 몰라도 부담 없이 참여할 수 있는 분위기였다.\n블록코딩으로 문제를 해결하며 사진도 찍고 소망 편지도 담고 소소한 즐거움을 안겨줬다.\n\n온라인은 EO 영상으로 유명하신 조은님의 ['비즈니스하는 개발자'](https://youtu.be/173WJ6depMY?si=1WpnL8Hon5mtn1jJ) 세션이 괜찮았다.\n\n### 2. 개발바닥 밋업\n\n앞서 이야기한 개발자 인식 변화에 도움을 받은 개발바닥을 마주했다. 짧게 요약하기 힘들다.\n자세한 후기는 [이전 글](https://devmeeple.github.io/pangyo-evening-special-meet-up-with-devbadak-240925/)로 대신한다.\n\n### 3. 학습과 성장 컨퍼런스 2024\n\n개발자에 도전하기 전에 마주했던 발표자의 발표를 들었다. 사실 모두 해당된다. 라디오 재밌게 들었던 기억,\n친구들과 사용하던 기억이 떠올랐다. 이 외에도 다양한 경험을 했다. 자세한 이야기는 후기로 알아보자.\n\n### 그래서?\n\n콘퍼런스를 다녀올 때마다 기분이 좋다. 온라인으로도 정보를 얻을 수 있지만, 오프라인에서 느껴지는 현장감이 있다.\n직관을 가서 야구 경기를 보는 것과 모니터로 보는 것의 차이와 유사하다.\n\n무엇인가를 배우러 가기보단, 쉬러 가는 시간[^3] 같다. 다녀오면 기진맥진이다. 다음날에 집중을 도와주는 윤활유, 매개체다.\n\n## Halo\n\n![블로그 Google Analytics](blog-traffic.avif)\n\n글쓰기도 시스템에 들어왔다. 마치 MVP 같다. 공부한 내용을 정리할 때 재밌다. 글쓰기책을 열심히 봤던 덕을 드디어 보고 있다.\n\n아직 검색엔진의 선택을 받지 못해서 아쉽다. 하지만 폭발적인 조회수덕에 도파민을 느꼈다.\n앞으로 어떻게 '나만의 글'을 작성할지 지속해서 풀어내고 싶다.\n\n## 마치며\n\n![무슨 생각을 해...그냥 하는거지 <출처: 퀸연아!나는 대한민국이다>](yuna-kim.avif)\n\n펠리컨적 사고를 실천했을 때 장점을 느꼈다. 마감기한을 잡으니 미룰 수가 없다. '해내야 한다'라는 약속, 사명감으로\n시스템을 최적화시켰다.\n\n10월은 예정된 행사가 없다. 하지만 벌여놓은 일이 많다. 무리하지 않되, 어떻게 활용할지 계속 고민해야겠다.\n이 또한 추상화가 아닐까. 나에게 무엇이 필요하고, 필요하지 않은지 이해하고 해내보자.\n\n[^1]: [스포티파이에서 데이터직군은 도대체 무슨 일을 하나요?](https://inf.run/uHTU7)\n[^2]: 친구는 훈수를 뒀다고 이야기할 수 있다.\n[^3]: 배움도 이어진다.\n"},{"excerpt":"9월 25일, 713명의 경쟁률을 뚫고 퇴근길 밋업에 다녀왔다. 밋업은 토크 콘서트, 네트워킹 순서로 진행됐다. 속이 뻥 뚫리는 개비스콘 - 향로 & 호돌맨 개비스콘: 개발바닥과 함께하는 비밀스러운 토크 콘서트 *인프런 편집 자료 시청을 권장한다. 말씀하신 내용에 근거하여 최대한 명료하게 작성했다. 하지만 사견이 포함됐다. 참가자의 사전 질문을 선정해서 …","fields":{"slug":"/pangyo-evening-special-meet-up-with-devbadak-240925/"},"frontmatter":{"date":"September 26, 2024","title":"판교 퇴근길 밋업 - 가을 특집 with 개발바닥 후기","tags":["행사","판교퇴근길밋업","인프런","개발바닥밋업"]},"rawMarkdownBody":"\n![판교 퇴근길 밋업 - 가을 특집 with 개발바닥](pangyo-evening-special-meet-up-with-devbadak.avif)\n\n9월 25일, 713명의 경쟁률을 뚫고 [퇴근길 밋업](https://inf.run/XAak4)에 다녀왔다. 밋업은 토크 콘서트, 네트워킹 순서로 진행됐다.\n\n## 속이 뻥 뚫리는 개비스콘 - 향로 & 호돌맨\n\n개비스콘: **개**발바닥과 함께하는 **비**밀**스**러운 토크 **콘**서트\n\n> ***인프런 편집 자료 시청을 권장한다.**\n>\n> 말씀하신 내용에 근거하여 최대한 명료하게 작성했다. 하지만 사견이 포함됐다.\n\n참가자의 사전 질문을 선정해서 답변하는 시간을 가졌다.\n\n### 보상과 커리어\n\n> 이직으로 보상을 올리는 방법이 좋을지, 독자적인 커리어를 쌓는 방법이 좋을지 고민입니다.\n\n**호돌맨**: 자연스러운 고민이다. 그런데 비교를 한번 시작하면 끝이 없다고 생각한다. 기술과 돈보다 본인의 우선순위, 가치를 먼저 고민하면 자연스럽게\n선택할 수 있는 고민이라고 생각한다.\n\n**향로**: 호돌맨과 같은 의견이다.\n\n### 공부와 삶의 배분\n\n> 자기 계발, 학습법, 권태기 극복 방법이 궁금합니다.\n\n**향로**: 권태기는 의지에 움직이기보단, 강제성을 부여했다. 스스로 의지가 부족할 때 포기하는 상황이 잦았다. 추가로 좋아하는 발표[^1]를 공유한다.\n주위에 이런 방법을 선택하신 분도 많다. 자기 계발은 주로 일, 생산성을 주제로 한다. 오전 7~9시 시간을 따로 잡아 진행한다.\n\n**호돌맨**: 일상과 개발자의 삶이 분리는 돼있지만, 결국 공존한다. 자기 계발이 필요하다고 느껴지면 한다. 스트레스를 안 받는 상태를 유지하려고 한다.\n예를 들어 최대한 약속을 덜 잡는다.\n\n향로님과 김영한 님께서 언급하셨던 책[^2]이 떠올랐다. MBTI를 선호하지 않지만 계획을 좋아하시는 향로님, 즉흥적이신 호돌맨님 방법이 달라서 재밌었다.\n~~특히 향로님의 인간적인(?) 충격 신혼생활이 언급됐다.~~\n\n### 첫 직장에서 학습방법\n\n> 신입 개발자입니다. 얼마나, 어떻게 배워야 좋을지 고민입니다. 백엔드를 희망하지만 DevOps, AI 업무 진행 중입니다.\n\n**호돌맨**: 떠올려보면 지금처럼 개발자를 구분하는 기준이 적을 때 커리어를 시작했다. 하지만 사례가 비슷하다. 함께 해보는 방법을 추천한다.\n\n**향로**: 반대의 사례[^3]는 자주 접했다. (백엔드 -> DevOps) 개인적으로 컴퓨터와 조금 더 함께 일하는 직무가 DevOps라고 생각한다. 다른 직무는\n추상화된 기술을 쓰지만, DevOps는 조금 더 컴퓨터 밑바닥의 기술을 사용한다. 이런 접근이 장점이라고 생각한다. 사회 초년생, 2~3년 차 미만일 때[^4] 인프라를 다뤄보는 방법이 좋다고 생각한다.\nAI 기술이 좋아져서 역량의 기준이 넓어졌다. 코드만 보는 사람과 넓게 다루는 사람은 다르다고 생각한다.\n\n**향로 & 호돌맨**: 주위에 둘 다 기본적으로 다룰 줄 아시는 분이 많다.\n\n요약하면 '오히려 좋아. 이건 기회야'라는 생각이 들었다. 가장 오랜시간 답변하셨다.\n\n### 학습법\n\n> 주니어 시절에 어떤 학습법을 선택하셨나요? (책, 온라인, 야생으로 만들어가며 학습 등)\n\n**향로**: 미움받을 용기를 가졌다. 공개된 공간에 설명하는 방법을 선택해서, 여러 번 수정하며 실험했다.\n\n**호돌맨**: 책을 구매하고 필요한 부분만 보고 접고 구현했다. 키워드를 찾아 검색하며 확장시켰다. 가지치기와 유사하다.\n장점은 공부는 확실히 된다. 하지만 마무리하기 어렵다.\n\n**향로 & 호돌맨**: 개념에 깊게 접근하려면 처음부터 넓게 접근하게 된다고 생각한다.\n\n짧게 말씀해주셨지만 [블로그](https://jojoldu.tistory.com/)에 관련 주제[^5]가\n많다. [개발바닥 영상](https://youtu.be/6gNMsjcH3oA?si=f8xIi5tMzh_pKN49)도 떠올랐다.\n\n### 좋은 개발 문화\n\n> 좋은 개발문화란 무엇일까요?\n\n**호돌맨**: 회사에 출근하면 문화가 시작된다. '좋은 개발 문화'의 모호한 정의를 정리하는 시간이 필요하다.\n\n**향로**: 직군별로 본인의 역량만 누리면 살 수 없다고 생각한다. 개발팀이 편하면 다른 팀에서 배려를 하고 있다.\n'성공하는 제품'을 만들기 위해 어떻게 시너지 낼 수 있을지 고민한다. 개발자가 주로 이야기하는 개발문화는 '개발만 하고 싶다'가 많다고 생각한다.\n하지만 가능하지 않다고 생각한다.\n\n### 개발/조직문화\n\n> 성장하는 개발문화 또는 조직문화를 만들 수 있는 효과적인 방법은 무엇인가요?\n\n**향로**: 조심스럽다. 시니어의 유무와 상관없이 개발문화는 만들 수 있다. 시니어는 보통 다양한 성공, 실패 경험을 가지고 있다. 오히려 시니어가 많을수록 문화 형성에 어려움을 느낄 수 있다.\n사람마다 다르다. 실패 경험도 많아서 부정적인 입장을 내면 어려움을 느낄 수 있다.\n\n**호돌맨**: 몸으로 배운 좋은 개발문화를 전파하려고 신경 쓴다. 현재 진행형이다. 아무리 좋은 문화라고 생각해도 사람마다 다를 수 있다. 예를 들어 코드리뷰가 그렇다.\n누군가에는 입영 영장일 수 있다. 설득 전에 이해관계를 맞춰야 한다.\n\n**향로 & 호돌맨**: 우아한형제들에서 겪었던 사례[^6]를 공유한다. 연차가 다른 사람을 설득하기는 더 어렵다. 우선, 연차가 비슷한\n사람들끼리 설득하며 경험을 쌓았다. 미숙함과 상관없이 요구하는 역량을 쌓을 수 있다.\n\n## 피맥과 함께하는 네트워킹\n\n6조에 배정됐다. 다른 조는 어땠는지 모르지만 취업 준비생 신분은 혼자였다. 주로 3~5년 차 선배 개발자셨다.\n자기소개를 시작하고 명함을 주고받았다. 레거시 코드와 기술 선택, 테스트 코드 사례를 주제로 대화를 나눴다.\n\n![인프런 '봤어요 5천만 달성' 깜짝 이벤트 50% 할인 쿠폰](inflearn-event-winner.avif)\n\n호돌맨님이 중간에 오셔서 실무 사례를 듣고 답변을 해주셨다. 마침 조용해서 호돌맨님 덕분에 이벤트에 당첨됐던 경험을 공유하고,\n감사인사를 드렸다.\n\n간단한 실내 네트워킹을 마치고 야외에서 네트워킹을 진행했다. 우연히 동창 선배(?) 개발자 분을 만나 조언도 듣고 알찬 대화를 나눴다.\n\n## 마치며\n\n마무리 사진을 찍고 밋업을 마쳤다. 색다른 분위기가 인상 깊었다. 이전에는 인프랩에서 진행됐는데 이번에는 장소가 달랐다.\n캠핑에 온듯한 기분이 드는 실내와 야외 공간이 좋았다. [^7] 분위기를 담지 못해 아쉽다. 맛집에 가서 음식을 먹다 다 먹은 접시를 찍듯 네트워킹에 정신이 팔렸다.\n\n![개발바닥 친필 사인](autograph.avif)\n\n책과 노트에 친필 사인을 받았다. 호돌맨님께서 기가 막힌 은신술을 보여주셨다.\n\n\"내 안의 작은 향로가 망하라고 말했다\"\n\n난생처음 받아보는 독특한(?) 사인이 인상 깊다. 이것이... 개발바닥?\n\n끝으로 부끄러운 마음에 표현하지 못했다. 개발바닥(향로 & 호돌맨)과 운영진분들에 시너지 덕분에 재밌게 놀았다. 감사합니다!\n\n[^1]: [김동건 '갈망의 아둥이'](https://www.slideshare.net/slideshow/ss-6097436/6097436)\n[^2]: [『더 시스템(THE SYSTEM)』(스콧 애덤스, 베리북, 2024)](https://product.kyobobook.co.kr/detail/S000211656046)\n[^3]: 백엔드 개발자는 JSON 상하차 업무를 하는 사람 같아요.\n[^4]: 경험치를 떨구지 않을 때 도전하자.\n[^5]: 스터디에서 블로그를 선택한 이유, 학습법 변화\n[^6]: 주니어끼리 모여 가스라이팅으로 만들었다. (날조다수)\n[^7]: 판교라고 느껴지지 않았다.\n"},{"excerpt":"이 글은 『모던 자바스크립트 Deep Dive』 스터디 토론을 인터뷰 형식으로 정리한 글이다. 반지의 제왕 캐릭터로 비유했다. 목표 변수, 표현식과 문, 데이터 타입을 알아보자. 1 .세미콜론 글을 작성할 때 문장의 마무리로 마침표를 찍듯 세미콜론을 사용하는 언어가 많다. 하지만 자바스크립트(JavaScript)는 세미콜론이 선택 사항이다.\n프로젝트에서 …","fields":{"slug":"/modern-javascript-deep-dive-study-240909/"},"frontmatter":{"date":"September 09, 2024","title":"모던 자바스크립트 Deep Dive 회고 - 1주차","tags":["JavaScript/TypeScript"]},"rawMarkdownBody":"\n이 글은 『모던 자바스크립트 Deep Dive』 스터디 토론을 인터뷰 형식으로 정리한 글이다. 반지의 제왕 캐릭터로 비유했다.\n\n## 목표\n\n변수, 표현식과 문, 데이터 타입을 알아보자.\n\n## 1 .세미콜론\n\n글을 작성할 때 문장의 마무리로 마침표를 찍듯 세미콜론을 사용하는 언어가 많다. 하지만 자바스크립트(JavaScript)는 세미콜론이 선택 사항이다.\n프로젝트에서 어떤 규칙을 사용할까.\n\n### Q. 어떤 규칙을 준수하나요?\n\n**간달프**: 사용하는 것을 선호한다.\n\n**레골라스**: 사내 컨벤션이 세미콜론을 사용하지 않는다. 문제가 발생했을 때 'Early Return 패턴[^1]'을 사용해서 문제를 해결했다. 개인 프로젝트에는 세미콜론을 사용한다.\n\n## 2. undefined vs. null\n\n자바스크립트 엔진은 값을 초기화하지 않으면 `undefined`를 기본으로 할당한다. 따라서 의도적으로 빈 값을 넣을 때는 `null`을 주로 사용한다.\n\n### Q. 왜 undefined를 만들었을까?\n\n**프로도**: 자바스크립트는 동적 언어다. 메모리 공간을 만들었지만(선언은 했지만) 값이 할당되지 않은 상태를 표현하기 위해 `undefined`를 만들지 않았을까?\n\n## 3. 변수 선언하기: var\n\nES6 이전에는 `var` 키워드를 사용해서 변수를 선언했다. 하지만 `let`, `const` 키워드가 등장한 이후에는 코드를 작성할 때 `var` 키워드를 사용하지 않았다.\n`var` 키워드를 어떻게 바라보면 좋을까.\n\n**피핀**: `var` 키워드는 아직도 라이브러리를 개발할 때 사용한다.\n\n**프로도**: 아직도 사용할 수 있는 키워드고 문제는 아니다. 하지만 모두가 이해하고 사용하는 인지 비용이 높다고 생각한다. 그래서 가급적 `var` 키워드를 사용하지 않는다.\n\n## 4. 부동소수점\n\n부동소수점은 정산, 결제 등 돈과 관련된 모든 도메인에서 주로 이야기하는 주제다.\n\n**간달프**: 자바(Java)에서는 `BigDecimal` 클래스를 사용해서 문제를 해결한다.\n\n**레골라스**: 정책에 따라 다르게 처리한다. 중요한 점은 도메인을 이해해야 한다.\n\n> 참고: 자세한 이야기는 부동소수점에서 알아보자.\n\n## 5. 네이밍 컨벤션(Naming Convention)\n\n**프로도**: 변수명은 camelCase, 클래스, 리액트(React) 컴포넌트는 PascalCase 등 다양하게 사용한다.\n\n**레골라스**: 네이밍을 할 때 어려운 점과 참고하기 좋은 서적을 공유했다.\n\n## 마치며\n\n간단한 주제였지만 꽤 오랜 시간이 걸렸다. 그래도 다양한 사고가 확장되는 경험을 해서 좋았다.\n추후에 스코프와 호이스팅을 배우면 더 깊은 대화를 할 수 있을 것 같아 기대된다.\n\n[^1]: 『리팩터링』(마틴 파울러, 한빛미디어, 2020)"},{"excerpt":"항상 기본을 강조한다. 개발과 기술에 국한된 이야기가 아니다. 이미 다양한 자료로 자바스크립트(JavaScript)를 배웠다. 어느 정도 알고 있다고 느꼈다.\n하지만 기본기를 질문하다면 답할 수 있을까? 그건 아니다. 오랜만에 스터디에 참여하여 검증한다. 스터디 커뮤니티에 주로 올라오는 질문이다. \"개발, 어떻게 공부하면 좋을까요? OO 효율적인가요?\" …","fields":{"slug":"/modern-javascript-deep-dive-study-240902/"},"frontmatter":{"date":"September 02, 2024","title":"모던 자바스크립트 Deep Dive - OT","tags":["JavaScript/TypeScript"]},"rawMarkdownBody":"\n![정말 기본이 없어 아예 안 돼 있어요 <출처: 백종원의 골목식당>](food-alley-basic.avif)\n\n항상 기본을 강조한다. 개발과 기술에 국한된 이야기가 아니다. 이미 다양한 자료로 자바스크립트(JavaScript)를 배웠다. 어느 정도 알고 있다고 느꼈다.\n하지만 기본기를 질문하다면 답할 수 있을까? 그건 아니다. 오랜만에 스터디에 참여하여 검증한다.\n\n## 스터디\n\n커뮤니티에 주로 올라오는 질문이다.\n\n> \"개발, 어떻게 공부하면 좋을까요? OO 효율적인가요?\"\n\n\"함께 공부하세요\" 일관성 있는 답변이 달린다. 10번의 질문 중 8번이 함께를 강조한다.\n하지만 '함께 공부하기가 과연 효율적인가?' 의문을 품었다. 특히 책을 읽는 스터디다 그렇다. 분야에 상관없이 '책' 자체를 어려워하는 사람이 많다. 읽는 속도에 편차도 크다.\n\n> 세상에 존재하는 모든 생명체는 협력하며 살아간다. 각자 역할, 책임을 가진다. 협력은 메시지를 통해 이뤄진다.\n\n그럼에도 스터디에 참여한다. 그런데 '토론형식'으로 진행된다.\n\n우선 최근 경험[^1]이 너무 긍정적으로 다가왔다. 뿐만 아니라 토론형식과 방향성이 인상 깊다.\n\n그럼에도 토론형식으로 진행되는 스터디에 참여한다. 우선 최근 경험이 너무 긍정적으로 다가왔다. 뿐만 아니라 방향성이 인상 깊다.\n\n기존 스터디와 다르다. '읽기'가 주체가 아닌 '함께 나누고 공유한다' 말하기가 필요하다. 오래 고민하지 않고 바로 참여했다.\n전혀 다른 사고를 확장할 것이라고 기대를 품는다. 부디 모두의 마음이 끝까지 이어져 결실을 맺길 바란다.\n\n### 일정과 방식\n\n![모던 자바스크립트 Deep Dive <출처: 교보문고>](modern-javascript-deep-dive.avif)\n\n입문서로 가장 많이 거론되는 『모던 자바스크립트 Deep Dive(이웅모, 위키북스, 2020)』를 읽는다. 사전식으로 굉장히 두꺼운 책이지만\n올해 안에는 끝나지 않을까 조심스럽게 예상한다. 다음은 상세 운영 원칙이다.\n\n- 매주 정해진 범위를 읽고 토론한다. 기록은 선택이다.\n- 삼진 아웃 제도: 참가가 어려운 날에 연락은 필수다. (미리, 이후에 연락도 자유롭게 허용한다) 만약, 삼진 아웃이라면 디스코드 채널에서 제명한다.\n- 중도 하차: 불가피하게 중도 하차가 필요한 경우 이야기한다.\n- 마이크 불가: 대화가 필요하기 때문에 마이크 사용을 권장한다. 하지만 어려운 경우 채팅으로 대화 가능하다.\n\n### 다음시간에\n\n1, 2, 3장은 생략한다. 4, 5, 6장을 읽고 토론한다.\n\n- 04장. 변수\n- 05장. 표현식과 문\n- 06장. 데이터 타입\n\n## 마치며\n\n실무에서 직접 경험하면 더 많은 인사이트가 다가오고 검증할 기회가 주어질 것이다. 하지만 아직, 때가 아니다.\n현재 내가 할 수 있는 최선은 정리다. 우선, 나만의 언어로 정리하고 다양한 비유로 대화할 수 있도록 신경 쓰자.\n\n[^1]: 또 당신입니까. 워밍업 클럽\n"},{"excerpt":"벌써 국비 교육이 끝난 지 1년 지났다. 지난 회고를 짧게 돌아보며 어떤 변화가 일어났는지 알아보자. 회상  밥 없이는 살아도 커피 없이는 못 살았다. 문제가 풀리지 않으면 달달한 음식을 찾았다.\n몸이 힘들어하는 것도 모르고 계속 뛰었다. 어떻게 이렇게 지냈는지 의아하다.  오랜만에 코드를 다시 봤다. 객체를 만들고 습관적으로 getter/setter를 …","fields":{"slug":"/retrospective-20240825/"},"frontmatter":{"date":"August 25, 2024","title":"2024 월간 장태근 8월호 '나의 봄은'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ALXA72FkkVE?si=p3bnxTbYWTEAOuUU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n벌써 국비 교육이 끝난 지 1년 지났다. 지난 회고를 짧게 돌아보며 어떤 변화가 일어났는지 알아보자.\n\n## 회상\n\n![우당탕탕 첫 번째 프로젝트](commit.png)\n\n밥 없이는 살아도 커피 없이는 못 살았다. 문제가 풀리지 않으면 달달한 음식을 찾았다.\n몸이 힘들어하는 것도 모르고 계속 뛰었다. 어떻게 이렇게 지냈는지 의아하다.[^1]\n\n![달려 또 달려](final-project-contributors.png)\n\n오랜만에 코드를 다시 봤다. 객체를 만들고 습관적으로 getter/setter를 선언했다. 무엇인가 잘못됨이 느껴져도 설득이 어려워서 급히 구현하던 모습이 떠오른다.\n문제를 해결하는 구현 능력도 물론 중요하지만 마지막 리뷰 때라도 '다른 방법으로 구현할 수 있다' 언급정도만 하고 넘어갔어도 좋지 않았을까. 거듭 생각해도 아쉽다.\n\n> 덕분에 스스로 생각할 수 있는 기회가 있었으니 오히려 좋았다.\n\n![당장 쓰러져도 이상하지 않은 상황에 작성한 회고](img.png)\n\n지금과 별반 다르지 않다. 다행인 건 이번달에 드디어 이력서를 넣었다. 결과는 기대하지 않지만 도전을 해서 기분 좋다.\n가장 경계해야 하는 검열을 하느라 시도하지 않았는데 결제 같았다. 버튼 한 번에 끝나는 게 웃겼다. 그동안 무겁게 마음을 먹었었는데\n이제는 조금 더 가벼운 마음으로 지속적으로 두드릴 수 있을 것 같다. 처음이 어렵다.\n\n## 좋은날\n\n![긍정적인 에너지](tidy-first-message.png)\n\n당연히 해야 하는 일이라고 생각했는데 긍정적으로 말씀해 주셔서 감사했다. 오픈소스의 영향인지 주위에 선한 영향력을 주시는 분들이 많다.\n그동안 받기만 했는데 아주 작은 일이라도 선한 영향력을 줄 수 있어서 좋았다. 좋아하는 일을 관심 가지고 했을 뿐인데 과분하다. 계속해서 작은 시도를 하자.\n\n## 마치며\n\n작년보다 다양한 사고를 할 수 있어서 좋다. 부족하지만 가만히 지내지는 않았구나. 스스로 대견하다.\n실무에 가면 지금까지 생각하지 못했던 부분까지 고려할 수 있다는 사실이 기대된다. 지금의 내가 하지 못하는 사고를 확장하고 싶다.\n\n> 삶이 절망스럽고 괴롭다면, 그만큼 자기 삶에 진심을 다했다는 뜻이다. 그래서 당신이 단 한 번만이라도 좋으니 극도로 절망했으면 좋겠다.\n>\n> <출처: 프리드리히 니체>\n\n한 달 중 보름을 쉬었다. 보통은 아쉬움을 남기고 다음을 기약한다. 그런데 이번달은 다르다.\n지친 몸을 받아들인다. 쉬어도 금방 다시 일어나서 할 수 있다는 믿음이 생겼다. 내일이 기다려진다.\n\n다음 달은 정리한 글을 더 많이 공개하고 기술블로그의 색채가 느껴지길 바란다. 더불어 감각을 잃지 않고 계속 지원하고 도전하는 내가 되길 바란다.\n안주하지 말자.\n\n[^1]: 그래서 9월에 바로 쓰러졌다.\n"},{"excerpt":"프로그래밍 언어를 공부할 때 유명 기본서, 강의, 공식문서 외에도 다양한 방법으로 공부하는 것을 선호한다.\n'과거에 정의한 개념'과 '현재 정의한 개념'이 충돌할 수 있다고 생각하기 때문이다. 그리고 고정된 사고를 하고 싶지 않다.\n매번 '내가 틀릴 수도 있습니다' 외치며 반복한다. Java/Spring은 한국어로 된 발표, 기술 블로그 자료를 흔하게 찾…","fields":{"slug":"/empty-string-checking/"},"frontmatter":{"date":"August 19, 2024","title":"빈 문자열 검증하기","tags":["JavaScript/TypeScript"]},"rawMarkdownBody":"\n프로그래밍 언어를 공부할 때 유명 기본서, 강의, 공식문서 외에도 다양한 방법으로 공부하는 것을 선호한다.\n'과거에 정의한 개념'과 '현재 정의한 개념'이 충돌할 수 있다고 생각하기 때문이다. 그리고 고정된 사고를 하고 싶지 않다.\n매번 '내가 틀릴 수도 있습니다' 외치며 반복한다.\n\nJava/Spring은 한국어로 된 발표, 기술 블로그 자료를 흔하게 찾아볼 수 있다. 하지만 비교적 TypeScript/NestJS은 한정적이다.\n문법은 쉽게 찾아볼 수 있는데 조금 더 깊이 나누고 싶은 주제는 물음표를 남긴다. 특히 테스트가 그랬다.\n\nJava는 테스트를 작성할 때 JUnit을 주로 사용한다. 하지만 JavaScript는 실행 환경에 따라 사용하는 프레임워크가 다르다.\n다양한 프레임워크 중 이 시리즈는 NestJS에서 기본으로 사용하는 Jest를 사용한다. [^1]\n\n> 다른 언어를 사용해 봤거나, 테스트를 작성해 봤다면 이해할 수 있도록 난이도를 설정했다.\n> 전체 코드는 [GitHub](https://github.com/devmeeple/javascript-in-action/tree/main/test/javacan)에서 제공한다.\n\n## 비밀번호 빈 문자열 검증하기\n\n책[^2]을 읽고 예제를 반복해서 구현했다. 그런데 문제를 만났다. 비밀번호가 빈 문자열인지 검증하는 테스트를 리팩터링 할 때\n옵셔널 체이닝(Optional chaining)과 trim() 메서드 개념이 부족하다고 느꼈다.\n\n```javascript\n// 1. 명시적으로 빈 문자열을 검증한다. \nif (password === null || password === undefined || password === '') {\n  return PasswordStrength.INVALID;\n}\n\n// 2. 옵셔널 체이닝(Optional chaining) 활용\nif (!password?.trim()) {\n  return PasswordStrength.INVALID;\n}\n```\n\n구현을 먼저 진행할 땐 검증을 명시적으로 하면 된다고 생각했다. 그런데 조금 더 나은 방법은 없을까 고민했다.\n검색결과 옵셔널 체이닝과 trim()을 사용했다.\n\n### 옵셔널 체이닝(Optional chaining)\n\n```javascript\nit('객체가 존재하면 객체를 반환한다. [성공]', () => {\n  // given\n  const baseballPlayer = {\n    name: '원태인',\n  };\n\n  // when\n  const sut = baseballPlayer?.name;\n\n  // then\n  expect(sut).toBe('원태인');\n});\n\nit('객체가 존재하지 않으면 undefined를 반환한다. [실패]', () => {\n  // given\n  const baseballPlayer = {};\n\n  // when\n  const sut = baseballPlayer?.name;\n\n  // then\n  expect(sut).toBeUndefined();\n});\n```\n\n옵셔널 체이닝은 프로퍼티가 없는 중첩 객체를 안전하게 접근할 때 사용한다.\n위와 같은 방법으로 사용가능하다.\n\n### trim\n\ntrim() 메서드는 공백을 제거할 때 사용한다. 원본 문자열을 수정하지 않고 새로운 문자열을 반환한다.\n\n```javascript\nit('문자열의 양쪽 끝 공백을 제거하고 새로운 문자열을 반환한다. [성공]', () => {\n  // given\n  const poem =\n    '   가야 할 때가 언제인가를 분명히 알고 가는 이의 뒷모습은 얼마나 아름다운가.   ';\n\n  // when\n  const sut = poem.trim();\n\n  // then\n  expect(sut).toBe(\n    '가야 할 때가 언제인가를 분명히 알고 가는 이의 뒷모습은 얼마나 아름다운가.',\n  );\n});\n```\n\n### 전체 검증하기\n\n옵셔널 체이닝과 trim()의 사용법을 간단하게 알아봤다. 그렇다면 리팩터링 한 코드를 다시 테스트해보자.\n\n```javascript\ndescribe('PasswordStrengthMeterTest', () => {\n  it('유효한 비밀번호를 입력한다. [성공]', () => {\n    // given\n    const password = '1q2w3e4r';\n\n    // when\n    const sut = meter(password);\n\n    // then\n    expect(sut).toBe('유효한 비밀번호 입니다.');\n  });\n\n  describe('유효하지 않은 비밀번호를 입력하면 에러 메시지를 출력한다. [실패]', () => {\n    it.each([null, undefined, ''])(\n      '비밀번호 \"%s\"은(는) 유효하지 않은 비밀번호다.',\n      (invalidPassword) => {\n        // given\n\n        // when\n        const sut = meter(invalidPassword);\n\n        // then\n        expect(sut).toBe('유효하지 않은 비밀번호 입니다.');\n      },\n    );\n  });\n});\n```\n\n![password-strength-meter.spec.js 단위 테스트 실행 결과 <출처: GitHub>](./password-strength-meter-result.avif)\n\n테스트를 실행하면 위와 같은 결과를 얻는다.\n\n## 동작 순서 요약\n\n```javascript\nif (!password?.trim()) {\n  return PasswordStrength.INVALID;\n}\n```\n\n정리하면 리팩터링 한 코드는 다음과 같은 순서로 동작한다.\n\n1. `password`가 `null`또는 `undefined`라면 `trim()` 메서드를 실행하지 않고[^1] `undefined`를 반환한다.\n2. `password`가 빈 문자열이라면 `password?.trim()`은 빈 문자열 `''`을 반환한다.\n3. `!` 연산자는 `undefined`, 빈 문자열, `null`과 같은 `Falsy`값[^2]을 `true`로 변환한다.\n4. 조건문이 실행돼서 `PasswordStrength.INVALID`를 반환한다.\n\n> 물론 조건식도 `isPasswordValid()` 메서드로 추가 리팩터링 할 수 있다.\n\n## 마치며\n\n![알게 뭐야 지금 내가 신나는데 <출처: 무한도전>](./excited.avif)\n\n학습 테스트[^5]가 무엇인지 경험하고 글도 작성하니 재밌다. 비록 간단한 테스트지만 이번 기회에 작성하지 않았다면 한참 동안 모르고 지나갈 개념이었다.\n부족함을 기본서를 다시 보며 풀어낼까 했는데 문제가 발생할 때마다 이렇게 테스트 코드와 글로 남겨야겠다.\n\n쌓여있는 문서, 이제는 공개할 시간이다. 해방이다.\n\n**<참고 자료>**\n\n- [The Modern JavaScript Tutorial 'Optional chaining](https://javascript.info/optional-chaining)\n- [MDN Web Docs 'Optional chaining (?.)'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)\n- [MDN Web Docs 'String.prototype.trim()'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\n\n[^1]: [Jest](https://jestjs.io/)\n[^2]: [최범균 『테스트 주도 개발 시작하기』](https://product.kyobobook.co.kr/detail/S000001248962)\n[^3]: 단락(short-circuit, 혹은 단축) 평가\n[^4]: [Mdn Web Docs 'Falsy'](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n[^5]: [이일민(토비) '공부 방법에 대해서 질문드립니다.']https://www.inflearn.com/community/questions/763626\n"},{"excerpt":"1년을 기다렸다. 작년에 탈락할 때 'INFCON 2024는 꼭 간다.' 다짐했는데 인프런 워밍업 클럽 덕분에 다녀왔다.\n발표와 네트워킹 위주로 들은 백엔드 취업준비생의 후기를 공유한다. 발표 1. 이형주 외 2인 '인프랩의 도전: 글로벌 교육 플랫폼으로의 첫 발걸음' 인프랩이 어떤 길을 걸어왔고 어떤 생각을 가지고 있는지 대표님이신 형주님, CTO 동욱…","fields":{"slug":"/infcon-2024-review/"},"frontmatter":{"date":"August 17, 2024","title":"INFCON 2024 후기","tags":["행사"]},"rawMarkdownBody":"\n![INFCON 2024 선물](infcon-2024.avif)\n\n1년을 기다렸다. 작년에 탈락할 때 'INFCON 2024는 꼭 간다.' 다짐했는데 인프런 워밍업 클럽 덕분에 다녀왔다.\n발표와 네트워킹 위주로 들은 백엔드 취업준비생의 후기를 공유한다.\n\n## 발표\n\n### 1. 이형주 외 2인 '인프랩의 도전: 글로벌 교육 플랫폼으로의 첫 발걸음'\n\n인프랩이 어떤 길을 걸어왔고 어떤 생각을 가지고 있는지 대표님이신 형주님, CTO 동욱 님, 커뮤니티 리드 연의님께서 다양한 관점을 이야기해 주셨다.\n번역, 국제화도 기억에 남지만 특히 기억에 남았던 이야기는 '과제'다. 인프랩에서 이야기하는 '성장기회의 평등'을 추구하기 위해서 꼭 필요한 기능이라고 생각했다.\n\n이전에 스터디에서 태현 님의 피드백 덕분에 강의를 듣고 끝나는 것이 아닌 재밌게 성장한 경험이 있다. 다른 강의에서도 만나볼 수 있고 강의를 듣는 것에서 끝나는 것이 아닌\n활용까지 하는 기능을 제공한다는 점이 긍정적이다. 그런데 관리가 어려울 것 같은데 어떤 식으로 제공될지 조금 더 지켜봐야겠다.\n\n### 2. 김재민 '지속 성장 가능한 설계를 만들어가는 방법'\n\n가장 앞줄 중앙에 가서 재민님의 발표를 들었다. [Youtube(유튜브)](https://www.youtube.com/@geminikims)에서도 자주 뵀던 분이라 기대가 컸다.\n'설계'를 주제로 내용을 풀어주셨는데 경험이 적어서 초반은 이해하기 어려웠다. 그런데 코드와 함께 예시를 들어주시는 부분부터는 이해가 잘됐다.\n추가로 [강의](https://inf.run/RnztG)에서는 어떤 내용을 전달하고 계실지 궁금했다.\n\n### 3. 이동욱 '인프런 아키텍처 2024 ~ 2025'\n\n올해 두 번째 뵌 이동욱(향로)님. 앞서 인프랩의 여정을 모두가 이해할 수 있도록 해주셨다면 동욱 님께서는 조금 더 기술적인 이야기를 해주셨다.\n아키텍처를 어떻게 설계하고 변경하셨는지 그림과 예시가 적절해서 재밌었다. 특히 `avif` 확장자 도입과 `JSON CDN Caching` 이야기가 가장 기억에 남는다.\n\n> 블로그에 바로 `avif` 확장자를 도입했다. [GeekNews](https://news.hada.io/)를 흘려봤는데 조금 더 신경 써서 봐야겠다는 생각이 들었다.\n\n### 4. 조현우 '사이드 프로젝트로 커리어 레벨업!'\n\n짧은 시간에 내용이 농축되어 있는 좋은 발표였다. 점심 먹기 전에 시간 내어 들었는데 기억에 남았다.\n빠른 시간에 어떻게 사이드 프로젝트를 구현하셨고 어떤 어려움이 있었는지 공유해 주셨다. 특히 발표자분의 관심사를 어떻게 사이드 프로젝트로 녹여내셨는지 사례를 이야기해 주셔서 공감이 많이 됐다.\n\n> 도메인이 인터넷 방송이어서 더욱 재밌었다. 처음 뵀는데 그동안 어떤 행보를 보내셨는지 궁금했다.\n\n### 후기\n\n![펠리칸적 사고 \"일단 시도함\" <출처: X>](pelican-just-do-it.avif)\n\n오전에만 발표를 들었다. 발표에서 공통적으로 '일단 시도하라'라고 강조했다. 말은 쉽지만 행동으로 이어지기 어려운 것이 '도전'이라 생각한다.\n그럼에도 다시 돌아보고 다잡을 수 있는 이야기여서 좋았다.\n\n가장 인상 깊었던 발표는 마지막에 들었던 **조현우 님의 '사이드 프로젝트로 커리어 레벨업!'**이다.\n모두 훌륭하지만 바로 적용가능하고 필요한 내용이어서 인상 깊다. 발표가 마치 다듬어지지 않은 원석 같았다.\n\n## 네트워킹\n\n![감사합니다. 고맙습니다. 덕분입니다. <출처: 도박묵시록 카이지>](the-gambling-apocalypse-kaiji.avif)\n\n오후에는 네트워킹에 전념했다. 여러 사람들과 같은 공간에서 네트워킹 하는 경험은 처음이었다. 발표도 기대했던 만큼 좋았지만 네트워킹은 더욱 좋았다. (강조하신 이유가 있었다)\n\n> 만약 서포터즈분들의 도움이 없었다면 듣기만 했을 것 같다. 여러 고충도 많이 들었는데 감사드린다.\n\n백엔드 주제에서 주로 놀았는데, `Java/Spring` 개발자 분들이 역시 많았다. (의외로 `Go`도 많았다)\n선배 개발자의 문제를 만났던 경험과 해결 노하우를 들으니 즐거웠다. 놀다 보니 어둠 속의 한줄기 빛처럼 `Node.js` 경험을 공유하시는 분을 만났다. 너무 반가워서 조금 더 궁금했던 주제를 꺼냈다.\n\n* `Closure(클로저)`, `Prototype(프로토 타입)`, `NestJS 'Mapped types'`\n* 자료를 얻는 배경\n* 테스트를 어떻게 작성하는가\n\n그동안 혼자 정의했던 개념들에 대해 의견을 주고받을 수 있어서 너무 즐거웠다. 입이 풀려서 \"감사합니다. 고맙습니다. 덕분입니다\"를 연신 외치며 오랜 시간 대화를 나눴다.\n끝까지 듣고 의견을 전해주신 재호님과 인프랩 후니님께 다시 한번 감사드린다.\n\n어렸을 때 유명한 사람들을 많이 봐서 그런지 연예인, 인플루언서를 만나도 별 감흥 없었다. 결국 똑같은 '사람'이라는 인식이 강했다.\n그런데 INFCON에서 유명 개발자분들을 마주하니 달랐다. 유명세를 떠나 성장에 영향받은 기억이 남아서 색다른 감정이 들었다.\n특히 최근에 즐겨 듣는 강의[^1] 지식 공유자이신 박우빈 님과 예전부터 도움[^2] 받은 진유림 님을 뵀을 때 그랬다.\n이일민(토비)님도 2층에서 많이 뵀는데 10년 전에도 유명하셨던 분을 마주하니 장로님을 뵙는 것 같아 당황스러웠다. 당황하며 \"어??? 안녕하세요\" 인사드렸는데 받아주신 토비 님께 감사드린다.\n만약 내년에도 참여할 수 있다면 꼭 책에 사인받고 싶다.\n\n> 한 가지 아쉬운 점도 있다. QR코드 출력에 문제가 있어서 네트워킹에서 '랠릿 허브 이력서'를 공유할 수 없었다. 간단한 이력서였지만 네트워킹에 도움 되지 않았을까.\n> 그런데 영화관 티켓 판매기처럼 '단순한 출력 문제'가 아닐까 싶다. 조금 더 신경 쓰는 방법 말고 마땅한 해답이 떠오르지 않는다.\n\n## 마치며\n\n![누구나 그럴싸한 계획을 갖고 있다. 쳐 맞기 전까지는](mike-tyson.avif)\n\n계획에 빈틈이 없었다. [가이드](https://devmeeple.github.io/infcon-2024-guide/)도 다시 보고 시작부터 종료까지 발표를 들을 생각이었다. 그런데 실제로는 오전에 4개를 들은\n게 전부였다. (오히려 좋았다) 노트북을 들고 가야 할지 끝까지 고민했는데 안 들고 가길 잘했다.\n\n운영진과 스터디원을 만나서 재밌었다. 인프런 워밍업 클럽 덕분에 좋은 인연을 맺었다. 감사함을 전하고 싶은 분들이 많아서 작은 비타민을 챙겨 드렸는데 INFCON을 즐기는 '나만의 방법'[^3]이었다.\n\n'펠리컨적 사고'를 배웠지만 집으로 돌아와서 푹 쉬었다. 다음날에도, 또 다음날에도, 그렇게 2주 정도를 하는 둥 마는 둥 보냈다.\n색다른 시도[^4]를 하지 않았다면 후기도 작성하지 않고 넘어갔을 것 같다. 그래도 [이벤트](https://inf.run/38Va9) 막차가 끊기기 전에 탑승해서\n다행이다.\n\n많은 사람들이 지원하지만 아무나 올 수 없는 세미나. 참여에서 끝나지 않고 앞으로 어떤 변화가 일어날지 기대된다.\n\n[^1]: [박우빈 'Readable Code: 읽기 좋은 코드를 작성하는 사고법'](https://inf.run/kHiWM)\n[^2]: [정호영, 진유림 『팀 개발을 위한 Git, GitHub 시작하기』](https://product.kyobobook.co.kr/detail/S000202039327)\n[^3]: 어렸을 때 친구들 딱풀 챙겨주던 기억도 나서 반가웠다.\n[^4]: 자세한 이야기는 8월 회고에서 이어진다.\n"},{"excerpt":"IntelliJ IDEA 2024.2가 정식으로 출시됐다. 업데이트된 여러 기능 중 'TypeScript 파일을 직접 실행 및 디버그'가 가장 흥미로웠다. 바로 업데이트하고 실행했을 때 문제가 발생했다. 문제는  환경에서만 발생했다. 해결하기 위해서는 표준  인터프리터를 사용해야 한다. 는 Package Manager 도구 중 하나다. 여러  버전을 관리…","fields":{"slug":"/jetbrains-ideas-volta-error/"},"frontmatter":{"date":"August 15, 2024","title":"IntelliJ IDEA Volta 인터프리터 에러 해결하기","tags":["IDE"]},"rawMarkdownBody":"\nIntelliJ IDEA 2024.2가 정식으로 출시됐다. 업데이트된 여러 기능 중 'TypeScript 파일을 직접 실행 및 디버그'가 가장 흥미로웠다. 바로 업데이트하고 실행했을 때 문제가 발생했다.\n\n```shell \nnode:internal/modules/run_main:129\n    triggerUncaughtException(\n    ^\nError: tsx must be loaded with --import instead of --loader\nThe --loader flag was deprecated in Node v20.6.0 and v18.19.0\n``` \n\n문제는 `Volta` 환경에서만 발생했다. 해결하기 위해서는 표준 `Node.js` 인터프리터를 사용해야 한다.\n\n> `Volta`는 Package Manager 도구 중 하나다. 여러 `Node.js` 버전을 관리할 때 유용하다. `Volta` 외에도 `nvm`, `fnm`등이 있다.\n> Java에서 사용하는 `jenv`와 유사하다.\n\n## Volta 제거하기\n\n> macOS, zsh 환경에서 진행한다.\n\n1. `rm -rf ~/.volta`: 바이너리를 제거한다.\n\n```shell\nexport VOLTA_HOME=\"$HOME/.volta\"\nexport PATH=\"$VOLTA_HOME/bin:$PATH\"\n```\n\n2. `vim ~/.zshrc`: 위와 같은 환경 변수를 제거한다.\n3. `source ~/.zshrc`: 설정 파일을 다시 불러온다.\n4. `volta -v`: 삭제를 확인한다.\n\n## 기능 확인하기\n\n```typescript\nconst blog = '장태근블로그 devmeeple.github.io';\nconst thankYou = (blogName: string) => console.log(`${blogName} 클릭해주셔서 감사합니다.`);\n\nthankYou(blog);\n```\n\n제거를 마쳤다면, 간단한 프로그램으로 기능을 확인해 보자.\n\n![Thank You!](./thank-you-log.avif)\n\n업데이트가 성공하고 기능이 정상동작함을 확인할 수 있다.\n\n\n## 마치며\n\n`Volta`를 삭제하면 당장의 문제는 해결할 수 있다. 하지만 다양한 버전을 사용하기 위해서 다른 버전 관리자(Node Version Manager)를 고려해야겠다. 우선 급한 대로 `nvm`을 다시 사용 중이다.\n\n**<참고 자료>**\n\n* [IntelliJ IDEA 2024.2의 새로운 기능](https://www.jetbrains.com/ko-kr/idea/whatsnew/)\n* [YoTrack 'Volta Node interpreter version not correctly detected when running Typescript with\n  `tsx`'](https://youtrack.jetbrains.com/issue/WEB-67800/Volta-Node-interpreter-version-not-correctly-detected-when-running-Typescript-with-tsx)\n* [VOLTA 'Uninstalling Volta'](https://docs.volta.sh/advanced/uninstall)\n"},{"excerpt":"경찰서 믿기지 않는 상황이 펼쳐졌다. 새벽에 집을 나왔다. 골목길은 항상 더러웠다. 하지만 그날따라 깨끗했다.\n무엇 앤가 이끌린 듯 고개를 돌렸다. 돈이 떨어져 있었다. 가로등 아래 빛나는 황색 지폐는 흡사 금덩이 같았다.\n그런데 이게 무슨 일일까. 지폐가 아니라 돈다발이었다. 무려 500만 원이었다. 어이가 없었다. 일정을 미루고 경찰서로 몸을 돌렸다.…","fields":{"slug":"/retrospective-20240728/"},"frontmatter":{"date":"July 28, 2024","title":"2024 월간 장태근 7월호 '시퍼런 봄'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/8i-B1ieI_kY?si=VDSK-up06aLKIp7g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n## 경찰서\n\n믿기지 않는 상황이 펼쳐졌다. 새벽에 집을 나왔다. 골목길은 항상 더러웠다. 하지만 그날따라 깨끗했다.\n무엇 앤가 이끌린 듯 고개를 돌렸다. 돈이 떨어져 있었다. 가로등 아래 빛나는 황색 지폐는 흡사 금덩이 같았다.\n그런데 이게 무슨 일일까. 지폐가 아니라 돈다발이었다. 무려 500만 원이었다. 어이가 없었다.\n\n일정을 미루고 경찰서로 몸을 돌렸다. 새벽 4시 30분, 한적한 경찰서에 돈다발을 들고 등장했다. 경찰관 분들과 함께 놀랐다.\n\n신고를 마치고 집으로 돌아가는 길이 재밌었다. 돈에 허덕임에도 불구하고 한치의 망설임 없었다.\n당연히 해야 할 일을 한 거지만 스스로가 대견했다. 그리고 부모님께 감사했다.\n\n![돈다발은 사실 운명이었다 <출처: 네이버 오늘의 운세>](lucky-guy.png)\n\n## 함께 자라기\n\n![한국 마이크로소프트](microsoft.webp)\n\n특강부터 세미나까지, 다양한 활동에 참여했다. 퍼스널 브랜딩, 데이터베이스, 성장, 각기 다른 주제는 매력적으로 다가왔다. 하지만 활동으로 얻은 가장 큰 수확은 '회고'다.\n\n개발자를 포기하고 일했던 분야는 모두 '덕업일치'를 이뤘다. 어떻게 하면 생산성을 높일 수 있을지 고민하니 자연스레 다가왔다.\n반면 개발은 드디어 덕업일치를 이룬다고 생각했다. 하지만 아니었다. 이전에도 DEVIEW, 생활코딩 오프라인 수업 등 다양한 활동에 참여했다. 시켜서 하던 일이 아니었다.\n\n스터디에 참여하길 잘했다고 거듭 느꼈다. 함께 공부하라는 조언을 흔히 듣는다. 하지만 맞지 않는 옷 같았다. 주로 혼자 공부했다. 나에게 맞는 방법을 실행하고 수정하며 여러 애로사항을 겪었다.\n그러다 결국 '풀리지 않는 문제'라는 벽에 부딪혔다.\n\n기존의 방법에서 변화를 주고자 스터디에 참여했다. 돌이켜보면 적절했다. 덕분에 여러 기회를 얻었다. 생각하지 못했던 관점을 듣고 의견을 토로하는 과정이 즐겁다.\n\n## 도서관\n\n* [월리엄 진서 『글쓰기 생각쓰기』](https://product.kyobobook.co.kr/detail/S000001110694): '글쓰기 스테디 셀러' 글쓰기 종류와 형식을 설명하는 예제가 풍부하다. 하지만\n  번역이 매끄럽지 않다. 3.5/5\n\n## 마치며\n\n![아침에 눈을 뜨면 지난밤이 궁금해 오늘은 어떤 사건이 날 부를까 <출처: 명탐정 코난>](case-closed.webp)\n\n다양한 시도를 했다. 언어와 상관없이 '기본기'라고 이야기하는 여러 주제 중[^1] 테스트에 특히 집중했다. 테스트는 오랜 숙원이다. 의도와 다르게 발효된 테스트는 마치 묵은지 같았다.\n고약한 냄새가 날 지경이었다. 질문도 하고 책도 보고 다양한 시도를 했다. 명쾌하지 않았다.\n\n테스트 대역과 프레임워크에 어떻게 접목시키는지 궁금했다. 아무리 봐도 단위 테스트가 아니었고 생산성도 떨어졌다.\n그런데 역시 좋은 자료와 더불어 '백문이 불여일타' 직접 실행해야 한다.\n\n결국 기본기는 연결되어 있다. 테스트를 공부하면 자연스럽게 객체지향과 설계에 손이갔다.\n\n\"당신의 테스트 코드가 테스트하기 어려운 이유는 설계의 문제일 수 있다\" 관점이 충격적이었다. 기존의 생각과 학습 이후 변화를 글로 표현할 때다.\n\n\"아침에 눈을 뜨면 지난밤이 궁금해 오늘은 어떤 사건이 날 부를까\" 흡사 명탐정 코난 같다. 올해 중 유독 재밌는 한 달을 보냈다. 매 순간이 우당탕탕, 비틀비틀 짝짜꿍이었지만 내일이 기대됐다.\n지난달은 응급실, 이번달은 경찰서 다음 달은 어디로 떠나볼까. ~~회사로 보내주면 좋겠다.~~\n\n[^1]: OOP(Object-Oriented Programming: 객체지향 프로그래밍), 테스트, 아키텍처\n"},{"excerpt":"주니어 개발자를 대상으로 데이터베이스 운용 경험, 노하우를 공유한다.  7월 18일 목요일, 한빛앤에서 주최한 <데이터베이스 활용도 끌어올리기>에 다녀왔다. 마침 데이터베이스 관련 세미나가 열렸다. 우연히도 발표자분이 SNS에서 팔로우하고 있던 분이셨다.\n주제도 흥미롭고, 어떤 이야기를 하실지 궁금해서 참석했다. 1. 비즈니스와 아키텍쳐의 관계 비즈니스란…","fields":{"slug":"/boost-database-utilization/"},"frontmatter":{"date":"July 21, 2024","title":"한빛앤 MSA 데이터베이스 활용도 끌어올리기 후기","tags":["행사"]},"rawMarkdownBody":"\n> 주니어 개발자를 대상으로 데이터베이스 운용 경험, 노하우를 공유한다.\n\n![한빛앤 MSA 데이터베이스 활용도 끌어올리기 <출처: X(SNS)>](boost-database-utilization.jpeg)\n\n7월 18일 목요일, 한빛앤에서 주최한 <데이터베이스 활용도 끌어올리기>에 다녀왔다.\n\n마침 데이터베이스 관련 세미나가 열렸다. 우연히도 발표자분이 SNS에서 팔로우하고 있던 분이셨다.\n주제도 흥미롭고, 어떤 이야기를 하실지 궁금해서 참석했다.\n\n## 1. 비즈니스와 아키텍쳐의 관계\n\n비즈니스란 무엇일까. 비즈니스란 '해결해야 하는 문제'다. 소프트웨어 아키텍처는 비즈니스를 해결하기 위해서 포괄하는 시스템이다.\n흔히 아키텍처는 한 번 정해지면 바꿀 수 없다.\n\n그렇다면 어떻게 하면 비즈니스 정보를 빠르게 얻을 수 있을까. 가장 빠르게 정보를 얻는 방법은 '동료들과의 대화'다. 비즈니스가 어떻게 구현되어 왔고 어느 상황에 있는지 이해하는 시간을 충분히\n가지길 바란다.\n\n## 2. 실무 적응하기: 데이터베이스 지식, 어디까지 알아야 할까?\n\n가장 추천하는 방법은 동료와 '페어 프로그래밍(pair programming)'이다. 개인이 할 수 있는 최선은 '우선순위 정의하기'다.\n\n## 3. 도메인 모델 패턴과 트랜잭션 스크립트 패턴\n\n도메인 모델 패턴과 트랜잭션 스크립트 패턴에 자세한 내용은 책[^1]을 참고하자.\n\n도메인 모델 패턴을 잘못 사용하게 되면 오히려 독이 된다. 비용이 커지는 작업이기 때문에 가급적이면 구성원과 함께 모범 사례(Best Practice)를 학습, 도입하는 방법을 권장한다.\n\n## 4. 좋은 쿼리 작성하기\n\n'N+1 문제'[^2]에 대해 이야기하신 것 같다.\n\n## 5. 질문 & 답변\n\n### Q. SQL이 어렵습니다. 어떻게 쉽게 접근할 수 있나요?\n\n책과 펜을 쥐고 그림 그려보기를 추천한다.\n\n### Q. 서버 인프라를 어떻게 배울 수 있을까요?\n\n유튜브(YouTube), 기술문서 Hands-On Lab을 활용한다.\n\n### Q. 괜찮은 데이터베이스 관리 툴이 있나요?\n\n이전에 DBDiagram[^3]을 사용했다.\n\n### Q. 한 가지를 깊게 하는 방법과 여러 제품을 포괄적으로 학습하는 방법 중 어떤 방법이 좋을까요?\n\n자주 사용하는 데이터베이스로 API를 만들어보고 살을 붙이는 방법을 추천한다. 어떻게 설계할지를 자연스럽게 고민한다.\n\n### Q. 추천하시는 책이 있나요?\n\n필독! 개발자 온보딩 가이드[^4], 육각형 개발자: 시니어 개발자로 성장하기 위한 10가지 핵심 역량[^5]을 추천한다. 주니어 시니어 상관없이 읽기 괜찮은 책이다.\n\n## 마치며\n\n날씨가 좋지 않아서 발표가 지연됐다. 하마터면 어수선한 분위기로 진행될 뻔했다. 하지만 주최 측에서 현명하게 대처했다.\n한빛미디어 책을 추첨해서 나눠주셨다. ~~눈여겨보던 책을 얻지 못해서 아쉬웠다.~~\n\n\"주니어 개발자, 그대들은 어떻게 살 것인가\"\n\n경험을 공유해 주신 발표도 흥미로웠지만 발표를 마치고 진행된 '네트워킹'도 인상 깊었다. 오랜만에 참석이라 낯을 가렸는데 슬기님께서 먼저 다가와주셔서 감사했다.\n작년에 가장 재밌게 읽은 책을 슬기님께서도 흥미롭게 읽으신 것 같아서 반가웠다. 가볍게 담소를 나누고 다른 참가자 분들의 고민을 들었다.\n\n경험을 공유하고 나누는 방법은 '재밌게 성장할 수 있는 한 가지 방법'이라고 생각한다. 막연한 미래지만 하고 싶은 일이 무엇인지 확고하게 다졌다.\n\n**<참고 자료>**\n\n- [Festa '한빛앤 MSA #2-8 데이터베이스 활용도 끌어올리기'](https://festa.io/events/5523)\n\n[^1]: [마틴 파울러 『엔터프라이즈 애플리케이션 아키텍처 패턴』](https://product.kyobobook.co.kr/detail/S000001766248)\n[^2]: [향로 'JPA N+1 문제 및 해결방안'](https://jojoldu.tistory.com/165)\n[^3]: [DBDiagram](https://dbdiagram.io/home)\n[^4]: [크리스 리코미니, 드미트리 리아보이 『필독! 개발자 온보딩 가이드』](https://product.kyobobook.co.kr/detail/S000202318866)\n[^5]: [최범균 『육각형 개발자: 시니어 개발자로 성장하기 위한 10가지 핵심 역량』](https://product.kyobobook.co.kr/detail/S000203107475)\n"},{"excerpt":"이 글은 인프런 라이브 방송과 인프콘 2024 공식 사이트를 기준으로 작성되었다. (2024. 07. 03)  들어가며 인프콘(INFCON)은 인프런에서 주관하는 IT 콘퍼런스로, 2024년 8월 2일 금요일 코엑스에서 열린다. '우주'를 테마로 총 48개의 발표가 준비되어 있다. 무엇이 달라졌나요? 다양한 직무를 대상으로 진행된다. 딥다이브 세션이 추가…","fields":{"slug":"/infcon-2024-guide/"},"frontmatter":{"date":"July 03, 2024","title":"INFCON 2024 가이드","tags":["행사"]},"rawMarkdownBody":"\n> 이 글은 인프런 라이브 방송과 인프콘 2024 공식 사이트를 기준으로 작성되었다. (2024. 07. 03)\n\n![출처: 인프런 <INFCON 2024>](infcon-2024.png)\n\n## 들어가며\n\n**인프콘(INFCON)은 인프런에서 주관하는 IT 콘퍼런스로, 2024년 8월 2일 금요일 코엑스에서 열린다.**\n\n'우주'를 테마로 총 48개의 발표가 준비되어 있다.\n\n### 무엇이 달라졌나요?\n\n- 다양한 직무[^1]를 대상으로 진행된다.\n- 딥다이브 세션[^2]이 추가됐다.\n\n### 알아두면 유용한 정보\n\n- 다양한 [이벤트](https://www.inflearn.com/conf/infcon-2024/info/event/)가 진행된다. 특히 스탬프 투어를 완료하면 한정판 굿즈를 받을 수 있다.\n- 'MY 인프콘' 기능 활용을 권장한다.\n    - 랠릿 이력서 연결: 네트워킹 파티에 참여하기 위해서 필수\n        - 이력서 허브 등록은 이름, 연락처만 작성해도 등록가능하다.\n    - 다양한 시간에 발표가 진행되므로 '나만의 시간표 만들기'(개인 시간표) 활용을 권장한다.\n- 1층(그랜드볼룸)\n    - 등록과 발표가 진행된다.\n    - 인프런존에 포토존이 추가됐다.\n    - 네트워킹 파티 사전 등록을 받는다.\n    - 12개의 기업부스가 운영되고 다양한 선물을 제공한다.\n- 2층(아셈볼룸)\n    - 프로그램(딥다이브)이 진행된다.\n    - 커뮤니티 부스, 발표 질의응답, 인프런 이벤트존&라이트닝, 네트워킹 파티가 진행된다.\n\n## 인프런이 추천하는 직무별 추천발표\n\n### 시작\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/912/\" target=\"_blank\">인프랩 '인프랩의 도전: 글로벌 교육 플랫폼으로의 첫\n  발걸음'</a>\n\n### 백엔드\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/877/\" target=\"_blank\">김재민 '지속 성장 가능한 설계를 만들어가는 방법'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/880/\" target=\"_blank\">이일민(토비) '클린 스프링: 스프링 개발자를 위한 클린코드\n  전략'</a>\n\n### DevOps\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/874/\" target=\"_blank\">심호진 '지난 4년간 6번의 무진장 행사를 통해 성장한\n  DevOps 이야기'</a>\n\n### 프론트엔드\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/871/\" target=\"_blank\">하조은 'Next.js 블로그 모범 사례 탐구: Vercel\n  리더십 블로그 아키텍처 파헤치기'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/866/\" target=\"_blank\">유인동 '멀티패러다임 프로그래밍 언어의 시대 - 객체지향과\n  함수형을 섞어야할 때!'</a>\n    - 라이브코딩 진행예정\n\n### 디자인\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/891/\" target=\"_blank\">강영화 '10년 동안의 실패 이야기: 실패를 의미있는 일로\n  탈바꿈하는 가장 쉬운 방법'</a>\n\n### PM/PO\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/899/\" target=\"_blank\">김영재 '성장하지 않아도 괜찮습니다'</a>\n\n### 패널토크[^3]\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/905/\" target=\"_blank\">원티드랩 패널토크 '디자인 시스템의 명과 암'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/904/\" target=\"_blank\">인프랩 패널토크 '목적 조직 구조 안에서 개발팀이 일하는\n  법'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/901/\" target=\"_blank\">딜라이트룸 패널토크 '소수 인원으로 글로벌 1위 앱 서비스를\n  만든 비결'</a>\n\n## 질문 & 답변\n\n### Q. 작년 경쟁률은 어땠나요? 몇 명을 뽑나요?\n\n이전에 진행된 1, 2회의 경우 7대 1, 8대 1의 경쟁률을 기록했다. 최대 수용인원은 1800 ~ 2000명이다.\n\n### Q. 환불은 어떻게 진행되나요?\n\n추첨 선정자에 한해 참가권이 지급된다. 미선정자는 자동 환불 진행된다.\n\n### Q. 모든 발표에 의자와 책상이 제공되나요?\n\n의자는 모든 발표에 제공된다. 하지만 많은 인원을 수용하기 위해 2층에서 진행되는 딥다이브 프로그램만 책상이 제공된다.\n\n### Q. 발표 진행 중, 이동이 가능한가요?\n\n가능하다. 다만, 발표 분위기를 위해 문은 닫아둘 예정이다.\n\n### Q. 특정 발표에 인원이 몰리면 어떻게 하나요?\n\n안전문제로 수용에 제한이 생길 수 있다. 다만, 흔하지 않다.\n\n### Q. 대학생도 네트워킹에 참가할 수 있을까요?\n\n현장에 팀원, 서포터의 도움으로 무리 없이 참가가능하다.\n\n### Q. 발표자료는 공유되나요?\n\n발표자료는 발표자의 동의를 받고 있다. 동의된 자료와 영상은 인프런에서 강의형태로 공유될 예정이다.\n\n### Q. 인프콘 영상 업로드 되나요?\n\n인프런에 우선 올라가고, 유튜브는 추후 올라갈 예정이다.\n\n## 마치며\n\n참가신청은 [인프런](https://inf.run/NgR9K)에서 가능하다. 경쟁률이 아찔하지만 성장에 목마른 사람들을 만날 수 있는 축제의 장에 참가해 보자.\n\n- [MY 인프콘](https://www.inflearn.com/conf/infcon-2024/share?year=2024&id=1148697&hash=devmeeple%40e53018af&name=%EB%AF%B8%ED%94%8C)\n\n## 참고\n\n- [INFCON 2024 공식 페이지](https://www.inflearn.com/conf/infcon-2024/)\n- [유튜브 'INFCON 2024 즐기기 라이브 방송'](https://www.youtube.com/live/BICZOyzv7_0?si=POGyjIAPF2keDJyb)\n\n[^1]: 개발자, PM/PO, 프로덕트 디자이너 등\n[^2]: 소수 인원이 주제를 밀도 있게 깊이 있는 지식과 경험을 나눌 수 있는 특별한 시간\n[^3]: 제품(Product)을 만들기 위해 여러 직군이 모여서 나누는 시간\n"},{"excerpt":"웃으며 지내다 결국 쓰러졌다. 다시 한번 겸손에 대해 생각했다. 예정에 없던 손님이 방문해서 고충이 이만저만이 아니었다. 그래도 호기심으로 시작해서 성찰까지 이어지는 한 달을 보냈다. 응급실  응급실에 다녀왔다. 몸이 좋지 않았다. 웬만하면 통증을 참는데 몸이 심상치 않았다. 동네병원에서 응급실로 이동했다. 황급히 도착한 응급실은 대기, 진료, 의료진분들…","fields":{"slug":"/retrospective-20240630/"},"frontmatter":{"date":"June 30, 2024","title":"2024 월간 장태근 6월호 'Stop Crying Your Heart Out'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/dhZUsNJ-LQU?si=lLxvUqTK1gvnEVA8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n**웃으며 지내다 결국 쓰러졌다.** 다시 한번 겸손에 대해 생각했다. 예정에 없던 손님이 방문해서 고충이 이만저만이 아니었다. 그래도 호기심으로 시작해서 성찰까지 이어지는 한 달을 보냈다.\n\n## 응급실\n\n![불-편 <출처: 개비스콘>](gaviscon.webp)\n\n응급실에 다녀왔다. 몸이 좋지 않았다. 웬만하면 통증을 참는데 몸이 심상치 않았다.\n\n동네병원에서 응급실로 이동했다. 황급히 도착한 응급실은 대기, 진료, 의료진분들의 모습까지 모두 낯설었다. 몸은 불편했지만 정신은 차릴 수 있었는데 시간이 갈수록 정신이 분열됐다.\n\n**'이곳은 어디, 나는 누구인가?'**\n\n식은땀을 흘리며 병상에서 대기하는 모습이 이질적으로 느껴졌다. 불안이 영혼을 잠식하는 과정을 보니 불안했다. 억지로 잠들었다.\n\n오랜 대기와 진료(총 8시간) 끝에 큰 문제는 발견되지 않았다. 다행히, 약과 함께라면 일상생활에 문제가 없었다. 하지만 유지하던 습관(운동, 개발)은 변화가 필요했다. 달리지 못하고 오랜\n시간 앉아 있을 수 없다는 사실은 고역이었다. 다행인 건 독서로 대체됐다. 미뤄왔던 책을 읽으며 '글쓰기'로 관심을 돌렸다.\n\n## 책책책! 책을 읽읍시다\n\n![<출처: MBC 느낌표 ｢책책책! 책을 읽읍시다｣>](exclamation-mark.jpeg)\n\n몸이 좋지 않은 덕분에 미뤄왔던 책을 읽었다. 특히 기술이 아닌 일반도서를 주로 읽었다.\n\n이전에 책을 선택할 때는 기준이 없었다. 남들이 추천하는 \"OOO 선정 100선\"을 주로 선택했다. 하지만 계속 책을\n읽다 보니 나만의 기준이 생겼다. (물론, 기술과 일반에 따라 다르다.)\n\n### 1. 호기심\n\n- 기술: 구현과 결과, 반복하여 나오는 키워드, 오랜 시간 품어도 해결되지 않은 내용,\n    - 예) 데이터베이스, 일급객체, NestJS, 리팩터링\n- 일반: 인간관계, 인물\n    - 예) 상대방 또는 유명인물의 사고방식\n\n### 2. 휴대성\n\n- 앉아서 읽기: 기술\n- 이동 중 읽기: 주로 일반서, O'Reilly Media는 예외\n\n## 블로그 일주일 1포스팅 챌린지\n\n스터디가 흥미롭다. 인프런 워밍업 클럽이 종료되고 뜻이 맞는 러너(참가자)들이 모여 매주 시간을 보낸다. 5번밖에 진행되지 않았지만, 체감은 10회 이상 진행된 스터디 같다.\n\n스터디는 한 주간 공부한 내용을 정리해서 포스팅하며 진행된다. 관심사와 관점이 다양하다고 여러 번 느꼈다. 객체지향 프로그래밍, AI, 쿠키, 테스트에 관해 이야기했던 시간이 가장 기억에 남는다.\n\n**삶에서 가장 큰 재미를 느낄 때는 의견교환이다.** 스터디에 참여하길 잘했다는 생각이 든다. 선입견을 가졌었는데 긍정적인 방향으로 흘러가고 있다. 같은 관심사를 가진 사람들이 모여 함께 자라는 느낌을 받아서\n즐겁다.\n\n어떻게 하면 더욱 활성화될 수 있을까에 대해 고민한 적이 있는데 같은 고민을 하신 분이 계셔서 반가웠다. 포스팅을 하며 생각을 정리하고, 여러 관점도 접하고 일거양득이다.\n\n## 마치며\n\n건강의 중요성에 대해 한번 더 생각했다. 통증 덕분에 평소에 고민하지 않던 내용도 고민한 건 좋았지만, 불편한 건 부정할 수 없었다. 평소에 최대한 긍정적으로 사고하려 의식하는데, 몸이 좋지 않으니 어려웠다. 하고\n싶어서 계속 즐거워하며 하던 일에도 부담을 느꼈다. 그럼에도 다행인 건 지금은 많이 호전됐다.\n\n**\"컴포트존(Comfort Zone)에서 벗어나자.\"**\n\n다음을 위해서는 결국 도전을 해야 한다는 사실을 알면서도 컴포트존에 머무르고 있었다. 미지의 세계가 두렵고, 부담되지만 이겨내야 한다. 도전하기 좋은 적기다.\n"},{"excerpt":"이번장에서는 DML에 해당되는 INSERT, DELETE, UPDATE를 배우고 논리삭제와 물리삭제의 차이를 다룬다. 추가하기 - INSERT INSERT는 데이터를 추가할 때 사용한다. 예를 들어 회원가입, 상품추가등에 사용된다. 이전에 배운 SELECT는 서버에서 데이터를 조회하고 결과를 반환했다. (서버 -> 클라이언트) INSERT는 클라이언트에서…","fields":{"slug":"/sql-first-step-4/"},"frontmatter":{"date":"June 13, 2024","title":"[SQL 첫걸음] 4장. 데이터 추가, 삭제, 갱신","tags":["Database"]},"rawMarkdownBody":"\n이번장에서는 DML에 해당되는 INSERT, DELETE, UPDATE를 배우고 논리삭제와 물리삭제의 차이를 다룬다.\n\n## 추가하기 - INSERT\n\n```sql\nINSERT INTO 테이블명\nVALUES (값1, 값2, ...)\n```\n\nINSERT는 데이터를 추가할 때 사용한다. 예를 들어 회원가입, 상품추가등에 사용된다.\n\n- 이전에 배운 SELECT는 서버에서 데이터를 조회하고 결과를 반환했다. (서버 -> 클라이언트)\n- INSERT는 클라이언트에서 서버로 전송되므로 결과를 반환받지 않는다.\n\n데이터를 추가할 때 전체 열에 값을 추가할수도 있지만 열을 지정할 수도 있다.\n\n```sql\nINSERT INTO 테이블명 (열1, 열2, ...)\nVALUES (값1, 값2, ...)\n```\n\n데이터를 추가할 때 몇 가지 주의점이 있다.\n\n1. 해당 열의 데이터 형식에 맞는 값을 지정한다.\n2. 제약조건(DEFAULT, NOT NULL 등)\n\n> 앞서 여러 번 다뤘지만 NULL을 다룰 땐 특별히 주의가 필요하다.\n\n## 삭제하기 - DELETE\n\n```sql\nDELETE\nFROM 테이블명\nWHERE 조건식\n```\n\nDELETE는 데이터를 삭제한다. 조건식은 생략이 가능한데 생략 시 모든 행을 대상으로 동작한다. 만약 운영 중인 서비스에서 고객의 데이터 전체를 삭제하면 어떨까? 상상만 해도 등골이 오싹해진다.\n따라서 의도한 데이터만 삭제할 수 있도록 조건식 지정을 습관화하자.\n\n## 갱신하기 - UPDATE\n\n```sql\nUPDATE 테이블명\nSET 열1 = 값1,\n    열2 = 값2, ...WHERE 조건식\n```\n\nUPDATE는 데이터를 갱신할 때 사용한다. 앞서 다룬 DELETE처럼 조건식 생략이 가능하다. 하지만 모든 행이 갱신된다.\n\n> DELETE, UPDATE와 같은 데이터 수정 작업은 더욱 주의가 필요하다. 의도에 맞게 동작할 수 있도록 명령을 작성하자.\n\n## 물리삭제와 논리삭제\n\n물리삭제와 논리삭제는 데이터를 삭제하는 2가지 방법을 의미한다. 정답이 없고 비즈니스 요구사항에 맞춰 상황에 따라 선택해야 한다.\n\n### 물리삭제(Hard delete)\n\n- DELETE 명령을 사용해 데이터를 완전히 삭제한다.\n\n### 논리삭제(Soft delete)\n\n- 데이터가 삭제된 것처럼 표시하는 삭제 방법\n- 실제 데이터를 삭제하지 않고 삭제 플래그를 추가하여 상태를 변경한다.\n- 휴지통을 예시로 생각하면 편하다. 삭제한 파일이 휴지통으로 가고 완전히 삭제하면 복구할 수 없다.\n\n## 마치며\n\n논리삭제와, 물리삭제의 개념을 정리할 때 어려웠다. 책에서 설명하는 개념 외에 어떤 표현을 사용해야 이후에 자료를 접해도 기억할 수 있을까라는 관점에서 의문이 들었다. 그런데 파일 삭제를 예시로 떠올리니 쉽게\n이해할 수 있었다.\n\n- 논리삭제: 삭제한 파일은 휴지통으로 간다. (플래그를 수정한다)\n- 물리삭제: 휴지통에 보관된 파일을 삭제하여 완전히 삭제한다.\n\n물론 물리삭제와, 논리삭제가 데이터베이스에서 학습한 개념이기에 적절한 예제가 아닐 수 있다. 파일의 상태가 클라이언트에게 보여도 괜찮은가라는 의문이 있었는데 논리삭제의 개념과 빗대어 생각해 봤을 때 별다른 문제가\n없었다. 이렇게 이해가 잘 되지 않을 땐 일상의 개념과 접목해서 연상하는 것도 괜찮은 방법이라고 느껴 재밌었다.\n"},{"excerpt":"알고리즘에 들어온 허준이 교수의 영상은 흥미로웠다. 이어서 세계적인 수학자는 어떤 생각을 할까라는 질문을 가지고 인터뷰까지 읽었다. 추천하는 책이 많았지만 수학자라는 직업을 선택하는데\n도움 되었다는 부분에 이끌렸다. ―수학자가 되기로 결심한 계기는 무엇인가. “학부 마지막 학기 때, 서울대 석좌교수로 초빙된 일본의 세계적인 수학자이자 1970년 필즈상 수…","fields":{"slug":"/joy-of-learning/"},"frontmatter":{"date":"June 12, 2024","title":"학문의 즐거움","tags":["독서"]},"rawMarkdownBody":"\n![히로나카 헤이스케, 《학문의 즐거움》, 방승양 번역, 김영사, 2013](./images/joy-of-learning.jpg)\n\n알고리즘에 들어온 허준이 교수의 영상은 흥미로웠다. 이어서 세계적인 수학자는 어떤 생각을 할까라는 질문을 가지고 인터뷰까지 읽었다. 추천하는 책이 많았지만 수학자라는 직업을 선택하는데\n도움 되었다는 부분에 이끌렸다.\n\n> ―수학자가 되기로 결심한 계기는 무엇인가.\n>\n> “학부 마지막 학기 때, 서울대 석좌교수로 초빙된 일본의 세계적인 수학자이자 1970년 필즈상 수상자인 히로나카 헤이스케의 수업을 들으면서 수학자가 되기로 결심했다. 중학교 때 히로나카 교수님이 쓴 ‘학문의\n> 즐거움’이란 책을 인상 깊게 읽었다. 교수님의 권유로 서울대 수학과 석사과정에 들어갔다.”\n\n- '산다'는 것은 자기 스스로 벌어서 자기의 힘으로 살아가는 것이다. 누구에게도 의존하지 않고 자기 혼자의 힘으로 살아가기 위해서는,\n  남들이 어떻게 생각할까 또는 남에게 어떻게 보일까 등에 신경 쓸 여유가 없다.(32쪽)\n- 내가 논물을 쓸 수 없었던 이유도 이것과 비슷하다. 그러나 논문을 씀으로써 자기의 이론을 창조해 가지 않으면 수학자로의 길이 막힌다. 써야 하나, 쓰지 말아야 하나? 나는 계속 고민했다. (85쪽)\n- 2년 동안이나 연구해 온 수학 이론이 젊은 학자에 의하여 풀렸다는 사실은 큰 충격이었다. 왜냐하면 '상대가 안된다'고 체념하고 '나는 바보니까'라고 자세를 바로 잡았기 때문이다. 그렇게 생각을 바꾸고 긍정적으로\n  생각하지 않으면 다음의 새로운 문제에 손댈 수 없으며, 더 나아가서 새로운 창조의 여행을 떠날 수 없다. (106쪽)\n- 소박한 마음을 잃지 않는 것, 그것이야말로 창조의 기반이 아닐까? 소심심고(素心深考) (108쪽)\n- 둘째는, 욕망이 창조에 필요한 것은 두말 할 필요도 없지만, 어디까지나 자기 내부에서 생긴 것이 아니면 안 된다는 것을 뼈저리게 느꼈다. (177쪽)\n- 나는 남보다 두 배의 시간을 들이는 것을 신조로 하고 있다. 그리고 끝까지 해내는 끈기를 의식적으로 키워 왔다. 끝까지 해내지 않으면 그 과정이 아무리 우수하더라도 결과가 생겨날 수 없기 때문이다. 아무리 두뇌가\n  우수하더라도 업적을 쌓지 않으면 수학자라고 말할 자격이 없다. (187쪽)\n\n## 마치며\n\n5월 인프런 워밍업 클럽 스터디가 막바지에 다 달았을 때 읽기 시작했고 이틀이 채 걸리지 않았다. 문장이 간단명료해서 쉽고 몰입력 있었다. 물론 수학 이론을 근거로 저자의 생각을 풀어내는 부분은 이해가 잘 되지\n않았다.\n\n가장 좋았던 점은 기존의 생각을 견고히 할 수 있었다. 책을 읽기 전부터 꾸준함과 동기에 대해 여러 번 고민했다. 꾸준함을 얻기 위해서는 외부에서 주입하는 동기가 아닌 내면의 소리를 듣고 본인만의 동기를 찾아야\n한다고 거듭 생각했는데 저자도 비슷한 생각을 하는 것 같아 반가웠다.\n\n또 제목만 봤을 땐 학문이라는 어렵고 따분한 주제로 이야기를 풀어갈 것 같지만 전혀 그렇지 않다. 가장 많이 이야기하는 주제는 \"창조\"인데 남녀노소 불문하고 추천하고 싶은 내용이었다. 특히 개발자를 준비하는\n나에게 와닿았고 개발자를 고민하는 다른 사람이 있다면 추천하고 싶다.\n\n나는 만족스럽게 읽었지만 비판적인 의견도 있었다.\n\n- 저자는 본인이 천재가 아니라고 이야기하지만 결국 천재들의 이야기다.\n- 일반인이 읽기에는 부담스럽고 기대에 미치지 못한다.\n\n받아들이기 나름이라고 생각한다. 천재라서 이렇게 할 수 있다기보단 이렇게 문제를 바라보고 해결하는 사람도 있구나라는 시각으로 읽었을 때 괜찮았다. 그리고 사람에 따라 어렵다고 생각할 수 있을 것 같다. (특히\n초반)\n\n> 수학은 인문학이라고 생각합니다. 천문학, 물리학 등은 자연이 만든 대상을 연구하는데 수학은 사람이 만들어 낸 걸 연구해요. 그런 면에서 철학, 문학과 오히려 결이 비슷하죠.\n\n끝으로 왜 배워야 하는가라는 근본적인 질문에 답하고 지혜를 얻을 수 있는 책이었다. 완독을 마쳤을 때, CS(Computer science)가 더욱 궁금해졌다.\n\n- [학문의 즐거움 추천 인터뷰 전문](https://www.donga.com/news/Economy/article/all/20220706/114308959/1)\n- [수학은 인문학이라고 생각합니다 인터뷰 전문](https://www.chosun.com/national/weekend/2022/01/01/ASP3UHRZTBD3VC7XN3LGQCIS2A/)\n"},{"excerpt":"매일 회고를 작성하며 나를 돌아본다. 일일회고를 모아 월간회고를 작성할 때 불편함을 겪어 간단한 서비스를 만들고 있다. 서비스를 개발하며 글은 쌓일텐데 항상 전체 데이터를 가져오는건 비효율적이지 않을까라는 접근으로 페이지네이션을 구현했다. 알고보니 페이지네이션도 다양한 선택지가 있었다. (Offset , No Offset)  오늘 이 시간에는 흔하게 접할…","fields":{"slug":"/sql-first-step-3/"},"frontmatter":{"date":"June 09, 2024","title":"[SQL 첫걸음] 3장. 정렬과 연산","tags":["Database"]},"rawMarkdownBody":"\n매일 회고를 작성하며 나를 돌아본다. 일일회고를 모아 월간회고를 작성할 때 불편함을 겪어 간단한 서비스를 만들고 있다.\n\n서비스를 개발하며 글은 쌓일텐데 항상 전체 데이터를 가져오는건 비효율적이지 않을까라는 접근으로 페이지네이션을 구현했다. 알고보니 페이지네이션도 다양한 선택지가 있었다. (Offset , No Offset)\n\n![인프런 질문 & 답변](images/offset-pagination.png)\n\n오늘 이 시간에는 흔하게 접할 수 있는 Offset 기반의 페이지네이션 구현에 필요한 기본적인 정보와 제공되는 함수에 대해 알아보자.\n\n## 정렬 - ORDER BY\n\n```sql\nSELECT 열명\nFROM 테이블명\nWHERE 조건식\nORDER BY 열명;\n```\n\n- ORDER BY는 검색 결과의 행 순서를 바꾸는 데 사용된다.\n- 테이블에 저장된 데이터의 순서를 바꾸지 않는다.\n- 지정하는 열명을 기준으로 정렬한다.\n- 기본은 오름차순(ASC)이고, 내림차순은 DESC 키워드를 사용한다.\n- 가능한 정렬 방법을 생략하지 않고 지정하는 방법을 권장한다.\n\n```sql\nSELECT 열명\nFROM 테이블명\nWHERE 조건식\nORDER BY 열명1, 열명2;\n```\n\n- 복수의 열을 지정하여 정렬할 수 있다.\n- **NULL 값의 정렬순서는 DBMS마다 다르다. MySQL은 NULL 값이 가장 작은 값으로 취급한다.**\n\n> 예를 들어 작성된 최신글을 조회할 때 ORDER BY 열명 DESC를 사용한다.\n\n## 결과 행 제한하기 - LIMIT & OFFSET\n\n```sql\nSELECT 열명\nFROM 테이블명 LIMIT 행수\nOFFSET 위치;\n```\n\n- 결과로 반환되는 행 수를 제한하는 데 사용한다.\n- LIMIT 구는 표준 SQL이 아니다. MySQL, PostgreSQL에서 사용할 수 있다.\n- OFFSET 구는 시작 위치를 지정한다.\n\n## 페이지네이션\n\n예를 들어 글 테이블에서 작성날짜를 기준으로 최신글을 조회하면 다음과 같이 작성할 수 있다.\n\n```sql\nSELECT *\nFROM posts\nORDER BY created_at DESC LIMIT 10\nOFFSET 20;\n```\n\n> 21번째 행부터 30번째 행까지 10개의 행을 가져온다.\n\n## 마치며\n\n![김연아 - 무슨 생각을 해... 그냥 하는거지](images/kim-yuna.jpeg)\n\n1년 전이 떠오른다. 팀 프로젝트에서 데이터베이스 관련 작업은 도움이 되지 못했다. 테이블 설계와 SQL에 대해 전혀 몰랐고, 페이지네이션도 자료를 보며 겨우 구현했다.\n\n프로젝트가 끝나고 페이지네이션에 대해 더 많은 자료를 찾아봤지만 의문은 풀리지 않았다. 돌이켜보면 기본기가 부족했다. (물론 아직도 부족하지만)\n\n아무리 봐도 이해되지 않는 부분들이 있었는데 오랜만에 책을 다시 읽으니 의문들이 풀려있었다. 잘 모르지만 일단 해보자라는 접근이 빛을 발하는 순간이다. 처음에는 이해되지 않아도 여러 번 반복해서 읽으니 이해됐다. (\n백문이 불여일타)\n\n오랜만에 페이지네이션 기본기를 정리하며 기초체력에 대해 한 번 더 돌아보는 시간을 가져 반가웠다.\n"},{"excerpt":"지난 4월 말부터 5월의 마지막날까지 한 달의 여정이 끝났다. 앞선 글에서 짧은 후기를 남겼다면 이번글에서는 전체적인 상세후기를 다룬다. 서론 스터디 참석 후기를 공유하기 전, 나를 먼저 소개하자면 개발자를 준비한 지 1년 됐다. 특성화고를 졸업한 반전공자다. 국비교육(자바 웹 개발 & AI)으로 다시 시작했고\n6개월 과정이 종료된 후에는 독학 중이다. …","fields":{"slug":"/inflearn-warmup-club-1-240531/"},"frontmatter":{"date":"June 01, 2024","title":"인프런 워밍업 클럽 스터디 1기 후기","tags":["스터디","인프런","인프런워밍업클럽","스터디1기"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 스터디 백엔드 1기](../images/inflearn-warmup-club-study.png)\n\n지난 4월 말부터 5월의 마지막날까지 한 달의 여정이 끝났다. 앞선 글에서 짧은 후기를 남겼다면 이번글에서는 전체적인 상세후기를 다룬다.\n\n## 서론\n\n스터디 참석 후기를 공유하기 전, 나를 먼저 소개하자면 개발자를 준비한 지 1년 됐다. 특성화고를 졸업한 반전공자다. 국비교육(자바 웹 개발 & AI)으로 다시 시작했고\n6개월 과정이 종료된 후에는 독학 중이다. (취업준비생) 스터디 참여를 결정하기 전 끊임없이 고민했다. 고민했던 이유는 크게 3가지다.\n\n- Java & Spring\n- 의문과 반감\n- 비용\n\n### Java & Spring\n\n국비교육에서 Java & Spring을 간단하게 배우고 [김영한 님 강의](https://www.inflearn.com/courses?s=%EA%B9%80%EC%98%81%ED%95%9C)도 짧게 봤었지만 현재는\n주로 사용하고 있지 않다. 또한 깊게 다뤄본 적이 없다.\n\n### 의문과 반감\n\n이전에 참여했던 스터디에서 선입견이 생겼다. 발표형식과 프로젝트형식을 참여했는데 부정적인 감정이 더 컸다. 형식과 상관없이 편차가 컸고 중도 이탈이 많았다. 스터디의 성공과\n실패에 상관없이(기준도 애매하지만) 함께 문제를 해결하는 느낌을 기대했던 나로선 아쉬움이 컸다.\n\n### 비용\n\n물론 인프런에서 깜짝 할인 쿠폰을 제공해 주신다. (백엔드 30%) 하지만 소득이 없는 나에겐 이마저 부담스러웠다. 입소문을 듣고 이미 장바구니에 있던 최태현 님의 강의였지만 그럼에도 심사숙고할 필요가 있었다.\n\n하지만 고민 끝에 참여를 결정했다. Java & Spring 문제는 단순했다. 다른 언어, 프레임워크를 배울 때도 자연스럽게 Java & Spring 키워드로 검색해서 좋은 자료를 접했다. 그리고 돌아가는 길이\n아닐까 고민도 했지만 언어와 프레임워크 상관없이 좋은 개발자에 대해 배울 수 있을 것 같았다. 선입견을 깨고 도전해 보자는 가벼운 마음으로 시작했다.\n\n## 수료식\n\n![수료식](./images/completion-ceremony.jpeg)\n\n오프라인 수료식에 참여했다. 수료식은 네트워킹, 시상식, Q&A 순서로 진행됐다.\n\n### 네트워킹\n\n호기롭게 판교에 도착한 지 10시간이 지나 초췌한 모습으로 인프랩에 도착했다. 이미 도착하신 두 분이 계셨고 자연스럽게 합석했다. 처음 뵀지만 낯설지 않았다. 온라인으로 다른 러너, 서포터즈분들의 관점을 배워서\n낯익었다. 심지어 어디서 뵌듯한 느낌이 들어서 조심스럽게 여쭤봤는데 [김영한 님 밋업 행사](https://devmeeple.github.io/2024-02/)에서 마주친 분들이 많으셨다. 몹시 반가워서 편하게\n대화를 나눴다.\n\n서포터즈중에 현직자분들도 계셔서 직장생활 후기도 들을 수 있었고, 취업준비생들의 고민, 그리고 대학생분의 이야기도 들을 수 있어서 재밌었다.\n\n### 시상식\n\n내색하지 않았지만 모두가 주목하던 시상식이 시작됐다. 셰리 님께서 인프런 워밍업 클럽이 시작하게 된 방향성을 먼저 소개해주셔서 감사했다. 개인적으로 궁금했던 내용이기 때문에 말씀해주시지 않았다면 직접 여쭤봤을 것\n같다.\n\n이어서 코치님들(최태현, John Ann, 볼드님)의 간단한 소개와 후기가 이어졌다. 온라인으로 뵙고 오프라인으로 처음 뵀는데 정말 똑같으셨다. 이어서 시상식이 이어졌는데, 운 좋게 우수러너에 선정됐다. 시상식을\n진행하며 서포터즈분들께서 장난을 치셔서 괜히 기대를 했다 안되면 어떻게 하지 걱정을 했는데 다행이다. 좋았지만 괜히 쑥스러웠다. 참석하신 분들의 축하를 받으며 앞에 나가 상품을 받았다. 수상을 하지 않았더라도\n이미 배운 점이 많아서 감사했는데 더욱 모든 분들께 감사했다.\n\n### Q&A\n\nQ&A는 오프라인, 온라인 동시에 진행됐다. 시작 전 남은 시간에 태현 님께서 세금강의를 해주셨는데 말씀을 정말 잘하신다고 느꼈다. 다음 강의가 혹시 세금강의인지 여쭤보고 싶을 정도다. Q&A는 이전 라이브세션과\n비슷했다. 모두가 좋은 백엔드 개발자를 목표로 하고 있기 때문에 성장에 관련된 질문과 답변이 오갔다.\n\n질문과 답변보다 인상 깊었던 점은 태현 님의 모습이다. 오래 개발을 하셨기 때문에 본인의 확고한 생각으로 단언하실 수 있다 생각한다. 하지만 강의, 라이브세션, Q&A 과정 전체 중 한 번도 단언하시는 모습을 볼 수\n없었다. 항상 여러 가능성을 열어두고 조심스럽게 답변하시고 어떤 질문이라도 좋은 질문이라는 말씀을 빼먹지 않으셨다. 대한민국의 교육과정을 거쳐온 우리가 질문을 하는 건 굉장히 용기가 필요한 행동이라고 생각하는데 어떤\n질문이라도 성심성의껏 답변하시는 모습이 인상 깊었다.\n\n## 마치며\n\n직장인의 생활을 체험하고자 호기롭게 나서 아침에 판교에 도착했다. 오전에는 카페에서 시간을 보내고 오후는 거리를 배회했다. 평소에 운동도 꾸준히 하고 있었기 때문에 체력이 늘지 않았을까 싶었는데 오산이었다. 일정을\n마치고 집에 돌아오니 허리가 끊어질 것 같았다.\n\n인프런 워밍업 클럽 백엔드 1기 생활이 정말 끝났다. 오랜 고민 끝에 참여한 스터디에서 **좋은 개발자란 무엇이고 어떻게 학습할 수 있을까를 배운 점**이 가장 큰 소득이다. 스터디가 끝이 났지만 활동에 지속적인\n관심을 보낼 예정이다. 더욱 활성화되길 바란다. 끝으로 나와 비슷한 고민을 하시는 다른 미래러너분들의 선택에 도움이 되길 바라며 후기를 마친다.\n"},{"excerpt":"지난달보다 휴식이 많았지만 만족스러운 한달을 보냈다. 기억하고 싶은 사건사고도 많다. 어떤일이 있었는지 알아보자. 우리는 왜 잠을 자야 할까 개발서적 외에 이 책이 가장 궁금했다. 1장을 읽은 게 전부지만 잠은 항상 탐구하고 해결하고 싶은 문제였다.\n이론적인 배경외에 잠이 왜 필요한지 직접 느꼈다. 앞서 이야기했듯 이번달은 휴식이 잦았다. 운동을 쉬기도 …","fields":{"slug":"/retrospective-20240530/"},"frontmatter":{"date":"May 30, 2024","title":"2024 월간 장태근 5월호 '마라톤'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ClwEVvUgxEE?si=HzV9OLWagN8cm1FT\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n지난달보다 휴식이 많았지만 만족스러운 한달을 보냈다. 기억하고 싶은 사건사고도 많다. 어떤일이 있었는지 알아보자.\n\n## 우리는 왜 잠을 자야 할까\n\n개발서적 외에 이 [책](https://product.kyobobook.co.kr/detail/S000000582009)이 가장 궁금했다. 1장을 읽은 게 전부지만 잠은 항상 탐구하고 해결하고 싶은 문제였다.\n이론적인 배경외에 잠이 왜 필요한지 직접 느꼈다. 앞서 이야기했듯 이번달은 휴식이 잦았다. 운동을 쉬기도 했고 개발에 손을 대지 않은 날도 있었다. 시간이 지나 다시 생각하니 문제는 잠에서 시작됐다.\n잠이 오지 않으니 밤을 새워야겠다는 접근은 잘못됐다. 하루가 아닌 며칠이 사라졌다. 상태이상이 걸려 도트대미지가 들어온다. 어떻게든 자야 한다.\n\n### 잠이 오지 않았던 이유(추정)\n\n1. 낮잠\n2. 카페인\n3. 잠들기 전 운동\n\n## 인프런 워밍업 클럽 - 스터디 1기\n\n강한 이끌림으로 시작했다. [앞서 이야기](https://devmeeple.github.io/2024-04/)했듯이 참여하지 않으면 후회할 것 같았다. 스터디뿐만 아니라 학습할 때 중요하게 생각하는 점은 사고력이다.\n익숙한 학습방식은 정답을 찾는 것이다. 하지만 현실의 문제는 100% 일치하는 정답이 없고 관점에 따라 계속 바뀌기 마련이었다. 스터디에서도 관점에 따른 사고방식을 중점으로 두었다.\n개인적으로 난이도(과제, 강의)는 적절했고 운영방식도 만족스러웠다.\n\n> 모집 페이지에서 강조한 취업 준비와 실무에 필요한 기초를 적절하게 다뤘고 다른 방법으로 문제를 해결할 수 있지 않을까 생각하면 라이브 세션이 열렸다.\n\n워밍업 클럽은 지식공유자 주도 스터디라는 점이 다른 스터디와 차별화된 점이기 때문에 라이브세션의 중요도가 높다 생각한다. 또한 강의도 차이점이 있다고 생각하는데 과제를 제공하는 강의는\n많지 않았다. (강의를 들었다면 풀 수 있는 난이도) 만약 모집기간이 아니라서 신청하지 못했더라도 제안하는 일정에 맞춰 강의를 듣고 과제를 구현하면 비슷한 경험을 할 수 있을 것 같다.\n\n아쉬운 점도 있었다. 온라인으로 이뤄지는 강의라서 러너들 간의 소통이 부족했다. 다른 러너는 어떻게 문제를 해결했는지 참고하는 게 전부였다. 하지만 온라인이기 때문에 어쩔 수 없고 운영의 문제는 아니라고 생각한다.\n오히려 문의사항과 질문에 피드백이 몹시 빨라서 당황스러웠다. (장점)\n\n만약 누군가 참여를 고민한다면 추천하고 싶다. 참여인원은 취업준비생, 주니어개발자로 주로 구성되는데 코드리뷰(피드백)와 다양한 지식을 공유하는 점이 매력적이다. 스터디를 신청하기 전에 방황하고 있었는데\n방향을 잡고 확신을 가질 수 있었다.\n\n스터디 인식의 변화를 이뤘다. 학습할 때 함께 공부하라는 의견을 흔히 접할 수 있다. 하지만 동의하기 어려웠다. 이전에 참여했던 스터디는 조별과제의 성격이 강했다.\n뛰어난 한 명이 앞서나가고 다른 인원은 버거워하거나 중도하차가 빈번했다. 이러한 점이 긍정적으로 다가오지 않았고 오히려 부정적으로 다가왔다. 그러나 이번 스터디는 일정이 명확하게 정해져 있고, 의견을 온라인으로\n편하게 물어보며 함께 자라는 느낌을 받았다.\n\n끝으로 태현님께서 강의마다 하시는 마지막 멘트가 기억에 남는다. 그럼 오늘도 스터디에 참여하신 여러분들을 존중하고 존경하며 마무리하도록 하겠습니다!\n\n## 트레일러닝\n\n습관을 만들 때 가장 중요하게 생각한 점은 관심의 끈을 놓지 않는 것이다. 시작할 때는 매일 코딩을 해야 한다는 생각이 강했는데 막상 쉽지 않았다. 또한 문제를 계속 잡고 있는 게 문제해결의 능사는 아니라는 것을\n느꼈다. 무의식에 문제를 정의해 둬도 우연히 해결되는 경우가 많았다. 수정을 거쳐 만들어진 현재의 습관은 일요일 휴식이다. 6일은 같은 루틴을 반복하지만 일요일은 평소보다 늦게 일어난다. 평소 우선순위가 개발이었다면\n일요일은 우선순위를 조정한다. 마지막 주 일요일은 예외인데, 나에게 선물을 주는 편이다.\n\n이번달은 [트레일러닝](https://socksupmoment.com/blogPost/trail_running)을 다녀왔다. 당일 전까지도 등산을 계획했는데 잠들기 전에 전환했다. 등산과 러닝 둘 다 하고 싶은\n욕심이 불러온 결과다. 가볍게 생각했는데 쉽지 않았다. 평지와 오르막의 차이를 느꼈고 비포장된 길을 뛰며 신발의 중요성을 느꼈다. (슬립온을 신었는데 지압판에서 뛰는 것 같았다) 언덕의 수많은 수문장에 가로막혀\n빠른 속도는 아니었지만 다치지 않아서 다행이다. 색다른 경험이었고 다음에도 뛰고 싶다.\n\n## 기타\n\n- [학문의 즐거움](https://product.kyobobook.co.kr/detail/S000000594931): 수학자의 삶과 창조에 대해 다룬다. 창조를 시작하는 과정에서 완벽주의의 문제점을 느꼈다.\n- 5,000만의 사나이: 인프런 봤어요 5,000만 깜짝 이벤트에 당첨됐지만 사용하지 못해서 아쉽다.\n\n## 마치며\n\n꾸준하게 질문을 던지며 만족스러운 한 달을 보냈다. 개발 외에도 다양한 경험과 적절한 휴식의 조화로 이뤄낸 성과라고 생각한다. 이 또한 지나가겠지만 현재의 파도에 올라탄다면 성과도 드러나고 이야기할 거리도 생기지\n않을까 싶다. 일희일비하지 말고 6월에 올라타자.\n"},{"excerpt":"6일 차는 스프링 컨테이너의 의미와 사용 방법을 주제로 스프링 컨테이너가 왜 필요한지, 어떻게 기존의 코드를 리팩터링 할 수 있는지 배웠다. 주어진 과제는 총 2문제로 계층화 아키텍처(Layered\nArchitecture) 리팩터링 하기, 스프링 빈(Spring Bean)을 다룰 수 있는지 확인한다. 요구사항 문제 1: 과제 4에서 만들었던 API를 Co…","fields":{"slug":"/task-6-spring-container-and-layered-architecture/"},"frontmatter":{"date":"May 13, 2024","title":"6. 스프링 컨테이너와 계층화 아키텍처(Layered Architecture)","tags":["Spring"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n6일 차는 **스프링 컨테이너의 의미와 사용 방법**을 주제로 스프링 컨테이너가 왜 필요한지, 어떻게 기존의 코드를 리팩터링 할 수 있는지 배웠다. 주어진 과제는 총 2문제로 계층화 아키텍처(Layered\nArchitecture) 리팩터링 하기, 스프링 빈(Spring Bean)을 다룰 수 있는지 확인한다.\n\n## 요구사항\n\n- 문제 1: [과제 4](https://devmeeple.github.io/task-4-fruit-store-api/)에서 만들었던 API를 Controller -Service - Repository로 분리하기\n- 문제 2:\n    1. 분리된 저장소(FruitRepository)를 FruitMemoryRepository, FruitMySqlRepository로 나누기\n    2. `@Primary` 어노테이션을 활용해 Repository를 바꿔가며 동작할 수 있도록 변경하기\n\n## 문제 1\n\n```java\n\n@RequestMapping(\"/api/v1/fruit\")\n@RestController\npublic class FruitController {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    public FruitController(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @PostMapping\n    public void addFruit(@RequestBody AddFruitIRequest request) {\n        String sql = \"INSERT INTO fruit (name, warehousing_date, price) VALUES (?, ?, ?)\";\n        jdbcTemplate.update(sql, request.getName(), request.getWarehousingDate(), request.getPrice());\n    }\n\n    @PutMapping\n    public void updateFruit(@RequestBody UpdateFruitRequest request) {\n        String readSql = \"SELECT * FROM fruit WHERE id = ?\";\n        boolean isFruitNotExist = jdbcTemplate.query(readSql, (rs, rowNum) -> 0, request.getId()).isEmpty();\n\n        if (isFruitNotExist) {\n            throw new IllegalArgumentException(\"과일을 찾을 수 없습니다\");\n        }\n\n        String sql = \"UPDATE fruit SET is_sold = 1 WHERE id = ?\";\n        jdbcTemplate.update(sql, request.getId());\n    }\n\n    @GetMapping(\"/stat\")\n    public FruitSalesResponse findByName(@RequestParam String name) {\n        String sql = \"SELECT SUM(price) FROM fruit WHERE name = ? GROUP BY is_sold\";\n        List<Long> salesAmounts = jdbcTemplate.query(sql, (rs, rowNum) -> rs.getLong(1), name);\n\n        Long salesAmount = salesAmounts.get(0);\n        Long notSaleAmount = salesAmounts.get(1);\n\n        return new FruitSalesResponse(salesAmount, notSaleAmount);\n    }\n}\n```\n\n이전에 작성된 코드는 Controller가 HTTP와 관련된 기능 외에 다양한 기능을 포함하고 있다. 요구사항에 맞게 분리해 보자.\n\n### Controller\n\n```java\n\n@RequestMapping(\"/api/v1/fruit\")\n@RestController\npublic class FruitController {\n\n    private final FruitService fruitService;\n\n    public FruitController(FruitService fruitService) {\n        this.fruitService = fruitService;\n    }\n\n    @PostMapping\n    public void addFruit(@RequestBody AddFruitRequest request) {\n        fruitService.addFruit(request);\n    }\n\n    @PutMapping\n    public void updateFruit(@RequestBody UpdateFruitRequest request) {\n        fruitService.updateFruit(request);\n    }\n\n    @GetMapping(\"/stat\")\n    public FruitSalesResponse findByName(@RequestParam String name) {\n        return fruitService.findByName(name);\n    }\n}\n```\n\n### Service\n\n```java\n\n@Service\npublic class FruitService {\n\n    private final FruitRepository fruitRepository;\n\n    public FruitService(FruitRepository fruitRepository) {\n        this.fruitRepository = fruitRepository;\n    }\n\n    public void addFruit(AddFruitRequest request) {\n        fruitRepository.addFruit(request.getName(), request.getWarehousingDate(), request.getPrice());\n    }\n\n    public void updateFruit(UpdateFruitRequest request) {\n        if (fruitRepository.isFruitNotExist(request.getId())) {\n            throw new IllegalArgumentException(\"과일을 찾을 수 없습니다\");\n        }\n\n        fruitRepository.updateFruit(request.getId());\n    }\n\n    public FruitSalesResponse findByName(String name) {\n        List<Long> salesAmounts = fruitRepository.findByName(name);\n\n        Long salesAmount = salesAmounts.get(0);\n        Long notSaleAmount = salesAmounts.get(1);\n\n        return new FruitSalesResponse(salesAmount, notSaleAmount);\n    }\n}\n```\n\n### Repository\n\n```java\n\n@Repository\npublic class FruitRepository {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    public FruitRepository(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @Override\n    public void addFruit(String name, LocalDate warehousingDate, long price) {\n        String sql = \"INSERT INTO fruit (name, warehousing_date, price) VALUES (?, ?, ?)\";\n        jdbcTemplate.update(sql, name, warehousingDate, price);\n    }\n\n    @Override\n    public List<Long> findByName(String name) {\n        String sql = \"SELECT SUM(price) FROM fruit WHERE name = ? GROUP BY is_sold\";\n        return jdbcTemplate.query(sql, (rs, rowNum) -> rs.getLong(1), name);\n    }\n\n    @Override\n    public boolean isFruitNotExist(long id) {\n        String readSql = \"SELECT * FROM fruit WHERE id = ?\";\n        return jdbcTemplate.query(readSql, (rs, rowNum) -> 0, id).isEmpty();\n    }\n\n    @Override\n    public void updateFruit(long id) {\n        String sql = \"UPDATE fruit SET is_sold = 1 WHERE id = ?\";\n        jdbcTemplate.update(sql, id);\n    }\n}\n```\n\n기존 코드보다 역할이 분명해진 점을 확인할 수 있다. 다시 정리하면 Controller, Service, Repository는 다음과 같은 역할을 가진다.\n\n- Controller: HTTP와 관련된 기능\n- Service: 트랜잭션에 대한 제어, 다양한 도메인을 필요로 하는 로직의 일부\n- Repository: 저장소에서 도메인을 가져오는 기능\n\n## 문제 2\n\n- 강의를 참고하여 최소한으로 구성했다.\n\nRepository를 나누기 위해 인터페이스(interface)를 생성하고 상속하여 구현하는 방식으로 진행했다.\n\n```java\npublic interface FruitRepository {\n\n    void addFruit(String name, LocalDate warehousingDate, long price);\n\n    List<Long> findByName(String name);\n\n    void updateFruit(long id);\n\n    boolean isFruitNotExist(long id);\n}\n```\n\n### @Primary\n\n```java\n\n@Primary\n@Repository\npublic class FruitMySqlRepository implements FruitRepository {\n}\n\n@Repository\npublic class FruitMemoryRepository implements FruitRepository {\n}\n```\n\n구현한 저장소에 `@Repository`를 사용하고 동작시키고 싶은 저장소에 `@Primary`를 사용한다.\n\n- 여러 구현체를 가진 동일한 인터페이스를 사용할 때 어떤 빈을 주입할지 지정해야 한다.\n\n- `@Primary` 또는 `@Qualifier`를 사용하지 않으면 에러가 발생한다.\n\n### @Qualifier\n\n정의\n\n```java\n\n@Repository\n@Qualifier(\"mysql\")\npublic class FruitMySqlRepository implements FruitRepository {\n    // 구현\n}\n\n@Repository\n@Qualifier(\"memory\")\npublic class FruitMemoryRepository implements FruitRepository {\n    // 구현\n}\n```\n\n주입\n\n```java\n\n@Autowired\n@Qualifier(\"mysql\")\nprivate FruitRepository mysqlRepository;\n\n@Autowired\n@Qualifier(\"memory\")\nprivate FruitRepository memoryRepository;\n```\n\n## 마치며\n\n간단한 문제였지만 이외에도 다양한 시도를 해서 얻은 지식이 많았다. 추가로 고민했던 내용은 다음과 같다.\n\n- 메모리 데이터베이스 데이터를 어떻게 미리 넣어둘 수 있을까?: `@EventListener`\n- MemoryRepository를 제대로 구현해야 하는가?: 요구사항을 오버한다고 생각하여 최소한으로 구성했다.\n\n리팩터링 전에 테스트 코드가 작성되어 있었다면 진행상황을 확인하며 더욱 재밌게 문제를 풀지 않았을까 하는 생각이 들었다. 테스트 코드도 얼른 배우고 리팩터링을 진행해야겠다.\n"},{"excerpt":"5일 차는 클린코드의 개념과 리팩터링을 배웠다. 실제 코드에 적용해 가면서 클린코드와 친해지자. 위 예제는 다음과 기능과 요구사항을 가진다. 기능 숫자를 입력받는다. 숫자만큼 주사위를 굴려, 숫자가 몇 번 나왔는지 출력한다. 요구사항 주사위가 정육면체가 아닌 n면체 일 때 최소한으로 수정하도록 고려하여 코드를 작성하라. 리팩터링 리팩터링을 진행할 때 아래…","fields":{"slug":"/task-5-clean-code/"},"frontmatter":{"date":"May 09, 2024","title":"5. 클린코드 이해하기","tags":["Java"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n5일 차는 클린코드의 개념과 리팩터링을 배웠다. 실제 코드에 적용해 가면서 클린코드와 친해지자.\n\n```java\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        System.out.print(\"숫자를 입력하세요 : \");\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n\n        int r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0;\n\n        for (int i = 0; i < a; i++) {\n            double b = Math.random() * 6;\n            if (b >= 0 && b < 1) {\n                r1++;\n            } else if (b >= 1 && b < 2) {\n                r2++;\n            } else if (b >= 2 && b < 3) {\n                r3++;\n            } else if (b >= 3 && b < 4) {\n                r4++;\n            } else if (b >= 4 && b < 5) {\n                r5++;\n            } else if (b >= 5 && b < 6) {\n                r6++;\n            }\n        }\n\n        System.out.printf(\"1은 %d번 나왔습니다. \\n\", r1);\n        System.out.printf(\"2는 %d번 나왔습니다. \\n\", r2);\n        System.out.printf(\"3은 %d번 나왔습니다. \\n\", r3);\n        System.out.printf(\"4는 %d번 나왔습니다. \\n\", r4);\n        System.out.printf(\"5는 %d번 나왔습니다. \\n\", r5);\n        System.out.printf(\"6은 %d번 나왔습니다. \\n\", r6);\n    }\n}\n```\n\n위 예제는 다음과 기능과 요구사항을 가진다.\n\n## 기능\n\n- 숫자를 입력받는다.\n- 숫자만큼 주사위를 굴려, 숫자가 몇 번 나왔는지 출력한다.\n\n## 요구사항\n\n- 주사위가 정육면체가 아닌 n면체 일 때 최소한으로 수정하도록 고려하여 코드를 작성하라.\n\n## 리팩터링\n\n리팩터링을 진행할 때 아래 순서로 진행했다.\n\n1. 의미있는 변수명 사용하기\n2. 주사위 게임을 실행하는 메인 클래스와 주사위 게임 클래스를 선언하고 분리했다.\n3. 입력받기, 굴리기, 출력하기 메서드 구현하기\n4. 조합하기 + 출력하기\n\n```java\npublic class DiceGame {\n    private static final int DICE_FACE = 6;\n\n    private final int rolls;\n    private final int[] rollCounts;\n\n    public DiceGame(int rolls) {\n        this.rolls = rolls;\n        this.rollCounts = new int[DICE_FACE];\n    }\n\n    public void playGame() {\n        countRolls();\n        printResults();\n    }\n\n    private void countRolls() {\n        IntStream.range(0, rolls)\n                .map(i -> rollDice())\n                .forEach(roll -> rollCounts[roll - 1]++);\n    }\n\n    private int rollDice() {\n        return (int) (Math.random() * DICE_FACE) + 1;\n    }\n\n    private void printResults() {\n        IntStream.range(0, rollCounts.length)\n                .forEach(i -> System.out.printf(\"[%d] 은(는) [%d번] 나왔습니다.\\n\", i + 1, rollCounts[i]));\n    }\n}\n```\n\n```java\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        System.out.print(\"주사위를 몇번 굴릴까요? : \");\n        Scanner scanner = new Scanner(System.in);\n        int rolls = scanner.nextInt();\n        scanner.close();\n\n        System.out.println(\"==================================\");\n        DiceGame game = new DiceGame(rolls);\n        game.playGame();\n    }\n}\n```\n\n주사위가 정육면체가 아닌 n면체가 되었을 때 DICE_FACE 변수를 수정하면 모두 수정되도록 전역으로 선언했다.\n\n## 마치며\n\n어떤식으로 작성해야 가독성이 좋을지 고려하며 작성했다. 하지만 객체지향 프로그래밍과 함수형 프로그래밍이 능숙했다면 더 가독성 좋은 코드를 작성할 수 있을 것 같다고 느꼈다. 과제를 진행하는 다른 스터디원들은\n어떻게 문제를 해결했는지 참고하며 배워야겠다.\n"},{"excerpt":"3, 4일 차 강의에서는 기본적인 데이터베이스 사용법과 데이터베이스를 사용해 API를 만드는 방법을 배웠다. 학습한 내용을 바탕으로 요구사항을 살펴보자. 4일 차 구현과제는 총 3 문제고 각 문제는 이어진다. 요구사항 과일가게에 입고되는 과일정보를 추가한다. 팔린 과일의 정보를 저장한다. 과일이름을 기준으로 팔린 금액, 팔리지 않은 금액을 조회한다. 강의…","fields":{"slug":"/task-4-fruit-store-api/"},"frontmatter":{"date":"May 03, 2024","title":"4. 과일가게 API 구현하기","tags":["Spring"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n3, 4일 차 강의에서는 기본적인 데이터베이스 사용법과 데이터베이스를 사용해 API를 만드는 방법을 배웠다. 학습한 내용을 바탕으로 요구사항을 살펴보자.\n\n> 4일 차 구현과제는 총 3 문제고 각 문제는 이어진다.\n\n## 요구사항\n\n1. 과일가게에 입고되는 과일정보를 추가한다.\n2. 팔린 과일의 정보를 저장한다.\n3. 과일이름을 기준으로 팔린 금액, 팔리지 않은 금액을 조회한다.\n\n```sql\nCREATE TABLE fruit\n(\n    id               BIGINT AUTO_INCREMENT,\n    name             VARCHAR(20) NOT NULL,\n    warehousing_date DATE        NOT NULL,\n    price            BIGINT      NOT NULL,\n    is_sold          TINYINT(1) NOT NULL DEFAULT 0\n    PRIMARY KEY (id)\n);\n```\n\n강의에서 다룬 내용을 바탕으로 테이블을 선언한다.\n\n> Q. 만약 테이블을 이미 선언했다면 했다면 어떻게 할까?\n\n`ALTER TABLE [테이블명] ADD [컬럼명] [타입] [옵션];`과 같은 형식으로 컬럼을 추가한다.\n\n## 문제 1) 과일정보 추가하기\n\n| 메서드  | URL           |\n|------|---------------|\n| POST | /api/v1/fruit |\n\n### 요청\n\n| 이름              | 타입        | 설명   | 필수 |\n|-----------------|-----------|------|----|\n| name            | String    | 과일명  | O  |\n| warehousingDate | LocalDate | 입고날짜 | O  |\n| price           | long      | 가격   | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp POST :8080/api/v1/fruit name=사과 warehousingDate=2024-02-01 price=5000\n```\n\n```json\n{\n  \"name\": \"사과\",\n  \"warehousingDate\": \"2024-02-01\",\n  \"price\": 5000\n}\n```\n\n**응답: 성공**\n\n### 해결\n\n1번 문제의 경우 요청형식은 정의되어 있지만 응답은 상태코드를 반환한다. 문제 해결을 위해서 요청 객체(DTO)가 필요하다.\n\n```java\npublic class AddFruitIRequest {\n    private final String name;\n    private final LocalDate warehousingDate;\n    private final long price;\n\n    public AddFruitIRequest(String name, LocalDate warehousingDate, long price) {\n        this.name = name;\n        this.warehousingDate = warehousingDate;\n        this.price = price;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public LocalDate getWarehousingDate() {\n        return warehousingDate;\n    }\n\n    public long getPrice() {\n        return price;\n    }\n}\n```\n\n```java\n\n@PostMapping\npublic void addFruit(@RequestBody AddFruitIRequest request) {\n    String sql = \"INSERT INTO fruit (name, warehousing_date, price) VALUES (?, ?, ?)\";\n    jdbcTemplate.update(sql, request.getName(), request.getWarehousingDate(), request.getPrice());\n}\n```\n\n데이터베이스에 데이터를 추가하기 위해서는 DML(Data Manipulation Language) 중 하나인 INSERT 문을 사용한다. 응답형식은 따로 정해져 있지 않아 반환하지 않았다.\n\n> Q. 정수를 다루는 대표적인 방법은 int와 long이 있다. 왜 long을 사용했을까?\n\n애플리케이션의 확장을 고려하여 long형식으로 선언했다고 생각한다. 데이터베이스에서 BIGINT 형식으로 테이블을 선언한 것과 같은 이유다.\n\n## 문제 2) 과일정보 수정\n\n| 메서드 | URL           |\n|-----|---------------|\n| PUT | /api/v1/fruit |\n\n### 예제\n\n**요청**\n\n```shell\nhttp PUT :8080/api/v1/fruit id=3\n```\n\n```json\n{\n  \"id\": 3\n}\n```\n\n**응답: 성공**\n\n### 해결\n\n```java\n\n@PutMapping\npublic void updateFruit(@RequestBody UpdateFruitRequest request) {\n    String readSql = \"SELECT * FROM fruit WHERE id = ?\";\n    boolean isFruitNotExist = jdbcTemplate.query(readSql, (rs, rowNum) -> 0, request.getId()).isEmpty();\n\n    if (isFruitNotExist) {\n        throw new IllegalArgumentException(\"과일을 찾을 수 없습니다\");\n    }\n\n    String sql = \"UPDATE fruit SET is_sold = 1 WHERE id = ?\";\n    jdbcTemplate.update(sql, request.getId());\n}\n```\n\n가장 애를 먹었다. 컨트롤러는 강의에서 다룬 형식과 같다. 하지만 요청객체 선언은 수정이 필요했다. 기존과 같은 방법으로 선언했을 때는 문제가 해결되지 않았다. 반복적으로 400 Bad Request가 발생했다.\n\n> 400 상태코드는 클라이언트에서 잘못된 형식으로 요청할 때 발생한다.\n\n> JSON parse error: Cannot construct instance of\n\nSpring은 직렬화/역직렬화에 Jackson 라이브러리를 사용한다. Jackson은 기본생성자가 없으면 동작하지 않는다.\n총 3가지 방법으로 문제를 해결할 수 있었다.\n\n1. 기본 생성자를 생성한다: 기본 생성자를 생정하면 `final` 를 사용할 수 없다.\n2. 임의의 필드를 추가한다: 현재는 `id` 필드만 있지만 다른 필드를 추가하면 동작한다.\n3. 방식을 지정한다.\n\n3번으로 문제를 해결하기 위해서는 Jackson의 동작방식을 알아봤다. Jackson은 두 가지의 방식으로 데이터를 변환한다.\n\n- Properties: 기본적인 변환방식\n- Delegating: 복잡한 데이터가 있거나 데이터 처리방법을 변경할 때 사용\n\n> 필드가 1개인 상태에서 Properties 방식으로 변환하려면 어떻게 해야 할까?\n\n```java\n\npublic class UpdateFruitRequest {\n    private final long id;\n\n    @JsonCreator\n    public UpdateFruitRequest(@JsonProperty(\"id\") long id) {\n        this.id = id;\n    }\n\n    public long getId() {\n        return id;\n    }\n}\n```\n\n`@JsonCreator`, `@JsonProperty` 어노테이션을 사용한다. 두 어노테이션을 사용하면 기본생성자와 setter 없이도 객체를 생성하여 불변객체를 선언할 수 있다.\n\n2번 문제도 앞선 1번 문제처럼 응답형식이 정해져 있지 않다. 아무것도 반환하지 않는다.\n\n## 문제 3) 과일이름을 기준으로 팔린 금액, 팔리지 않는 금액 조회\n\n```text\n1. (1, 사과, 3000원, 판매 O)\n2. (2, 사과, 4000원, 판매 X)\n3. (3, 사과, 3000원, 판매 O)\n```\n\n| 메서드 | URL                |\n|-----|--------------------|\n| GET | /api/v1/fruit/stat |\n\n### 요청\n\n**쿼리 파라미터**\n\n| 이름   | 타입     | 설명  | 필수 |\n|------|--------|-----|----|\n| name | String | 과일명 | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp :8080/api/v1/fruit\\?name=사과\n```\n\n**응답: 성공**\n\n```json\n{\n  \"salesAmount\": 6000,\n  \"notSalesAmount\": 4000\n}\n```\n\n### 해결\n\n3번 문제는 이전 문제들과 다르게 응답형식이 지정되어 있다. 따라서 응답 객체를 선언해야 한다.\n\n```java\npublic class FruitSalesResponse {\n    private final long salesAmount;\n    private final long notSalesAmount;\n\n    public FruitSalesResponse(long salesAmount, long notSalesAmount) {\n        this.salesAmount = salesAmount;\n        this.notSalesAmount = notSalesAmount;\n    }\n\n    public long getSalesAmount() {\n        return salesAmount;\n    }\n\n    public long getNotSalesAmount() {\n        return notSalesAmount;\n    }\n}\n```\n\n```java\n\n@GetMapping(\"/stat\")\npublic FruitSalesResponse findByName(@RequestParam String name) {\n    String sql = \"SELECT SUM(price) FROM fruit WHERE name = ? GROUP BY is_sold\";\n    List<Long> salesAmounts = jdbcTemplate.query(sql, (rs, rowNum) -> rs.getLong(1), name);\n\n    Long salesAmount = salesAmounts.get(0);\n    Long notSaleAmount = salesAmounts.get(1);\n\n    return new FruitSalesResponse(salesAmount, notSaleAmount);\n}\n```\n\n처음부터 SUM, GROUP BY를 사용했다. 이외에는 이전과제와 강의에서 다루는 내용과 일치한다.\n\n## 마치며\n\n강의가 진행됨에 따라 컨트롤러의 역할이 증가하고 있다. 역할을 분리하는 리팩터링이 필요한 시간이다. 다음 강의와 과제가 기대된다.\n\n### 함께 자라기\n\n- [MySQL BOOLEAN by 당큰 테크 블로그](https://medium.com/daangn/mysql-boolean-%EC%BB%AC%EB%9F%BC-7abd9b35c664)\n- [SQL 가독성을 높이는 다섯 가지 사소한 습관](https://yozm.wishket.com/magazine/detail/1519/)\n- [Jackson by GitHub](https://github.com/FasterXML/jackson)\n"},{"excerpt":"3일 차는 익명 클래스(Anonymous Class)와 람다(Lambda)가 과제로 주어졌다. 둘은 함께 이야기되는 주제이다. 어떤 관계일까? 익명 클래스와 람다 익명 클래스로도 다양한 동작을 구현할 수 있었다. 하지만 Java SE 8에 등장한 람다는 복잡성을 줄이고 가독성을 높여 유지보수 하기 좋은 코드 작성을 위해 등장했다. 자세한 이론에 앞서 예제…","fields":{"slug":"/task-3-anonymous-class-and-lambda/"},"frontmatter":{"date":"May 01, 2024","title":"3. 익명 클래스와 람다","tags":["Java"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n```text \n[질문] \n\n1. 자바의 람다식은 왜 등장했을까?\n2. 람다식과 익명 클래스는 어떤 관계가 있을까? - 람다식의 문법은 어떻게 될까? \n\n```\n\n3일 차는 익명 클래스(Anonymous Class)와 람다(Lambda)가 과제로 주어졌다. 둘은 함께 이야기되는 주제이다. 어떤 관계일까?\n\n## 익명 클래스와 람다\n\n익명 클래스로도 다양한 동작을 구현할 수 있었다. 하지만 Java SE 8에 등장한 람다는 복잡성을 줄이고 가독성을 높여 유지보수 하기 좋은 코드 작성을 위해 등장했다.\n\n자세한 이론에 앞서 예제를 먼저 살펴보자.\n\n```java\n// 1. 익명 클래스로 구현한 아이템 가격 비교\nComparator<Item> byPrice = new Comparator<Item>() {\n    public int compare(Item boots, Item mobilityBoots) {\n        return boots.getPrice().compareTo(mobilityBoots.getPrice());\n    }\n};\n\n// 2. 람다로 구현한 아이템 가격 비교\nComparator<Item> byPrice = (Item boots, Item mobilityBoots) -> boots.getPrice().compreTo(mobilityBoots.getPrice());\n```\n\n예제코드는 리그오브레전드 아이템 가격을 비교하고 더 비싼 아이템 가격을 반환한다. 같은 결과를 반환하지만 람다를 사용했을 때 더욱 간결하게 작성된 점을 확인할 수 있다.\n\n### 익명 클래스\n\n익명 클래스는 일회성으로 사용되는 클래스를 정의할 때 사용한다. 클래스를 따로 정의하지 않고 객체를 생성하고 사용하는 방법이다. 인터페이스나 추상 클래스의 단일 메서드를 구현해야 할 때 사용한다.\n\n```text\nnew 생성자() { ... 구현 }\n```\n\n생성자 뒤에 중괄호가 나오고 `@Override`하여 구현한다.\n\n```java\n\n@Test\npublic void testAnonymousClass() {\n    // given\n    MathOperation add = new MathOperation() {\n        @Override\n        public int operate(int a, int b) {\n            return a + b;\n        }\n    };\n\n    // when\n    int result = add.operate(10, 5);\n\n    // then\n    assertThat(result).isEqualTo(15);\n}\n```\n\n### 람다\n\n람다는 명확하고 가독성 좋은 동작을 구현하기 위해 등장했다.\n\n앞서 익명 클래스로 살펴본 예제는 구현을 위해 자질구레한 코드가 많이 생겼다. 하지만 람다를 사용해서 간결하고 유연한 코드를 작성할 수 있다. 어떻게 작성할 수 있을까?\n\n```text\n(parameters) -> expression\n```\n\n람다의 기본문법은 파라미터, 화살표, 표현식으로 이뤄진다. 이외에도 다양한 형식을 지원한다.\n\n```java\n\n@Test\npublic void testSimpleLambda() {\n    // given\n    StringOperation operation = s -> s.toUpperCase();\n\n    // when\n    String result = operation.operate(\"java\");\n\n    // then\n    assertThat(result).isEqualTo(\"JAVA\");\n}\n\n@Test\n\npublic void testMultiStatementLambda() {\n    // given\n    StringOperation operation = s -> {\n        String result = s.toUpperCase();\n        return result + \"!\";\n    };\n\n    // when\n    String result = operation.operate(\"spring\");\n\n    // then\n    assertThat(result).isEqualTo(\"SPRING!\");\n}\n\n@Test\npublic void testLambdaWithMultipleParameters() {\n    // given\n    MathOperation operation = (a, b) -> a * b;\n\n    // when\n    int result = operation.operate(10, 5);\n\n    // then\n    assertThat(result).isEqualTo(50);\n}\n\n@Test\npublic void testLambdaWithNoParameters() {\n    // given\n    Greeting greeting = () -> \"Hello, World!\";\n\n    // when\n    String result = greeting.greet();\n\n    // then\n    assertThat(result).isEqualTo(\"Hello, World!\");\n}\n```\n\n이외에도 메서드 참조, 스트림(Stream)과 함께 사용된다.\n\n### 주의점\n\n우아하게 느껴지지만 람다를 사용할 때 주의할 점이 있다.\n\n> [책 <이펙티브 자바> by 조슈아 블로크](https://product.kyobobook.co.kr/detail/S000001033066)\n\n**1. 람다는 이름이 없다. 따라서 문서화할 수 없다.**\n\n간결한 코드와 의도를 명확히 드러날 때 강점을 가지지만, 명확하게 설명할 수 없을 때, 코드가 길어지면 다시 한번 검토해야 한다.\n\n**2. 함수형 인터페이스(추상 메서드가 1개)에서만 쓰인다.**\n\n추상 클래스를 인스턴스로 만들거나, 추상 메서드가 여러 개라면 익명 클래스를 사용한다.\n\n**3. 람다의 this는 바깥 인스턴스를 가리킨다.**\n\n자신을 참조해야 한다면 익명 클래스를 사용한다.\n\n## 마치며\n\n익명 클래스와 람다의 관계, 람다식의 등장배경과 사용방법에 대해 짧게 알아봤다. 어떤 기술의 등장은 결국 이전 문제를 해결하기 위해서(복잡성과 가독성) 등장했다를 몸소 느낄 수 있는 주제였고 다양한 생각이 들었다.\n\n**1. 다른 프로그래밍언어에서 배우기**\n\n다른 프로그래밍 언어와의 연관관계를 느낄 수 있었다. 이전에 람다를 처음 사용했을 때 공감 되지 않고 어려운 문법 중 하나라고 생각했다. 머리로는 이해해도 가슴으로 이해하지 못했다.\n\nJavaScript를 배울 때 화살표 함수(Arrow function)를 배웠다. 화살표 함수를 밥먹듯이 사용했다. 스터디에 참가하고 다시 Java & Spring 조합을 사용할 기회가 주어졌다. 이전에 봤던 람다는\n어색하고 어렵게만 느껴지는 존재였다. 하지만 이제는 가볍고 하나의 문제를 해결하는 하나의 방법이라고 느껴진다.\n\nJavaScript에서 강조하는 일급 함수(First-class Function)도 공감되지 않았었다. (대단한 건가?) 그런데 Java가 어떤 식으로 함수형 프로그래밍을 지원하기 위해 기능을 추가했는지 과정을\n살펴보니\n반복해서 강조하는 이유를 알 것 같다.\n\n학습을 꾸준히 하지 않았다면 극복하지 못했을 것이다.\n\n**2. 배경지식**\n\n![GhatGPT3 - 익명 클래스와 람다](./images/chatgpt-about-lambda.png)\n\n기술을 배울 때 어려움을 느낀다. 다양한 이유 중 배경지식의 부제를 이야기하려 한다. 책 또는 인터넷 강의자료는 최대한 간결하게, 쉽게 개념을 전달한다. 이해가 바로 되면 가장 좋지만 **이해가 잘 가지 않을 땐\n이전에 어떤 문제가 있었는지 여러 방법을 검토해 살펴보는 자세가 중요하다고 느꼈다.**\n\n새로운 기술은 궁극적으로 유지보수성하기 좋고 간단하게 사용할 수 있도록 등장하는 것을 지켜봤다. 이해를 돕기 위해서는 과거 선배 개발자는 어떤 식으로 문제를 해결했는지 살펴보자. 유연한 사고가 중요하다.\n\n과거의 나와 승부에서 이긴듯한 즐거운 기분을 느끼며 과제를 마친다.\n\n> 추가 예제는 [GitHub](https://zrr.kr/kV9d)에 있다.\n\n### 함께 자라기\n\n- [책 <모던 자바 인 액션>](https://product.kyobobook.co.kr/detail/S000001810171): 람다, 스트림, 함수형 프로그래밍 방법을 밀도있게 설명\n- [Baeldung [Lambda Expressions and Functional Interfaces: Tips and Best Practices]](https://www.baeldung.com/java-8-lambda-expressions-tips)\n"},{"excerpt":"봄은 즐길 틈도 남기지 않고 떠났다. 더위 가득한 4월이 찾아왔다. 3월의 아쉬움을 기억한다. 견고하지 않은 시스템을 되돌아보는 한 달이었다. 아쉬움이 4월에도 이어졌다.\n푹 잠들지 못하고 고민이 잦았다. 의심되는 문제점이 있었지만 정작 실행하지 못했다. 호흡을 되찾는데 집중했다. 조금만 방심하면 난이도가 기하급수적으로 증가했다. 문제를 정의하고 최대한 …","fields":{"slug":"/retrospective-20240430/"},"frontmatter":{"date":"April 30, 2024","title":"2024 월간 장태근 4월호 '기댈곳'","tags":["회고"]},"rawMarkdownBody":"\n봄은 즐길 틈도 남기지 않고 떠났다. 더위 가득한 4월이 찾아왔다.\n\n3월의 아쉬움을 기억한다. 견고하지 않은 시스템을 되돌아보는 한 달이었다. 아쉬움이 4월에도 이어졌다.\n푹 잠들지 못하고 고민이 잦았다. 의심되는 문제점이 있었지만 정작 실행하지 못했다.\n\n호흡을 되찾는데 집중했다. 조금만 방심하면 난이도가 기하급수적으로 증가했다. 문제를 정의하고 최대한 잘게 쪼갰다. 위닝 멘탈리티가 필요했다.\n과정을 반복하니 문제를 인식할 여유도 없었다. 주어진 일을 해낸다는 한 가지 생각밖에 없었다. 이외에도 다양한 시도를 했다. 어떤 시도를 했는지 알아보자.\n\n## 화성에서 온 Node.js 개발자\n\n의문점이 많았다. 대표적으로 테스트 코드 작성과 아키텍처다. 입맛에 맞는 자료를 찾을 수 없었다. 자연스럽게 이전에 사용했던 Spring 자료들을 검토했다. 결국 **해결하려고 하는 문제는 다르지 않다**는 결론을\n내렸다.\n\nJava & Spring 조합과 TypeScript & NestJS 조합이 상호작용 됐다. (A를 사용하면 B가 사랑스럽게 느껴지고, B를 사용하면 A가 사랑스러웠다.)\n\n### 인프런 워밍업 클럽 - 스터디 1기\n\n![인프런 워밍업 클럽 - 스터디 1기](images/inflearn-warmup-club-study.png)\n\n때 마침 [인프런 워밍업 클럽 - 스터디 1기](https://www.inflearn.com/course/inflearn-warmup-club-study-1)가 열렸다. 이전에도 다른 기회가 찾아왔었다. 찾아온\n기회도 Spring 학습이었고 의도와 다르게 흘러가지 않을까 고민하다 끝내 포기했다. 하지만 포기하고 기간이 지나니 아쉬웠다. 결정적으로 좋으나 싫으나 학습을 하다 보면 자연스럽게 Spring\n자료를 접했다. 이왕 공부하는 거 함께 공부하자 생각해서 오랜만에 스터디 참여를 결정했다. 이제 시작한 지 이틀이 지났다. 초반이라 그런지 정적이 감돈다. 아직 함께 자라는 느낌은 크게 느낄 수 없다. 일주일이\n지나고\n나면 더 많이 이야기할 수 있을 것 같다.\n\n그럼에도 불구하고 벌써부터 스터디 운영의 노고를 느낄 수 있다. 인프런 관계자분들과 스터디 운영진 분들께서 빠른 피드백에 힘써주시는 모습에 감사함을 느낀다. (누구보다 적극적으로 참여 중이다)\n\n5월에 스터디가 종료된다. **다양한 관점으로 문제 바라보기, 문제해결 능력도 물론 중요하지만 함께 자라는 느낌을 기대한다.**\n\n## 운동\n\n![나이키 런 클럽(NRC)](images/nrc-app.jpg)\n\n운동을 많이 쉬었던 걸로 기억하는데 의외로 3번밖에 쉬지 않았다. 매일 하지 못해서 아쉽다. 매번 느끼지만 운동이 없었으면 소리소문 없이 사라지지 않았을까 싶다. 기분 탓인지는 몰라도 허리도 많이 좋아진 것 같다.\n원래\n오래 앉아있지 못했는데 이제 장시간도 앉아있는다. 운동 역시 꾸준히 해야겠다.\n\n## 마치며\n\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/xMZMwFUscDc?si=yECRYXa4MtcaJBrb\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n끝으로 한 달 동안 이 노래를 가장 많이 들었다. 친한 형이 이야기를 풀어내는 듯한 덤덤한 발성에 위로를 받았다. 이제는 어떻게 흘러갈지 예상이 되지 않는다. 그저 현재를 즐기며 살아야지. 할 일을 다하고 하늘의\n뜻을 기다리자.\n"},{"excerpt":"2일 차는 첫 HTTP API 개발을 주제로 간단한 API를 만들었다. 배운 건 써봐야지. 먼저 과제의 요구사항을 검토하고 구현해 보자. 모든 코드는 GitHub에서 확인할 수 있습니다. 문제 1 두 수를 입력하면 덧셈, 뺄셈, 곱셈결과를 반환한다. 기본 정보 메서드 URL GET /api/v1/calc 요청 쿼리 파라미터 이름 타입 설명 필수 num1 …","fields":{"slug":"/task-2-hands-on-rest-api/"},"frontmatter":{"date":"April 30, 2024","title":"2. API 실습","tags":["Spring"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n2일 차는 첫 HTTP API 개발을 주제로 간단한 API를 만들었다. 배운 건 써봐야지. 먼저 과제의 요구사항을 검토하고 구현해 보자.\n\n> 모든 코드는 [GitHub](https://github.com/devmeeple/inflearn-warmup-club-study/tree/feature/week-1)에서 확인할 수 있습니다.\n\n## 문제 1\n\n두 수를 입력하면 덧셈, 뺄셈, 곱셈결과를 반환한다.\n\n**기본 정보**\n\n| 메서드 | URL          |\n|-----|--------------|\n| GET | /api/v1/calc |\n\n### 요청\n\n**쿼리 파라미터**\n\n| 이름   | 타입  | 설명      | 필수 |\n|------|-----|---------|----|\n| num1 | int | 첫 번째 숫자 | O  |\n| num2 | int | 두 번째 숫자 | O  |    |\n\n### 예제\n\n**요청**\n\n```shell\nhttp :8080/api/v1/calc\\?num1\\=10\\&num2\\=5\n```\n\n**응답: 성공**\n\n```json\n{\n  \"add\": 15,\n  \"minus\": 5,\n  \"multiply\": 50\n}\n```\n\n### 해결\n\n문제를 살펴보면 요청은 `/api/v1/{필요 API}`와 같고, 응답은 `JSON`형식임을 알 수 있다.\n\n```java\n\n@RestController\n@RequestMapping(\"/api/v1\")\npublic class TaskController {\n}\n```\n\n따라서 위와 같이 선언할 수 있다. 이어서 응답과 요청에 맞는 객체를 선언한다.\n\n- TaskCalcRequest\n- TaskCalcResponse\n\n```java\n\n@GetMapping(\"/calc\")\npublic TaskCalcResponse calcTwoNumbers(TaskCalcRequest request) {\n    return new TaskCalcResponse(\n            request.getNum1() + request.getNum2(),\n            request.getNum1() - request.getNum2(),\n            request.getNum1() * request.getNum2()\n    );\n}\n```\n\n객체를 선언하고 최종완성된 코드는 위와 같다.\n\n> 응답객체의 덧셈, 뺄셈, 곱셈 계산을 다른 객체에 위임했다면 가독성이 더 좋을 것 같다. 하지만 아직 웹 계층만을 다루고 차후 리팩터링 예정으로 확인되어 레이어를 분리하지 않았다.\n>\n> 레이어 개념을 학습하면 리팩터링 필요한 코드다.\n\n작성된 코드의 결과를 확인해 보자.\n\n![[문제 1] 덧셈, 뺄셈, 곱셈결과 반환](images/calc.png)\n\n## 문제 2\n\n날짜를 입력하면, 어떤 요일인지 반환한다.\n\n**기본 정보**\n\n| 메서드 | URL                 |\n|-----|---------------------|\n| GET | /api/v1/day-of-week |\n\n### 요청\n\n**쿼리 파라미터**\n\n| 이름          | 타입     | 설명                         | 필수 |\n|-------------|--------|----------------------------|----|\n| day-of-week | String | ISO 8601(YYYY-MM-DD)으로 변환됨 | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp :8080/api/v1/day-of-the-week\\?date\\=2023-01-01\n```\n\n**응답: 성공**\n\n```json\n{\n  \"dayOfTheWeek\": \"SUN\"\n}\n```\n\n### 해결\n\n문제를 해결하는 과정은 문제 1과 유사하다. 하지만 이번엔 응답객체만 선언했다.\n\n- TaskDayOfTheWeekResponse\n\n```java\n\n@GetMapping(\"/day-of-the-week\")\npublic TaskDayOfTheWeekResponse findDayOfTheWeek(@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {\n    return new TaskDayOfTheWeekResponse(date.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.US).toUpperCase());\n}\n```\n\n문제해결의 열쇠는 `LocalDate` 객체 다루 기다. Java SE8에 도입된 LocalDate는 정말 많이 사용하는 객체다. 사용법이 익숙하지 않다면 꼭 짚고 넘어가야 한다.\n\n> LocalDate 타입으로 변환되기 위해서\n>\n> @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)를 선언해야 한다.\n\n![[문제 2] 어떤 요일인지 반환](images/day-of-the-week.png)\n\n## 문제 3\n\n여러 수를 입력받아 총합을 반환한다.\n\n**기본 정보**\n\n| 메서드  | URL         |\n|------|-------------|\n| POST | /api/v1/sum |\n\n### 요청\n\n**본문**\n\n| 이름      | 타입            | 설명    | 필수 |\n|---------|---------------|-------|----|\n| numbers | List<Integer> | 숫자 배열 | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp POST :8080/api/v1/sum\n```\n\n**응답: 성공**\n\n```text\n15\n```\n\n### 해결\n\n![[문제 3] 수의 총합 반환](images/sum.png)\n\n```java\n\n@PostMapping(\"/sum\")\npublic Integer sumNumbers(@RequestBody TaskSumNumbersRequest request) {\n    return request.getNumbers().stream().mapToInt(Integer::valueOf).sum();\n}\n```\n\n람다를 사용하여 값을 반환했다. 람다 외에도 `for`문과 같은 일반적인 루프도 문제를 해결할 수도 있다. 하지만 다음과제가 람다식인것을 참고하여 미리 적용했다. 자세한 내용은 다음과제에 살펴보자.\n\n## 마치며\n\n요구사항 외에도 람다와 테스트코드를 학습했다. 아직 레이어가 분리되지 않아서 그런지 간단하게 작성됐다. 코드를 리팩터링 하고 레이어가 분리되면 어떤 식으로 작성해야 할지 추가학습이 필요하다.\n\n코드를 미리 준비했음에도 불구하고 정리하는데 꽤 오랜 시간이 소요됐다. 일상으로 돌아가 글을 어떤 순서로 작성하면 좋을지 한번 더 생각해 보자.\n\n### 함께 자라기\n\n- [Java의 날짜와 시간 API](https://d2.naver.com/helloworld/645609)\n- [Testing the Web Layer](https://spring.io/guides/gs/testing-web)\n\n"},{"excerpt":"드디어 스터디가 시작됐다. 첫 번째 과제는 자바 어노테이션(Java Annotation)에 대해 알아보는 질문 & 답변 시간이다. 어노테이션의 어떤 점이 중요해서 첫 번째 과제로 선정됐을까? 질문에 답하기 이전에 어노테이션이 무엇인지 먼저 알아보자. 어노테이션이란? 어노테이션은 Java SE 5에 등장했다. 출시된 지 무려 20년을 앞둔 기능이다. (참고…","fields":{"slug":"/task-1-java-annotation/"},"frontmatter":{"date":"April 29, 2024","title":"1. 자바 어노테이션","tags":["Java"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n드디어 스터디가 시작됐다. 첫 번째 과제는 자바 어노테이션(Java Annotation)에 대해 알아보는 질문 & 답변 시간이다. 어노테이션의 어떤 점이 중요해서 첫 번째 과제로 선정됐을까?\n\n```text \n💡 [질문] \n\n1. 어노테이션을 사용하는 이유(효과)는 무엇일까? \n2. 나만의 어노테이션을 어떻게 만들 수 있을까? \n\n``` \n\n질문에 답하기 이전에 어노테이션이 무엇인지 먼저 알아보자.\n\n## 어노테이션이란?\n\n어노테이션은 Java SE 5에 등장했다. 출시된 지 무려 20년을 앞둔 기능이다. (참고로 Generic, Enum도 이때 등장했다)\n\n어노테이션이 도입되기 전에는 메타데이터(코드에 대한 부가 정보)를 자바코드에 직접 작성할 수 없었다. 메타데이터를 표현하기 위해서는 별도의 파일이나 외부 도구를 통해 관리했다. 예를 들어,\n메서드가 상위 클래스의 메서드를 오버라이드하고 있다는 사실을 표현하려면 주석을 달거나 문서화해야 했다.\n\n```java \npublic class Ezreal extends Champion {\n    // 오버라이드 된 메서드 \n    public void attack() {\n        // 상위 클래스의 메서드를 오버라이드 한다는 사실을 알려주는 방법이 없다. \n    }\n} \n``` \n\n이런 식으로 `attack()`메서드는 오버라이드가 된 메서드임을 나타냈다. 어노테이션을 적극적으로 사용하는 현재, 다음과 같이 작성된 코드는 어딘가 부자연스럽다. 유지보수 시 주석이 누락되거나 잘못 작성되었다면\n어땠을까?\n\n```java \npublic class Ezreal extends Champion {\n    @Override\n    public void attack() {\n        // @Override 어노테이션으로 오버라이드 사실을 명시 \n    }\n} \n``` \n\n반면 어노테이션이 새롭게 도입되면서 메타데이터를 자바코드 내에 직접 포함할 수 있게 됐다. 이를 통해 코드의 가독성과 유지 보수성이 향상됐다.\n\n현재 우리는 어노테이션을 흔하게 접할 수 있다. 예를 들어 자주 사용하는 라이브러리, 프레임워크에서 접할 수 있다.\n\n- [Lombok 라이브러리](https://projectlombok.org/)\n\n```java \n\n@Getter\n@Setter\npublic class User {\n    private String name;\n    private String age;\n} \n``` \n\n- [Spring 프레임워크](https://docs.spring.io/spring-framework/reference/index.html)\n\n```java \n\n@Service\npublic class UserService {\n    //... \n} \n``` \n\n- [JUnit 테스트 프레임워크](https://junit.org/junit5/)\n\n```java \npublic class UserTest {\n\n    @Test\n    public void testCreateUser() {\n        // 테스트 코드 \n    }\n} \n``` \n\n이렇게 어노테이션은 다양한 라이브러리와 프레임워크에서 이미 활용되고 있다.\n\n### 커스텀 어노테이션(나만의 어노테이션)\n\n어노테이션을 만들려면 어떻게 해야 할까? `@interface` 문법을 사용하여 사용자 정의 어노테이션을 만들 수 있다.\n\n```java \n\n@Target(ElementType.TYPE) // 클래스에만 적용 가능 \n@Retention(RetentionPolicy.RUNTIME) // 런타임까지 유지 \npublic @interface Book {\n    String title();\n\n    String author();\n} \n``` \n\n어노테이션에 포함될 요소와 데이터 유형을 지정하고, 메타데이터(@Retention, @Target 등)를 지정한다. 이렇게 어노테이션을 정의하고 사용할 수 있다.\n\n### 주의점\n\n어노테이션의 강력한 기능을 알아봤다. 하지만 과도하게 사용하면 오히려 역효과가 날 수 있다.\n\n1. 가독성저하: 코드가 복잡해져 가독성이 떨어질 수 있다.\n2. 의존성증가: 특정 어노테이션에 의존하게 되면 라이브러리, 프레임워크의 버전이 업그레이드 시 이슈가 발생할 수 있다.\n3. 성능저하: 어노테이션 처리를 위해 리플렉션을 사용하는 경우, 성능 저하가 발생할 수 있다.\n\n## 마치며\n\n앞서 어노테이션에 대해 알아봤다. 이제 질문에 답할 시간이다.\n\n개발자들은 흔히 좋은 코드, 나쁜 코드에 대해 이야기한다. 절대적인 정답은 없지만 나쁜 코드에 대해 이야기할 때 **같은 코드의 반복**을 이야기하곤 한다.\n코드의 반복을 줄이는 여러 방법 중 어노테이션도 하나의 방법이다. 이는 코드의 가독성과 유지보수성을 향상한다. 또한 컴파일러나 개발 도구에 특정 정보를 제공하여 추가 기능을 활용할 수 있다. (리플렉션을 통한\n메타데이터 접근)\n\n> 물론 자바 본질에서 벗어날 수 있는 위기도 있다. 예를 들어 애노테이션(코드에 주석처럼 달아 특수한 의미를 부여하는 기술)의 범람이 대표적이다. 애노테이션은 코드를 적게 작성하고, 더 빠르게 앱을 개발할 수\n> 있다는 점에서 장점이 있었다.\n> 그러나 애노테이션은 한계가 있었다. 컴파일러에 의해 검증이 불가능하고 상속 확장 규칙의 표준이 없었다. 이해하기 어렵고 오해하기 쉬운 코드가 생산될 수 있으며, 테스트 및 커스터마이징이 어려웠다. 자바의 본질과\n> 멀어졌다.\n>\n> 📝 기사 | 인터뷰 <[자바가 죽었다구요? 천만의 말씀](https://byline.network/2017/08/31-3/)> by 토비(이일민)\n\n- 은빛 총알은 없다\n\n> No Silver Bullet – Essence and Accident in Software Engineering\n>\n> 📝\n> 논문 <[No Silver Bullet — Essence and Accident in Software Engineering](https://ko.wikipedia.org/wiki/%EC%9D%80%EB%B9%9B_%EC%B4%9D%EC%95%8C%EC%9D%80_%EC%97%86%EB%8B%A4)>\n> by Fred Brooks\n\n그렇다면 어노테이션은 모든 문제를 해결할 수 있을까? 그렇지 않다. 어노테이션 역시 장단점이 있으므로, 상황에 따라 적절하게 사용해야 한다. 프로젝트의 요구사항이 맞는지, 복잡성을 고려하여 사용여부를 결정해야 한다.\n어노테이션은 강력한 도구지만 은빛 총알은 아니라는 점을 명심해야 한다.\n\n추가로 나만의 커스텀 어노테이션을 직접 만들지 않아도 이미 대부분의 기능이 각 라이브러리, 프레임워크에서 제공 중이다. 따라서 검색과 공식문서를 통해 해결할 수 있는 방법이 없는지 먼저 확인하자.\n\n### 함께 자라기\n\n- [인프런 질문 & 답변 어노테이션 by 김영한님](https://www.inflearn.com/questions/91272/comment/78583)\n- [Don't repeat yourself(DRY)](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n- [Baeldung Creating a Custom Annotation in Java](https://www.baeldung.com/java-custom-annotation)\n- [Oracle The Java Tutorials](https://docs.oracle.com/javase/tutorial/java/annotations/)\n"},{"excerpt":"코드컨벤션을 지키면서 어떻게 프로그래밍할 수 있을까? IntelliJ에서 코드 컨벤션을 적용하는 방법을 알아보자. 준비하기  먼저 저장소에서 설정에 필요한 파일을 다운로드 해야한다. Formatter  다운로드한  를 import 한다. 스키마의 이름을 설정한다. 다양한 컨벤션을 적용하는 상황에는 유의미한 이름을 권장한다. 자동 적용하기 자동으로 컨벤션이…","fields":{"slug":"/intellij-code-convention/"},"frontmatter":{"date":"April 27, 2024","title":"IntelliJ Code convention 적용하기","tags":["IDE"]},"rawMarkdownBody":"\n코드컨벤션을 지키면서 어떻게 프로그래밍할 수 있을까? IntelliJ에서 코드 컨벤션을 적용하는 방법을 알아보자.\n\n## 준비하기\n\n![준비물](./images/get-reddy.png)\n\n먼저 [저장소](https://github.com/naver/hackday-conventions-java/tree/master/rule-config)에서 설정에 필요한 파일을 다운로드 해야한다.\n\n## Formatter\n\n![Editor | Code Style | Java](./images/naver-convention.png)\n\n1. 다운로드한 `naver-intellij-formatter.xml` 를 import 한다.\n2. 스키마의 이름을 설정한다. 다양한 컨벤션을 적용하는 상황에는 유의미한 이름을 권장한다.\n\n### 자동 적용하기\n\n자동으로 컨벤션이 적용될 수 있도록 추가설정을 해보자.\n\n![Tools | Action on Save](./images/action-on-save.png)\n\n> - Reformat code: 자동으로 포맷 적용\n> - Optimize imports: 사용하지 않는 import 제거\n\n설정이 적용되지 않았다면 IDE 재시작이 필요하다.\n\n## CheckStyle\n\n![Plugins | Marketplace | CheckStyle-IDEA](./images/checkstyle-idea.png)\n\n컨벤션을 준수하여 코드를 작성했는지 확인하고 싶지 않나요? 정적 코드 분석도구를 설치해 보자.\n\n![CheckStyle 설정하기 1](images/checkstyle-setting.png)\n\n1. CheckStyle-IDEA 플러그인을 설치하고 재시작하자.\n2. 이미지와 같이 Scope와 Treat Checkstyle errors as warnings를 설정해야 한다. 표기되는 version은 다를 수 있지만 8.24 이상의 버전을 선택해야 한다.\n\n![CheckStyle 설정하기 2](./images/checkstyle-setting-2.png)\n\n3. 다운로드한 `naver-checkstyle-rules.xml`을 Browse 한다.\n\n![CheckStyle 설정하기 3](images/checkstyle-setting-3.png)\n\n4. 예외 정책을 지정한다면 변숫값 `naver-checkstyle-suppressions.xml`를 지정한다.\n\n![CheckStyle 설정하기 4](./images/checkstyle-setting-4.png)\n\n5. 규칙을 사용하도록 꼭 체크해 주세요.\n\n![설정완료](./images/checkstyle-finish.png)\n\n6. 설정을 완료하면 아래 CheckStyle이 표시된다.\n\n## 마치며\n\n추가설정이나 상세 설정은 공식문서를 참고하자.\n\n### 함께 자라기\n\n- [캠퍼스 핵데이 Java 코딩 컨벤션](https://naver.github.io/hackday-conventions-java/)\n- [Code convention과 개발자가 지켜야할 수칙에 관하여](https://novemberde.github.io/post/2017/05/21/Javascript_policy/)\n- [정적 분석(Static Analysis)이란?](https://hudi.blog/static-analysis/)\n"},{"excerpt":"프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자. SELECT SELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수…","fields":{"slug":"/sql-first-step-2/"},"frontmatter":{"date":"April 18, 2024","title":"[SQL 첫걸음] 2장. 테이블에서 데이터 검색","tags":["Database"]},"rawMarkdownBody":"\n```sql\nSELECT * FROM 테이블명;\n```\n\n프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자.\n\n## SELECT\n\nSELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수 있다.\n\n예를 들어 다음 쿼리의 경우 SELECT 구, FROM 구를 가진다.\n\n```sql\nSELECT * FROM blog;\n```\n\nSELECT 명령은 여러 구로 구성된다. 명령을 작성할 때는 예약어는 대문자로, 객체명은 소문자로 작성하는 방법이 가독성에 좋다.\n\n### 값이 없는 데이터 = NULL\n\nNULL은 값이 저장되지 않은 상태를 의미한다. **NULL을 이해하는 것은 SQL에서 중요하다.**\n\n## 테이블 구조 참조하기\n\n```sql\nDESC 테이블명;\n```\n\n테이블의 구조를 참조할 때 `DESC` 명령을 사용한다.\n\n## 검색 조건 지정하기\n\n```sql\nSELECT 열1, 열2 FROM 테이블명 WHERE 조건식;\n```\n\n조건을 지정하여 데이터를 조회할 때 `WHERE`구를 사용한다. 조건식에 일치하는 행이 전혀 없을 경우 아무것도 반환하지 않는다.\n\n- WHERE 구로 행을, SELECT 구로 열을 선택한다.\n\n앞서 별표를 사용하여 전체열을 지정했다. 특정열을 지정할 때는 열명을 지정한다.\n\n### NULL값 검색\n\n```sql\nSELECT 열 FROM 테이블명 WHERE 열 IS NULL; \n```\n\n조건식을 작성할 때 `=`, `<>`와 같은 비교 연산자를 사용했다. 하지만 NULL 값을 다룰 때는 주의가 필요하다. NULL 값을 조회할 때는 `IS NULL`을 사용한다.\n\n## 조건 조합하기\n\n논리 연산자 `AND`, `OR`, `NOT`를 사용해서 복잡한 조건 조합이 가능하다.\n\n### AND로 조합하기\n\n```sql \n조건식1 AND 조건식2 \n``` \n\n`AND`는 여러 조건을 만족해야 한다. 집합으로 표현하면 '교집합'이다.\n\n### OR로 조합하기 \n\n```sql\n조건식1 OR 조건식2\n```\n\n`OR`은 어느 쪽이든 조건을 만족하는 행을 모두 검색한다. 집합으로 표현하면 '합집합'이다.\n\n### 연산자의 우선 순위\n\n`AND`는 `OR`에 비해 우선순위가 높다. 원하는 결과를 조회하기 위해서는 괄호를 사용한다.\n\n### NOT으로 조합\n\n```sql\nNOT 조건식\n```\n\n조건식의 반대 값을 반환한다.\n\n## 패턴 매칭에 의한 검색\n\n`LIKE` 술어는 문자열의 일부분을 비교하는 '부분 검색'을 할 수 있다. 특정 문자나 문자열을 조회하는 방법을 '패턴매칭' 또는 '부분검색'이라 한다.\n\n### LIKE로 패턴 매칭하기\n\n```sql\n열명 LIKE '패턴'\n```\n\n패턴을 정의할 때는 메타문자(와일드카드)를 사용한다. 메타문자는 다음과 같다.\n\n- 퍼센트(%): 임의의 문자열\n- 언더스코어(_): 임의의 문자 하나\n- 와일드카드로 자주 쓰이는 `*`는 LIKE에서 사용할 수 없다. \n\n```sql\nWHERE 열명 LIKE '%\\%%'\n```\n\n메타문자 자체를 검색할 때는 '이스케이프' 문자 `역슬래시(\\)`를 사용한다. 간단한 패턴 매칭은 LIKE로 충분하지만 복잡한 패턴을 매칭하는 경우 `정규 표현식(Regular Expression)`을\n사용한다. 정규표현식에서 더 많은 메타문자를 사용해서 폭넓게 패턴을 지정할 수 있다.\n"},{"excerpt":"데이터베이스와 SQL 데이터베이스 데이터베이스란 데이터의 집합이다. 흔히 데이터를 조회할 때 정리된 시스템을 의미한다. 데이터를 영구보존하기 위해\n데이터 베이스가 탄생했다. 개인용 컴퓨터, 휴대용 기기, 웹, 계산대(POS)등 다양한 시스템에서 사용된다. 데이터베이스는 흔히 라는 약자로 통용된다. 앞서 말했듯이 데이터베이스는 데이터의 집합이다. 이를 효율…","fields":{"slug":"/sql-first-step-1/"},"frontmatter":{"date":"April 16, 2024","title":"[SQL 첫걸음] 1장. 데이터베이스와 SQL","tags":["Database"]},"rawMarkdownBody":"\n## 데이터베이스와 SQL\n\n### 데이터베이스\n\n데이터베이스란 데이터의 집합이다. 흔히 데이터를 조회할 때 정리된 시스템을 의미한다. 데이터를 영구보존하기 위해\n데이터 베이스가 탄생했다. 개인용 컴퓨터, 휴대용 기기, 웹, 계산대(POS)등 다양한 시스템에서 사용된다.\n\n데이터베이스는 흔히 `DB`라는 약자로 통용된다. 앞서 말했듯이 데이터베이스는 데이터의 집합이다. 이를 효율적으로 관리하는\n소프트웨어를 `DBMS(Database Management System)`라 부른다.\n\n그렇다면 `DBMS`를 어떻게 사용할 수 있을까? 컴퓨터와 대화하기 위해 프로그래밍 언어를 사용하듯이 `DBMS`와 대화를 위해 사용하는\n언어가 `SQL`이다.\n\n물론 모든 `DBMS`와 대화할 때 `SQL`을 사용하지 않는다. `SQL`은 `관계형 데이터베이스 관리 시스템(RDBMS: Relational Database Management\nSystem)`을 조작할 때 사용한다.\n\n### SQL\n\n`SQL` 명령어는 3가지로 나눌 수 있다.\n\n- DML(Data Manipulation Language)\n- 기본이 되는 명령어. 데이터를 추가, 삭제, 갱신, 조작할 때 사용\n- DDL(Data Definition Language)\n- 데이터를 정의하는 명령어. 객체를 만들거나 삭제할 때 사용\n- DCL(Data Control Language)\n- 데이터를 제어하는 명령어. 트랜잭션을 제어하거나 접근권한을 제어할 때 사용\n\n### 다양한 데이터베이스\n\n`DBMS`는 여러 환경에서 사용할 수 있도록 종류가 다양하다. 이때 `SQL`로 데이터를 다루는 데이터베이스를 `관계형 데이터베이스(RDB: Relational Database)`라 부른다.\n\n- SQL 방언과 표준화\n- 다양한 데이터베이스 제품이 있어서 비슷한 조작을 하더라도 서로 다른 명령어가 필요하다. 이를 특정 제품에만 통용되는 고유 방언이라 한다. 예를 들어 키워드 생략, JOIN 등이 있다.\n- 한국어도 여러 방언과 표준어가 있듯이 `SQL`에도 표준 SQL이 존재한다.\n"},{"excerpt":"이력서 이력서 초안을 작성하며 마무리하는 능력이 부족하다고 느꼈다. 강점, 경쟁력은 무엇일까라는 질문에 꾸준함이라고 항상 생각했다. 하지만 냉정하게 돌아보니 마무리한 프로젝트가 없었다. 마침표를 찍지 않고 다음으로 넘어가는 사람이라고 느껴졌다.\n스스로 생각하던 방향성과는 다르게 흘러갔다. 시스템 최근 더 시스템을 읽고 있다. 물음표가 생기는 내용도 있었지…","fields":{"slug":"/retrospective-20240331/"},"frontmatter":{"date":"March 31, 2024","title":"2024 월간 장태근 3월호 'NO PAIN'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/JaIMSzE5yLA?si=uVw70SzPt2DiKpMC\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n### 이력서\n\n이력서 초안을 작성하며 **마무리하는 능력이 부족하다고 느꼈다.**\n\n강점, 경쟁력은 무엇일까라는 질문에 **꾸준함이라고 항상 생각했다.** 하지만 냉정하게 돌아보니 마무리한 프로젝트가 없었다. 마침표를 찍지 않고 다음으로 넘어가는 사람이라고 느껴졌다.\n스스로 생각하던 방향성과는 다르게 흘러갔다.\n\n### 시스템\n\n최근 [더 시스템](https://product.kyobobook.co.kr/detail/S000211656046)을 읽고 있다. 물음표가 생기는 내용도 있었지만 전반적으로는 동의하는 내용이 많아서 흥미롭게\n읽고 있다. 책을 읽으면서 나만의 학습 방법과 시스템은 무엇일까에 물음이 생겨서 정리하는 시간을 가졌다.\n\n꾸준히 달리기와 회고를 이어 나가고 있다. 달리기로 하루를 시작하고 회고로 마무리한다. 하루가 야구처럼 흘러간다. 선발투수 달리기가 등판하고 [TickTick](https://ticktick.\ncom/webapp/)에 등록된 계획들이 구원 투수 역할을 한다. 그리고 마무리 투수 회고가 등판하여 마무리한다. 가끔씩 구원투수에서 예상하지 못한 상황이 생길 때마다 골치 아프다.\n하지만 단기전이 아니라 장기 전이라고 생각하고 꿋꿋하게 이어나가는 편이다.\n\n돌아보니 문제가 많은 시스템이었는데 꾸준히 돌아보며 보완하면 좋겠다.\n\n### 4월\n\n> 여러 가지 패턴 중에 이것이 좋은지, 저것이 좋은지 하루에 한 개만 시도를 해봅니다. 한꺼번에 두 개는 하지 않아요. 그런 다음 이게 좋았어, 이건 어땠지 하면서 매번 시도해\n> 보는 식이죠. 그걸 매일 아이패드에 기록하고 있습니다.\n>\n> 책 <오타니 쇼헤이의 쇼타임> 중\n\n1년이 지났고, 이번달을 돌아봤을 때 가장 인상 깊던 내용이다. 이력서와 시스템을 돌아보니 허점이 많았다. 지금이라도 알아채서 다행이다. 앞으로 마침표를 찍고 다음을 넘어가도록 신경 써야겠다.\n정리한 학습 계획을 중간 이탈 없이 지키고 유의미한 결과를 냈으면 좋겠다.\n"},{"excerpt":"다사다난 한 2월이 끝났다. 1년을 한달 앞 둔 지금, 어떤일이 있었을까? 2월 돌아보기 잔병치레 면역력이 떨어진 모양이다. 이번달에 특히 더 고생했다. 양쪽 귀에 염증도 생기고 속도 안 좋았다. 스트레스를 잘 관리했다고 생각했는데 아니었다.\n몸이 마음대로 안 움직이니 답답했다. 걱정도 더욱 많아지고 생각의 늪에 잠식당할 뻔했다. 몸이 보내는 경고 덕분에…","fields":{"slug":"/retrospective-20240229/"},"frontmatter":{"date":"February 29, 2024","title":"2024 월간 장태근 2월호 'Kingdom'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/QM8UMOERycA?si=inBabkaqWiS-qaEC\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n다사다난 한 2월이 끝났다. 1년을 한달 앞 둔 지금, 어떤일이 있었을까?\n\n## 2월 돌아보기\n\n### 잔병치레\n\n면역력이 떨어진 모양이다. 이번달에 특히 더 고생했다. 양쪽 귀에 염증도 생기고 속도 안 좋았다. 스트레스를 잘 관리했다고 생각했는데 아니었다.\n몸이 마음대로 안 움직이니 답답했다. 걱정도 더욱 많아지고 생각의 늪에 잠식당할 뻔했다.\n\n몸이 보내는 경고 덕분에 다시 운동을 시작했다. 최근 나태하고 균형 있게 잠들지도 않았던 나를 다시 돌아볼 수 있는 시간이었다.\n8시간 푹 자는 시간을 제외한 남은 16시간을 알차게 사용해야겠다.\n\n### [30만 수강생 기념] 김영한님 밋업\n\n매일 잠들기 전에 휴대폰 알림을 확인한다. 늘 그렇듯 광고 메시지들이 쌓여있겠지? 하는 생각으로 메시지를 확인했는데 당황스러웠다. 오프라인 밋업에 당첨됐다.\n설레는 마음을 가득안고 인프랩으로 향했다.\n\n![김영한님 오프라인 밋업](inflearn-meet-up.png)\n\n너무 만족스러운 시간이었다. 영한님과 향로님께서 풀어내시는 이야기의 주제들, 답변이 좋았다. 특히 온라인으로 진행되는 라이브가 끝나고 가진 시간이 유익했다.\n라이브 세션은 포괄적인 답변이었다면 오프라인에서 진행된 세션은 다양한 사연들(시니어, 주니어, 취준생)에 가감 없는 답변이 오갔다.\n특히 늦은 시간까지 질문도 정말 많이 받아주셨다. 행사 관계자분들께 감사드립니다.\n\n### 여행\n\n![강원도 묵호 🌅](sunset.png)\n\n오랜만에 가족여행을 다녀왔다. 출발 전까지만 해도 밀린 과제들이 많아서 걱정이 앞섰는데 다녀오길 잘했다. 목 놓아 외치던 바다도 마음껏 보며 바람에 몸을 맡겼다.\n결과적으로 기분전환이 되었고 능률이 향상되었다. 목표를 위해 견디는 것도 좋지만 가끔 기분전환을 해야겠다.\n\n### 블로그\n\n방랑자의 삶을 마치고 **Gatsby로 최종결정했다.**\n\n예전부터 블로그를 만들고 학습내용을 정리하는 방법에 대해 추천받았다. 알고있었지만 괜찮은 플랫폼이 마땅히 보이지 않았고, 결국 각 저장소에 문서를 작성했다.\n그런데 이 방법이 문제가 있었다. 문서를 찾기 어려웠다. 내가 작성한 문서를 찾는데 불필요한 시간 소모가 반복되었다. 이럴거면 어차피 정리하던거 본격적으로 해보자 다짐했다.\n\n## 마치며\n\n한 달 후면 1년이다. 작성하고 하고 싶은 글이 많다. 저장소에 작성된 내용을 다듬어서 발행할 시간이다.\n\n* Series: 노드 웹 프로그래밍 Next Step: 배포하기\n\n적극적으로 살길 바란다. 취업전선에서 지원서도 넣으면서 지내야지. **3월은 더 많이 실패하자.**\n"},{"excerpt":"소중했던 2023년이 가고 2024년이 찾아왔다. 결과만 보았을 때 2023년 한 해는 안식년이었다. 원하는 결과를\n얻지 못했다. 하지만 끝없이 연습하고 나만의 루틴을 찾았다. 의식적인 연습 순탄치 않았다. 오래 쉬었다는 사실이 너무나 체감돼서 더욱더 노력하는 방법밖에 없었다. 견뎠다. 가장 큰 화두는\n꾸준함이다. 개발자를 다시 도전하는 게 맞나? 내가 …","fields":{"slug":"/retrospective-2023/"},"frontmatter":{"date":"January 01, 2024","title":"행보 2023 장태근","tags":["연간"]},"rawMarkdownBody":"\n소중했던 2023년이 가고 2024년이 찾아왔다. 결과만 보았을 때 2023년 한 해는 안식년이었다. 원하는 결과를\n얻지 못했다. 하지만 끝없이 연습하고 나만의 루틴을 찾았다.\n\n## 의식적인 연습\n\n순탄치 않았다. 오래 쉬었다는 사실이 너무나 체감돼서 더욱더 노력하는 방법밖에 없었다. 견뎠다. 가장 큰 화두는\n꾸준함이다. 개발자를 다시 도전하는 게 맞나? 내가 잘하고 있는 건가? 의심도 많고 힘들었다. 한편으론 이대로 눈 감으면 마음\n편하지 않을까 싶기도 했다. 하지만 꾸준히 하다 보니 자연스럽게 스스로에게 던진 질문이 해결되고 이제는 확신이 생겼다.\n\n## 마치며\n\n올 해는 소중했던 한 해의 과정을 결과로 증명하는 한 해가 되길 바란다. 더 많은 기회와 위기가 찾아올 것이다. 초심을 잃지 않고\n아무것도 없이 시작했던 나를 믿고 응원해 준 사람들을 생각하며 정진하길 바란다. 할 수 있다.\n"},{"excerpt":"2023.04.28 이전 블로그(Tistory)에서 작성한 글을 옮겼다.  \"아직 많이 부족한데 4월이 끝났다.\" 따분한 일상에서 '어떻게 생산적으로 시간을 보낼 수 있을까?'를 고민한 끝에 책 한 권 읽기를 달성했다.\n처음 주어진 휴일임에도 목표 달성을 위해 노력한 나에게 박수를 보낸다. 어떻게 사랑할 것인가 이동욱(향로)님의 글을 읽으며 '다시 개발자…","fields":{"slug":"/retrospective-20230428/"},"frontmatter":{"date":"April 28, 2023","title":"2023 월간 장태근 4월호 '타협하고 후퇴하지 마라'","tags":["회고"]},"rawMarkdownBody":"\n> 2023.04.28 이전 블로그(Tistory)에서 작성한 글을 옮겼다.\n\n![타협하고 후퇴하지 마라 <출처: 최강야구>](a-clean-sweep.png)\n\n**\"아직 많이 부족한데 4월이 끝났다.\"**\n\n따분한 일상에서 '어떻게 생산적으로 시간을 보낼 수 있을까?'를 고민한 끝에 책 한 권 읽기를 달성했다.\n처음 주어진 휴일임에도 목표 달성을 위해 노력한 나에게 박수를 보낸다.\n\n## 어떻게 사랑할 것인가\n\n[이동욱(향로)님의 글](https://jojoldu.tistory.com/661)을 읽으며 '다시 개발자를 도전해 볼까?'라는 용기를 얻었다. 끝에 책을 한 권 추천해 주셨는데 이유가 궁금했다.\n\n만족스럽다. 이 책은 저자가 문학에 대해 어떻게 생각하는지, 그리고 왜 필요한지 강연과 함께 질문을 던진다. 한 가지 주제에 대해 질문하고 여러 답변을 들을 수 있었다.\n사례와 비유가 적절해서 자연스럽게 설득된다.\n\n내용 외에도 짧고 술술 읽히는 문장이어서 좋았다. 하루에 대중교통을 이용하는 시간(30분 내외)에만 시간을 사용했는데 한 단원이 읽혔다. 그렇게 총 5일이 걸렸다.\n\n## 마치며\n\n\"부족하다. 그래서 목마르다.\"\n\n'나는 부족해. 그러니깐 일단 누워볼까?'는 항상 선택하던 방식이었다. 하지만 지금은 어떻게든 앞으로 나아가려고 물장구를 친다. 헛손질이어도 좋다.\n나는 내가 제일 잘 알아. 다음 달에는 이번달보다 조금 더 행복하자.\n\n**<참고 자료>**\n\n1. 『어떻게 사랑할 것인가』(장영희, 예담, 2012)\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}