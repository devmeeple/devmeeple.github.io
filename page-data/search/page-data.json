{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"드디어 스터디가 시작됐다. 첫 번째 과제는 자바 어노테이션(Java Annotation)에 대해 알아보는 질문 & 답변 시간이다. 어노테이션의 어떤 점이 중요해서 첫 번째 과제로 선정됐을까? 질문에 답하기 이전에 어노테이션이 무엇인지 먼저 알아보자. 어노테이션이란? 어노테이션은 Java SE 5에 등장했다. 출시된 지 무려 20년을 앞둔 기능이다. (참고…","fields":{"slug":"/task-1-java-annotation/"},"frontmatter":{"date":"April 29, 2024","title":"1. 자바 어노테이션","tags":["Java"]},"rawMarkdownBody":"\n드디어 스터디가 시작됐다. 첫 번째 과제는 자바 어노테이션(Java Annotation)에 대해 알아보는 질문 & 답변 시간이다. 어노테이션의 어떤 점이 중요해서 첫 번째 과제로 선정됐을까?\n\n```text \n💡 [질문] \n\n1. 어노테이션을 사용하는 이유(효과)는 무엇일까? \n2. 나만의 어노테이션을 어떻게 만들 수 있을까? \n\n``` \n\n질문에 답하기 이전에 어노테이션이 무엇인지 먼저 알아보자.\n\n## 어노테이션이란?\n\n어노테이션은 Java SE 5에 등장했다. 출시된 지 무려 20년을 앞둔 기능이다. (참고로 Generic, Enum도 이때 등장했다)\n\n어노테이션이 도입되기 전에는 메타데이터(코드에 대한 부가 정보)를 자바코드에 직접 작성할 수 없었다. 메타데이터를 표현하기 위해서는 별도의 파일이나 외부 도구를 통해 관리했다. 예를 들어,\n메서드가 상위 클래스의 메서드를 오버라이드하고 있다는 사실을 표현하려면 주석을 달거나 문서화해야 했다.\n\n```java \npublic class Ezreal extends Champion { \n    // 오버라이드 된 메서드 \n    public void attack() { \n    // 상위 클래스의 메서드를 오버라이드 한다는 사실을 알려주는 방법이 없다. \n    } \n} \n``` \n\n이런 식으로 `attack()`메서드는 오버라이드가 된 메서드임을 나타냈다. 어노테이션을 적극적으로 사용하는 현재, 다음과 같이 작성된 코드는 어딘가 부자연스럽다. 유지보수 시 주석이 누락되거나 잘못 작성되었다면 어땠을까?\n\n```java \npublic class Ezreal extends Champion { \n    @Override \n    public void attack() { \n    // @Override 어노테이션으로 오버라이드 사실을 명시 \n    } \n} \n``` \n\n반면 어노테이션이 새롭게 도입되면서 메타데이터를 자바코드 내에 직접 포함할 수 있게 됐다. 이를 통해 코드의 가독성과 유지 보수성이 향상됐다.\n\n현재 우리는 어노테이션을 흔하게 접할 수 있다. 예를 들어 자주 사용하는 라이브러리, 프레임워크에서 접할 수 있다. \n\n- [Lombok 라이브러리](https://projectlombok.org/)\n\n```java \n@Getter \n@Setter \npublic class User { \n    private String name; \n    private String age; \n} \n``` \n\n- [Spring 프레임워크](https://docs.spring.io/spring-framework/reference/index.html)\n\n```java \n@Service \npublic class UserService { \n    //... \n} \n``` \n\n- [JUnit 테스트 프레임워크](https://junit.org/junit5/)\n\n```java \npublic class UserTest { \n\n    @Test \n    public void testCreateUser() { \n    // 테스트 코드 \n    } \n} \n``` \n\n이렇게 어노테이션은 다양한 라이브러리와 프레임워크에서 이미 활용되고 있다.\n\n### 커스텀 어노테이션(나만의 어노테이션)\n\n어노테이션을 만들려면 어떻게 해야 할까? `@interface` 문법을 사용하여 사용자 정의 어노테이션을 만들 수 있다.\n\n```java \n@Target(ElementType.TYPE) // 클래스에만 적용 가능 \n@Retention(RetentionPolicy.RUNTIME) // 런타임까지 유지 \npublic @interface Book { \n    String title(); \n    String author(); \n} \n``` \n\n어노테이션에 포함될 요소와 데이터 유형을 지정하고, 메타데이터(@Retention, @Target 등)를 지정한다. 이렇게 어노테이션을 정의하고 사용할 수 있다.\n\n### 주의점\n\n어노테이션의 강력한 기능을 알아봤다. 하지만 과도하게 사용하면 오히려 역효과가 날 수 있다.\n\n1. 가독성저하: 코드가 복잡해져 가독성이 떨어질 수 있다.\n2. 의존성증가: 특정 어노테이션에 의존하게 되면 라이브러리, 프레임워크의 버전이 업그레이드 시 이슈가 발생할 수 있다.\n3. 성능저하: 어노테이션 처리를 위해 리플렉션을 사용하는 경우, 성능 저하가 발생할 수 있다.\n\n## 마무리\n\n앞서 어노테이션에 대해 알아봤다. 이제 질문에 답할 시간이다.\n\n개발자들은 흔히 좋은 코드, 나쁜 코드에 대해 이야기한다. 절대적인 정답은 없지만 나쁜 코드에 대해 이야기할 때 **같은 코드의 반복**을 이야기하곤 한다.\n코드의 반복을 줄이는 여러 방법 중 어노테이션도 하나의 방법이다. 이는 코드의 가독성과 유지보수성을 향상한다. 또한 컴파일러나 개발 도구에 특정 정보를 제공하여 추가 기능을 활용할 수 있다. (리플렉션을 통한 메타데이터 접근)\n\n> 물론 자바 본질에서 벗어날 수 있는 위기도 있다. 예를 들어 애노테이션(코드에 주석처럼 달아 특수한 의미를 부여하는 기술)의 범람이 대표적이다. 애노테이션은 코드를 적게 작성하고, 더 빠르게 앱을 개발할 수 있다는 점에서 장점이 있었다.\n> 그러나 애노테이션은 한계가 있었다. 컴파일러에 의해 검증이 불가능하고 상속 확장 규칙의 표준이 없었다. 이해하기 어렵고 오해하기 쉬운 코드가 생산될 수 있으며, 테스트 및 커스터마이징이 어려웠다. 자바의 본질과 멀어졌다.\n>\n> 📝 기사 | 인터뷰 <[자바가 죽었다구요? 천만의 말씀](https://byline.network/2017/08/31-3/)> by 토비(이일민)\n\n- 은빛 총알은 없다\n\n> No Silver Bullet – Essence and Accident in Software Engineering\n> \n> 📝 논문 <[No Silver Bullet — Essence and Accident in Software Engineering](https://ko.wikipedia.org/wiki/%EC%9D%80%EB%B9%9B_%EC%B4%9D%EC%95%8C%EC%9D%80_%EC%97%86%EB%8B%A4)> by Fred Brooks\n\n그렇다면 어노테이션은 모든 문제를 해결할 수 있을까? 그렇지 않다. 어노테이션 역시 장단점이 있으므로, 상황에 따라 적절하게 사용해야 한다. 프로젝트의 요구사항이 맞는지, 복잡성을 고려하여 사용여부를 결정해야 한다.\n어노테이션은 강력한 도구지만 은빛 총알은 아니라는 점을 명심해야 한다.\n\n추가로 나만의 커스텀 어노테이션을 직접 만들지 않아도 이미 대부분의 기능이 각 라이브러리, 프레임워크에서 제공 중이다. 따라서 검색과 공식문서를 통해 해결할 수 있는 방법이 없는지 먼저 확인하자.\n\n### 함께 자라기 \n\n- [인프런 질문 & 답변 어노테이션 by 김영한님](https://www.inflearn.com/questions/91272/comment/78583)\n- [Don't repeat yourself(DRY)](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n- [Baeldung Creating a Custom Annotation in Java](https://www.baeldung.com/java-custom-annotation)\n- [Oracle The Java Tutorials](https://docs.oracle.com/javase/tutorial/java/annotations/)\n"},{"excerpt":"커밋을 작성할 때 수정한 파일을 제대로 확인하지 않았다. 여러 파일을 동시에 수정하거나 한 번에 커밋을 올리는 습관을 이어나가다 결국 중요한 파일을 빼고 커밋했다. 어떻게 문제를 해결할 수\n있을까? 이전 커밋을 이야기할 때 흔히 마주하던 상황은 두 가지이다. 최근커밋 과거특정커밋 문제를 해결하기 위해서는 HEAD 위치를 이동해야 한다. 1. 최근커밋 가장…","fields":{"slug":"/changing-a-commit-message/"},"frontmatter":{"date":"April 27, 2024","title":"Git 이전커밋 메시지 수정하기","tags":["Git"]},"rawMarkdownBody":"\n커밋을 작성할 때 수정한 파일을 제대로 확인하지 않았다. 여러 파일을 동시에 수정하거나 한 번에 커밋을 올리는 습관을 이어나가다 **결국 중요한 파일을 빼고 커밋했다.** 어떻게 문제를 해결할 수\n있을까?\n\n이전 커밋을 이야기할 때 흔히 마주하던 상황은 두 가지이다.\n\n1. 최근커밋\n2. 과거특정커밋\n\n문제를 해결하기 위해서는 HEAD 위치를 이동해야 한다.\n\n## 1. 최근커밋\n\n```shell \ngit commit --amend \n``` \n\n가장 긍정적이고 쉽게 해결할 수 있는 방법이다. 최근커밋의 경우 이미 HEAD가 마지막 커밋을 가리키고 있기 때문에 `--amend` 옵션으로 파일을 추가하거나, 커밋 메시지를 수정하면 된다.\n\n## 2. 과거특정커밋\n\n최근커밋에 비해서 골치 아프지만 반복하면 쉽게 해결할 수 있다. 먼저 수정하고 싶은 커밋을 알아보자.\n\n```shell \ngit log \n```\n\n![과거특정커밋 수정하기 시나리오](./images/setup-rebase.png)\n\n`git log` 명령을 실행해서 커밋내역을 확인한다. 예를 들어 **수정하고 싶은 커밋이 0eb0d7**로 시작하는 커밋일 때 HEAD를 바로 **직전커밋인 230339로 이동**해야 한다.\n\n```shell\ngit rebase -i 230339 #<직전커밋>\n```\n\n직전커밋 로그로 이동하고 **pick으로 표시되는 해쉬값을 edit으로 수정한다.** 에디터로 작업을 마치면 해결하고 싶던 파일을 작성하고 추가하면 된다.\n\n![과거특정커밋 수정하기 완료](./images/rebase-continue.png)\n\n전체과정은 다음과 같다. 개발도구로 파일을 추가한 후 커밋 메시지를 수정했다.\n\n## 마무리\n\n흔히 마주하던 2가지 상황을 알아봤다. 커밋을 최소한의 단위로 잘 나눠야 된다고 한번 더 느꼈다. 분기를 잘 나눠야 충돌과 같은 다른 문제가 발생했을 때도 쉽게 해결할 수 있다. \n\n> 만약 협업을 진행 중이고 이미 원격저장소에 올린 상황이라면 추가 작업이 필요하다.\n"},{"excerpt":"코드컨벤션을 지키면서 어떻게 프로그래밍할 수 있을까? IntelliJ에서 코드 컨벤션을 적용하는 방법을 알아보자. 준비하기  먼저 저장소에서 설정에 필요한 파일을 다운로드 해야한다. Formatter  다운로드한  를 import 한다. 스키마의 이름을 설정한다. 다양한 컨벤션을 적용하는 상황에는 유의미한 이름을 권장한다. 자동 적용하기 자동으로 컨벤션이…","fields":{"slug":"/intellij-code-convention/"},"frontmatter":{"date":"April 27, 2024","title":"IntelliJ Code convention 적용하기","tags":["IDE"]},"rawMarkdownBody":"\n코드컨벤션을 지키면서 어떻게 프로그래밍할 수 있을까? IntelliJ에서 코드 컨벤션을 적용하는 방법을 알아보자.\n\n## 준비하기\n\n![준비물](./images/get-reddy.png)\n\n먼저 [저장소](https://github.com/naver/hackday-conventions-java/tree/master/rule-config)에서 설정에 필요한 파일을 다운로드 해야한다.\n\n## Formatter\n\n![Editor | Code Style | Java](./images/naver-convention.png)\n\n1. 다운로드한 `naver-intellij-formatter.xml` 를 import 한다.\n2. 스키마의 이름을 설정한다. 다양한 컨벤션을 적용하는 상황에는 유의미한 이름을 권장한다.\n\n### 자동 적용하기\n\n자동으로 컨벤션이 적용될 수 있도록 추가설정을 해보자.\n\n![Tools | Action on Save](./images/action-on-save.png)\n\n> - Reformat code: 자동으로 포맷 적용\n> - Optimize imports: 사용하지 않는 import 제거\n\n설정이 적용되지 않았다면 IDE 재시작이 필요하다.\n\n## CheckStyle\n\n![Plugins | Marketplace | CheckStyle-IDEA](./images/checkstyle-idea.png)\n\n컨벤션을 준수하여 코드를 작성했는지 확인하고 싶지 않나요? 정적 코드 분석도구를 설치해 보자.\n\n![CheckStyle 설정하기 1](images/checkstyle-setting.png)\n\n1. CheckStyle-IDEA 플러그인을 설치하고 재시작하자.\n2. 이미지와 같이 Scope와 Treat Checkstyle errors as warnings를 설정해야 한다. 표기되는 version은 다를 수 있지만 8.24 이상의 버전을 선택해야 한다.\n\n![CheckStyle 설정하기 2](./images/checkstyle-setting-2.png)\n\n3. 다운로드한 `naver-checkstyle-rules.xml`을 Browse 한다.\n\n![CheckStyle 설정하기 3](images/checkstyle-setting-3.png)\n\n4. 예외 정책을 지정한다면 변숫값 `naver-checkstyle-suppressions.xml`를 지정한다.\n\n![CheckStyle 설정하기 4](./images/checkstyle-setting-4.png)\n\n5. 규칙을 사용하도록 꼭 체크해 주세요.\n\n![설정완료](./images/checkstyle-finish.png)\n\n6. 설정을 완료하면 아래 CheckStyle이 표시된다.\n\n## 마무리\n\n추가설정이나 상세 설정은 공식문서를 참고하자.\n\n### 함께 자라기\n\n- [캠퍼스 핵데이 Java 코딩 컨벤션](https://naver.github.io/hackday-conventions-java/)\n- [Code convention과 개발자가 지켜야할 수칙에 관하여](https://novemberde.github.io/post/2017/05/21/Javascript_policy/)\n- [정적 분석(Static Analysis)이란?](https://hudi.blog/static-analysis/)\n"},{"excerpt":"프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자. SELECT SELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수…","fields":{"slug":"/select-in-table/"},"frontmatter":{"date":"April 18, 2024","title":"[SQL 첫걸음] 2. 테이블에서 데이터 검색","tags":["SQL"]},"rawMarkdownBody":"\n```sql\nSELECT * FROM 테이블명;\n```\n\n프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자.\n\n## SELECT\n\nSELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수 있다.\n\n예를 들어 다음 쿼리의 경우 SELECT 구, FROM 구를 가진다.\n\n```sql\nSELECT * FROM blog;\n```\n\nSELECT 명령은 여러 구로 구성된다. 명령을 작성할 때는 예약어는 대문자로, 객체명은 소문자로 작성하는 방법이 가독성에 좋다.\n\n### 값이 없는 데이터 = NULL\n\nNULL은 값이 저장되지 않은 상태를 의미한다. **NULL을 이해하는 것은 SQL에서 중요하다.**\n\n## 테이블 구조 참조하기\n\n```sql\nDESC 테이블명;\n```\n\n테이블의 구조를 참조할 때 `DESC` 명령을 사용한다.\n\n## 검색 조건 지정하기\n\n```sql\nSELECT 열1, 열2 FROM 테이블명 WHERE 조건식;\n```\n\n조건을 지정하여 데이터를 조회할 때 `WHERE`구를 사용한다. 조건식에 일치하는 행이 전혀 없을 경우 아무것도 반환하지 않는다.\n\n- WHERE 구로 행을, SELECT 구로 열을 선택한다.\n\n앞서 별표를 사용하여 전체열을 지정했다. 특정열을 지정할 때는 열명을 지정한다.\n\n### NULL값 검색\n\n```sql\nSELECT 열 FROM 테이블명 WHERE 열 IS NULL; \n```\n\n조건식을 작성할 때 `=`, `<>`와 같은 비교 연산자를 사용했다. 하지만 NULL 값을 다룰 때는 주의가 필요하다. NULL 값을 조회할 때는 `IS NULL`을 사용한다.\n\n## 조건 조합하기\n\n논리 연산자 `AND`, `OR`, `NOT`를 사용해서 복잡한 조건 조합이 가능하다.\n\n### AND로 조합하기\n\n```sql \n조건식1 AND 조건식2 \n``` \n\n`AND`는 여러 조건을 만족해야 한다. 집합으로 표현하면 '교집합'이다.\n\n### OR로 조합하기 \n\n```sql\n조건식1 OR 조건식2\n```\n\n`OR`은 어느 쪽이든 조건을 만족하는 행을 모두 검색한다. 집합으로 표현하면 '합집합'이다.\n\n### 연산자의 우선 순위\n\n`AND`는 `OR`에 비해 우선순위가 높다. 원하는 결과를 조회하기 위해서는 괄호를 사용한다.\n\n### NOT으로 조합\n\n```sql\nNOT 조건식\n```\n\n조건식의 반대 값을 반환한다.\n\n## 패턴 매칭에 의한 검색\n\n`LIKE` 술어는 문자열의 일부분을 비교하는 '부분 검색'을 할 수 있다. 특정 문자나 문자열을 조회하는 방법을 '패턴매칭' 또는 '부분검색'이라 한다.\n\n### LIKE로 패턴 매칭하기\n\n```sql\n열명 LIKE '패턴'\n```\n\n패턴을 정의할 때는 메타문자(와일드카드)를 사용한다. 메타문자는 다음과 같다.\n\n- 퍼센트(%): 임의의 문자열\n- 언더스코어(_): 임의의 문자 하나\n- 와일드카드로 자주 쓰이는 `*`는 LIKE에서 사용할 수 없다. \n\n```sql\nWHERE 열명 LIKE '%\\%%'\n```\n\n메타문자 자체를 검색할 때는 '이스케이프' 문자 `역슬래시(\\)`를 사용한다. 간단한 패턴 매칭은 LIKE로 충분하지만 복잡한 패턴을 매칭하는 경우 `정규 표현식(Regular Expression)`을\n사용한다. 정규표현식에서 더 많은 메타문자를 사용해서 폭넓게 패턴을 지정할 수 있다.\n"},{"excerpt":"데이터베이스와 SQL 데이터베이스 데이터베이스란 데이터의 집합이다. 흔히 데이터를 조회할 때 정리된 시스템을 의미한다. 데이터를 영구보존하기 위해\n데이터 베이스가 탄생했다. 개인용 컴퓨터, 휴대용 기기, 웹, 계산대(POS)등 다양한 시스템에서 사용된다. 데이터베이스는 흔히 라는 약자로 통용된다. 앞서 말했듯이 데이터베이스는 데이터의 집합이다. 이를 효율…","fields":{"slug":"/database-and-sql/"},"frontmatter":{"date":"April 16, 2024","title":"[SQL 첫걸음] 1. 데이터베이스와 SQL","tags":["SQL"]},"rawMarkdownBody":"\n## 데이터베이스와 SQL\n\n### 데이터베이스\n\n데이터베이스란 데이터의 집합이다. 흔히 데이터를 조회할 때 정리된 시스템을 의미한다. 데이터를 영구보존하기 위해\n데이터 베이스가 탄생했다. 개인용 컴퓨터, 휴대용 기기, 웹, 계산대(POS)등 다양한 시스템에서 사용된다.\n\n데이터베이스는 흔히 `DB`라는 약자로 통용된다. 앞서 말했듯이 데이터베이스는 데이터의 집합이다. 이를 효율적으로 관리하는\n소프트웨어를 `DBMS(Database Management System)`라 부른다.\n\n그렇다면 `DBMS`를 어떻게 사용할 수 있을까? 컴퓨터와 대화하기 위해 프로그래밍 언어를 사용하듯이 `DBMS`와 대화를 위해 사용하는\n언어가 `SQL`이다.\n\n물론 모든 `DBMS`와 대화할 때 `SQL`을 사용하지 않는다. `SQL`은 `관계형 데이터베이스 관리 시스템(RDBMS: Relational Database Management\nSystem)`을 조작할 때 사용한다.\n\n### SQL\n\n`SQL` 명령어는 3가지로 나눌 수 있다.\n\n- DML(Data Manipulation Language)\n- 기본이 되는 명령어. 데이터를 추가, 삭제, 갱신, 조작할 때 사용\n- DDL(Data Definition Language)\n- 데이터를 정의하는 명령어. 객체를 만들거나 삭제할 때 사용\n- DCL(Data Control Language)\n- 데이터를 제어하는 명령어. 트랜잭션을 제어하거나 접근권한을 제어할 때 사용\n\n### 다양한 데이터베이스\n\n`DBMS`는 여러 환경에서 사용할 수 있도록 종류가 다양하다. 이때 `SQL`로 데이터를 다루는 데이터베이스를 `관계형 데이터베이스(RDB: Relational Database)`라 부른다.\n\n- SQL 방언과 표준화\n- 다양한 데이터베이스 제품이 있어서 비슷한 조작을 하더라도 서로 다른 명령어가 필요하다. 이를 특정 제품에만 통용되는 고유 방언이라 한다. 예를 들어 키워드 생략, JOIN 등이 있다.\n- 한국어도 여러 방언과 표준어가 있듯이 `SQL`에도 표준 SQL이 존재한다.\n"},{"excerpt":"이력서 이력서 초안을 작성하며 마무리하는 능력이 부족하다고 느꼈다. 강점, 경쟁력은 무엇일까라는 질문에 꾸준함이라고 항상 생각했다. 하지만 냉정하게 돌아보니 마무리한 프로젝트가 없었다. 마침표를 찍지 않고 다음으로 넘어가는 사람이라고 느껴졌다.\n스스로 생각하던 방향성과는 다르게 흘러갔다. 시스템 최근 더 시스템을 읽고 있다. 물음표가 생기는 내용도 있었지…","fields":{"slug":"/2024-03-retrospective/"},"frontmatter":{"date":"March 31, 2024","title":"3월 회고","tags":["회고"]},"rawMarkdownBody":"\n### 이력서\n\n이력서 초안을 작성하며 **마무리하는 능력이 부족하다고 느꼈다.**\n\n강점, 경쟁력은 무엇일까라는 질문에 **꾸준함이라고 항상 생각했다.** 하지만 냉정하게 돌아보니 마무리한 프로젝트가 없었다. 마침표를 찍지 않고 다음으로 넘어가는 사람이라고 느껴졌다.\n스스로 생각하던 방향성과는 다르게 흘러갔다.\n\n### 시스템\n\n최근 [더 시스템](https://product.kyobobook.co.kr/detail/S000211656046)을 읽고 있다. 물음표가 생기는 내용도 있었지만 전반적으로는 동의하는 내용이 많아서 흥미롭게\n읽고 있다. 책을 읽으면서 나만의 학습 방법과 시스템은 무엇일까에 물음이 생겨서 정리하는 시간을 가졌다.\n\n꾸준히 달리기와 회고를 이어 나가고 있다. 달리기로 하루를 시작하고 회고로 마무리한다. 하루가 야구처럼 흘러간다. 선발투수 달리기가 등판하고 [TickTick](https://ticktick.\ncom/webapp/)에 등록된 계획들이 구원 투수 역할을 한다. 그리고 마무리 투수 회고가 등판하여 마무리한다. 가끔씩 구원투수에서 예상하지 못한 상황이 생길 때마다 골치 아프다.\n하지만 단기전이 아니라 장기 전이라고 생각하고 꿋꿋하게 이어나가는 편이다.\n\n돌아보니 문제가 많은 시스템이었는데 꾸준히 돌아보며 보완하면 좋겠다.\n\n### 4월\n\n> 여러 가지 패턴 중에 이것이 좋은지, 저것이 좋은지 하루에 한 개만 시도를 해봅니다. 한꺼번에 두 개는 하지 않아요. 그런 다음 이게 좋았어, 이건 어땠지 하면서 매번 시도해\n> 보는 식이죠. 그걸 매일 아이패드에 기록하고 있습니다.\n>\n> 책 <오타니 쇼헤이의 쇼타임> 중\n\n1년이 지났고, 이번달을 돌아봤을 때 가장 인상 깊던 내용이다. 이력서와 시스템을 돌아보니 허점이 많았다. 지금이라도 알아채서 다행이다. 앞으로 마침표를 찍고 다음을 넘어가도록 신경 써야겠다.\n정리한 학습 계획을 중간 이탈 없이 지키고 유의미한 결과를 냈으면 좋겠다."},{"excerpt":"다사다난 한 2월이 끝났다. 1년을 한달 앞 둔 지금, 어떤일이 있었을까? 2월 돌아보기 잔병치레 면역력이 떨어진 모양이다. 이번달에 특히 더 고생했다. 양쪽 귀에 염증도 생기고 속도 안 좋았다. 스트레스를 잘 관리했다고 생각했는데 아니었다.\n몸이 마음대로 안 움직이니 답답했다. 걱정도 더욱 많아지고 생각의 늪에 잠식당할 뻔했다. 몸이 보내는 경고 덕분에…","fields":{"slug":"/2024-02-retrospective/"},"frontmatter":{"date":"February 29, 2024","title":"2월 회고","tags":["회고"]},"rawMarkdownBody":"\n다사다난 한 2월이 끝났다. 1년을 한달 앞 둔 지금, 어떤일이 있었을까?\n\n## 2월 돌아보기\n\n### 잔병치레\n\n면역력이 떨어진 모양이다. 이번달에 특히 더 고생했다. 양쪽 귀에 염증도 생기고 속도 안 좋았다. 스트레스를 잘 관리했다고 생각했는데 아니었다.\n몸이 마음대로 안 움직이니 답답했다. 걱정도 더욱 많아지고 생각의 늪에 잠식당할 뻔했다.\n\n몸이 보내는 경고 덕분에 다시 운동을 시작했다. 최근 나태하고 균형 있게 잠들지도 않았던 나를 다시 돌아볼 수 있는 시간이었다.\n8시간 푹 자는 시간을 제외한 남은 16시간을 알차게 사용해야겠다.\n\n### [30만 수강생 기념] 김영한님 밋업\n\n매일 잠들기 전에 휴대폰 알림을 확인한다. 늘 그렇듯 광고 메시지들이 쌓여있겠지? 하는 생각으로 메시지를 확인했는데 당황스러웠다. 오프라인 밋업에 당첨됐다.\n설레는 마음을 가득안고 인프랩으로 향했다.\n\n![김영한님 오프라인 밋업](images/inflearn-meet-up.png)\n\n너무 만족스러운 시간이었다. 영한님과 향로님께서 풀어내시는 이야기의 주제들, 답변이 좋았다. 특히 온라인으로 진행되는 라이브가 끝나고 가진 시간이 유익했다.\n라이브 세션은 포괄적인 답변이었다면 오프라인에서 진행된 세션은 다양한 사연들(시니어, 주니어, 취준생)에 가감 없는 답변이 오갔다. \n특히 늦은 시간까지 질문도 정말 많이 받아주셨다. 행사 관계자분들께 감사드립니다.\n\n### 여행\n\n![강원도 묵호 🌅](images/sunset.png)\n\n오랜만에 가족여행을 다녀왔다. 출발 전까지만 해도 밀린 과제들이 많아서 걱정이 앞섰는데 다녀오길 잘했다. 목 놓아 외치던 바다도 마음껏 보며 바람에 몸을 맡겼다.\n결과적으로 기분전환이 되었고 능률이 향상되었다. 목표를 위해 견디는 것도 좋지만 가끔 기분전환을 해야겠다.\n\n### 블로그\n\n방랑자의 삶을 마치고 **Gatsby로 최종결정했다.**\n\n예전부터 블로그를 만들고 학습내용을 정리하는 방법에 대해 추천받았다. 알고있었지만 괜찮은 플랫폼이 마땅히 보이지 않았고, 결국 각 저장소에 문서를 작성했다.\n그런데 이 방법이 문제가 있었다. 문서를 찾기 어려웠다. 내가 작성한 문서를 찾는데 불필요한 시간 소모가 반복되었다. 이럴거면 어차피 정리하던거 본격적으로 해보자 다짐했다.\n\n## 마치며\n\n한 달 후면 1년이다. 작성하고 하고 싶은 글이 많다. 저장소에 작성된 내용을 다듬어서 발행할 시간이다.\n\n* Series: 노드 웹 프로그래밍 Next Step: 배포하기\n\n적극적으로 살길 바란다. 취업전선에서 지원서도 넣으면서 지내야지. **3월은 더 많이 실패하자.**"},{"excerpt":"소중했던 2023년이 가고 2024년이 찾아왔다. 결과만 보았을 때 2023년 한 해는 안식년이었다. 원하는 결과를\n얻지 못했다. 하지만 끝없이 연습하고 나만의 루틴을 찾았다. 의식적인 연습 순탄치 않았다. 오래 쉬었다는 사실이 너무나 체감돼서 더욱더 노력하는 방법밖에 없었다. 견뎠다. 가장 큰 화두는\n꾸준함이다. 개발자를 다시 도전하는 게 맞나? 내가 …","fields":{"slug":"/good-bye-2023-hello-2024/"},"frontmatter":{"date":"January 01, 2024","title":"2023 회고","tags":["회고","연간회고"]},"rawMarkdownBody":"\n![Worlds 2023](images/worlds-2023.png)\n\n소중했던 2023년이 가고 2024년이 찾아왔다. 결과만 보았을 때 2023년 한 해는 안식년이었다. 원하는 결과를\n얻지 못했다. 하지만 끝없이 연습하고 나만의 루틴을 찾았다.\n\n## 의식적인 연습\n\n순탄치 않았다. 오래 쉬었다는 사실이 너무나 체감돼서 더욱더 노력하는 방법밖에 없었다. 견뎠다. 가장 큰 화두는\n꾸준함이다. 개발자를 다시 도전하는 게 맞나? 내가 잘하고 있는 건가? 의심도 많고 힘들었다. 한편으론 이대로 눈 감으면 마음\n편하지 않을까 싶기도 했다. 하지만 꾸준히 하다 보니 자연스럽게 스스로에게 던진 질문이 해결되고 이제는 확신이 생겼다.\n\n## 마무리\n\n올 해는 소중했던 한 해의 과정을 결과로 증명하는 한 해가 되길 바란다. 더 많은 기회와 위기가 찾아올 것이다. 초심을 잃지 않고\n아무것도 없이 시작했던 나를 믿고 응원해 준 사람들을 생각하며 정진하길 바란다. 할 수 있다."}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}