{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"벌써 국비 교육이 끝난 지 1년 지났다. 지난 회고를 짧게 돌아보며 어떤 변화가 일어났는지 알아보자. 회상  밥 없이는 살아도 커피 없이는 못 살았다. 문제가 풀리지 않으면 달달한 음식을 찾았다.\n몸이 힘들어하는 것도 모르고 계속 뛰었다. 어떻게 이렇게 지냈는지 의아하다.  오랜만에 코드를 다시 봤다. 객체를 만들고 습관적으로 getter/setter를 …","fields":{"slug":"/retrospective-20240825/"},"frontmatter":{"date":"August 25, 2024","title":"2024 월간 장태근 8월호 '나의 봄은'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ALXA72FkkVE?si=p3bnxTbYWTEAOuUU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n벌써 국비 교육이 끝난 지 1년 지났다. 지난 회고를 짧게 돌아보며 어떤 변화가 일어났는지 알아보자.\n\n## 회상\n\n![우당탕탕 첫 번째 프로젝트](commit.png)\n\n밥 없이는 살아도 커피 없이는 못 살았다. 문제가 풀리지 않으면 달달한 음식을 찾았다.\n몸이 힘들어하는 것도 모르고 계속 뛰었다. 어떻게 이렇게 지냈는지 의아하다.[^1]\n\n![달려 또 달려](final-project-contributors.png)\n\n오랜만에 코드를 다시 봤다. 객체를 만들고 습관적으로 getter/setter를 선언했다. 무엇인가 잘못됨이 느껴져도 설득이 어려워서 급히 구현하던 모습이 떠오른다.\n문제를 해결하는 구현 능력도 물론 중요하지만 마지막 리뷰 때라도 '다른 방법으로 구현할 수 있다' 언급정도만 하고 넘어갔어도 좋지 않았을까. 거듭 생각해도 아쉽다.\n\n> 덕분에 스스로 생각할 수 있는 기회가 있었으니 오히려 좋았다.\n\n![당장 쓰러져도 이상하지 않은 상황에 작성한 회고](img.png)\n\n지금과 별반 다르지 않다. 다행인 건 이번달에 드디어 이력서를 넣었다. 결과는 기대하지 않지만 도전을 해서 기분 좋다.\n가장 경계해야 하는 검열을 하느라 시도하지 않았는데 결제 같았다. 버튼 한 번에 끝나는 게 웃겼다. 그동안 무겁게 마음을 먹었었는데\n이제는 조금 더 가벼운 마음으로 지속적으로 두드릴 수 있을 것 같다. 처음이 어렵다.\n\n## 좋은날\n\n![긍정적인 에너지](tidy-first-message.png)\n\n당연히 해야 하는 일이라고 생각했는데 긍정적으로 말씀해 주셔서 감사했다. 오픈소스의 영향인지 주위에 선한 영향력을 주시는 분들이 많다.\n그동안 받기만 했는데 아주 작은 일이라도 선한 영향력을 줄 수 있어서 좋았다. 좋아하는 일을 관심 가지고 했을 뿐인데 과분하다. 계속해서 작은 시도를 하자.\n\n## 마치며\n\n작년보다 다양한 사고를 할 수 있어서 좋다. 부족하지만 가만히 지내지는 않았구나. 스스로 대견하다.\n실무에 가면 지금까지 생각하지 못했던 부분까지 고려할 수 있다는 사실이 기대된다. 지금의 내가 하지 못하는 사고를 확장하고 싶다.\n\n> 삶이 절망스럽고 괴롭다면, 그만큼 자기 삶에 진심을 다했다는 뜻이다. 그래서 당신이 단 한 번만이라도 좋으니 극도로 절망했으면 좋겠다.\n>\n> <출처: 프리드리히 니체>\n\n한 달 중 보름을 쉬었다. 보통은 아쉬움을 남기고 다음을 기약한다. 그런데 이번달은 다르다.\n지친 몸을 받아들인다. 쉬어도 금방 다시 일어나서 할 수 있다는 믿음이 생겼다. 내일이 기다려진다.\n\n다음 달은 정리한 글을 더 많이 공개하고 기술블로그의 색채가 느껴지길 바란다. 더불어 감각을 잃지 않고 계속 지원하고 도전하는 내가 되길 바란다.\n안주하지 말자.\n\n[^1]: 그래서 9월에 바로 쓰러졌다.\n"},{"excerpt":"프로그래밍 언어를 공부할 때 유명 기본서, 강의, 공식문서 외에도 다양한 방법으로 공부하는 것을 선호한다.\n'과거에 정의한 개념'과 '현재 정의한 개념'이 충돌할 수 있다고 생각하기 때문이다. 그리고 고정된 사고를 하고 싶지 않다.\n매번 '내가 틀릴 수도 있습니다' 외치며 반복한다. Java/Spring은 한국어로 된 발표, 기술 블로그 자료를 흔하게 찾…","fields":{"slug":"/empty-string-checking/"},"frontmatter":{"date":"August 19, 2024","title":"빈 문자열 검증하기","tags":["JavaScript/TypeScript"]},"rawMarkdownBody":"\n프로그래밍 언어를 공부할 때 유명 기본서, 강의, 공식문서 외에도 다양한 방법으로 공부하는 것을 선호한다.\n'과거에 정의한 개념'과 '현재 정의한 개념'이 충돌할 수 있다고 생각하기 때문이다. 그리고 고정된 사고를 하고 싶지 않다.\n매번 '내가 틀릴 수도 있습니다' 외치며 반복한다.\n\nJava/Spring은 한국어로 된 발표, 기술 블로그 자료를 흔하게 찾아볼 수 있다. 하지만 비교적 TypeScript/NestJS은 한정적이다.\n문법은 쉽게 찾아볼 수 있는데 조금 더 깊이 나누고 싶은 주제는 물음표를 남긴다. 특히 테스트가 그랬다.\n\nJava는 테스트를 작성할 때 JUnit을 주로 사용한다. 하지만 JavaScript는 실행 환경에 따라 사용하는 프레임워크가 다르다.\n다양한 프레임워크 중 이 시리즈는 NestJS에서 기본으로 사용하는 Jest를 사용한다. [^1]\n\n> 다른 언어를 사용해 봤거나, 테스트를 작성해 봤다면 이해할 수 있도록 난이도를 설정했다.\n> 전체 코드는 [GitHub](https://github.com/devmeeple/javascript-in-action/tree/main/test/javacan)에서 제공한다.\n\n## 비밀번호 빈 문자열 검증하기\n\n책[^2]을 읽고 예제를 반복해서 구현했다. 그런데 문제를 만났다. 비밀번호가 빈 문자열인지 검증하는 테스트를 리팩터링 할 때\n옵셔널 체이닝(Optional chaining)과 trim() 메서드 개념이 부족하다고 느꼈다.\n\n```javascript\n// 1. 명시적으로 빈 문자열을 검증한다. \nif (password === null || password === undefined || password === '') {\n  return PasswordStrength.INVALID;\n}\n\n// 2. 옵셔널 체이닝(Optional chaining) 활용\nif (!password?.trim()) {\n  return PasswordStrength.INVALID;\n}\n```\n\n구현을 먼저 진행할 땐 검증을 명시적으로 하면 된다고 생각했다. 그런데 조금 더 나은 방법은 없을까 고민했다.\n검색결과 옵셔널 체이닝과 trim()을 사용했다.\n\n### 옵셔널 체이닝(Optional chaining)\n\n```javascript\nit('객체가 존재하면 객체를 반환한다. [성공]', () => {\n  // given\n  const baseballPlayer = {\n    name: '원태인',\n  };\n\n  // when\n  const sut = baseballPlayer?.name;\n\n  // then\n  expect(sut).toBe('원태인');\n});\n\nit('객체가 존재하지 않으면 undefined를 반환한다. [실패]', () => {\n  // given\n  const baseballPlayer = {};\n\n  // when\n  const sut = baseballPlayer?.name;\n\n  // then\n  expect(sut).toBeUndefined();\n});\n```\n\n옵셔널 체이닝은 프로퍼티가 없는 중첩 객체를 안전하게 접근할 때 사용한다.\n위와 같은 방법으로 사용가능하다.\n\n### trim\n\ntrim() 메서드는 공백을 제거할 때 사용한다. 원본 문자열을 수정하지 않고 새로운 문자열을 반환한다.\n\n```javascript\nit('문자열의 양쪽 끝 공백을 제거하고 새로운 문자열을 반환한다. [성공]', () => {\n  // given\n  const poem =\n    '   가야 할 때가 언제인가를 분명히 알고 가는 이의 뒷모습은 얼마나 아름다운가.   ';\n\n  // when\n  const sut = poem.trim();\n\n  // then\n  expect(sut).toBe(\n    '가야 할 때가 언제인가를 분명히 알고 가는 이의 뒷모습은 얼마나 아름다운가.',\n  );\n});\n```\n\n### 전체 검증하기\n\n옵셔널 체이닝과 trim()의 사용법을 간단하게 알아봤다. 그렇다면 리팩터링 한 코드를 다시 테스트해보자.\n\n```javascript\ndescribe('PasswordStrengthMeterTest', () => {\n  it('유효한 비밀번호를 입력한다. [성공]', () => {\n    // given\n    const password = '1q2w3e4r';\n\n    // when\n    const sut = meter(password);\n\n    // then\n    expect(sut).toBe('유효한 비밀번호 입니다.');\n  });\n\n  describe('유효하지 않은 비밀번호를 입력하면 에러 메시지를 출력한다. [실패]', () => {\n    it.each([null, undefined, ''])(\n      '비밀번호 \"%s\"은(는) 유효하지 않은 비밀번호다.',\n      (invalidPassword) => {\n        // given\n\n        // when\n        const sut = meter(invalidPassword);\n\n        // then\n        expect(sut).toBe('유효하지 않은 비밀번호 입니다.');\n      },\n    );\n  });\n});\n```\n\n![password-strength-meter.spec.js 단위 테스트 실행 결과 <출처: GitHub>](./password-strength-meter-result.avif)\n\n테스트를 실행하면 위와 같은 결과를 얻는다.\n\n## 동작 순서 요약\n\n```javascript\nif (!password?.trim()) {\n  return PasswordStrength.INVALID;\n}\n```\n\n정리하면 리팩터링 한 코드는 다음과 같은 순서로 동작한다.\n\n1. `password`가 `null`또는 `undefined`라면 `trim()` 메서드를 실행하지 않고[^1] `undefined`를 반환한다.\n2. `password`가 빈 문자열이라면 `password?.trim()`은 빈 문자열 `''`을 반환한다.\n3. `!` 연산자는 `undefined`, 빈 문자열, `null`과 같은 `Falsy`값[^2]을 `true`로 변환한다.\n4. 조건문이 실행돼서 `PasswordStrength.INVALID`를 반환한다.\n\n> 물론 조건식도 `isPasswordValid()` 메서드로 추가 리팩터링 할 수 있다.\n\n## 마치며\n\n![알게 뭐야 지금 내가 신나는데 <출처: 무한도전>](./excited.avif)\n\n학습 테스트[^5]가 무엇인지 경험하고 글도 작성하니 재밌다. 비록 간단한 테스트지만 이번 기회에 작성하지 않았다면 한참 동안 모르고 지나갈 개념이었다.\n부족함을 기본서를 다시 보며 풀어낼까 했는데 문제가 발생할 때마다 이렇게 테스트 코드와 글로 남겨야겠다.\n\n쌓여있는 문서, 이제는 공개할 시간이다. 해방이다.\n\n**<참고 자료>**\n\n- [The Modern JavaScript Tutorial 'Optional chaining](https://javascript.info/optional-chaining)\n- [MDN Web Docs 'Optional chaining (?.)'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)\n- [MDN Web Docs 'String.prototype.trim()'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\n\n[^1]: [Jest](https://jestjs.io/)\n[^2]: [최범균 『테스트 주도 개발 시작하기』](https://product.kyobobook.co.kr/detail/S000001248962)\n[^3]: 단락(short-circuit, 혹은 단축) 평가\n[^4]: [Mdn Web Docs 'Falsy'](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n[^5]: [이일민(토비) '공부 방법에 대해서 질문드립니다.']https://www.inflearn.com/community/questions/763626\n"},{"excerpt":"1년을 기다렸다. 작년에 탈락할 때 'INFCON 2024는 꼭 간다.' 다짐했는데 인프런 워밍업 클럽 덕분에 다녀왔다.\n발표와 네트워킹 위주로 들은 백엔드 취업준비생의 후기를 공유한다. 발표 1. 이형주 외 2인 '인프랩의 도전: 글로벌 교육 플랫폼으로의 첫 발걸음' 인프랩이 어떤 길을 걸어왔고 어떤 생각을 가지고 있는지 대표님이신 형주님, CTO 동욱…","fields":{"slug":"/infcon-2024-review/"},"frontmatter":{"date":"August 17, 2024","title":"<INFCON 2024> 후기","tags":["행사(세미나/콘퍼런스)"]},"rawMarkdownBody":"\n![INFCON 2024 선물](./infcon-2024.avif)\n\n1년을 기다렸다. 작년에 탈락할 때 'INFCON 2024는 꼭 간다.' 다짐했는데 인프런 워밍업 클럽 덕분에 다녀왔다.\n발표와 네트워킹 위주로 들은 백엔드 취업준비생의 후기를 공유한다.\n\n## 발표\n\n### 1. 이형주 외 2인 '인프랩의 도전: 글로벌 교육 플랫폼으로의 첫 발걸음'\n\n인프랩이 어떤 길을 걸어왔고 어떤 생각을 가지고 있는지 대표님이신 형주님, CTO 동욱 님, 커뮤니티 리드 연의님께서 다양한 관점을 이야기해 주셨다.\n번역, 국제화도 기억에 남지만 특히 기억에 남았던 이야기는 '과제'다. 인프랩에서 이야기하는 '성장기회의 평등'을 추구하기 위해서 꼭 필요한 기능이라고 생각했다.\n\n이전에 스터디에서 태현 님의 피드백 덕분에 강의를 듣고 끝나는 것이 아닌 재밌게 성장한 경험이 있다. 다른 강의에서도 만나볼 수 있고 강의를 듣는 것에서 끝나는 것이 아닌\n활용까지 하는 기능을 제공한다는 점이 긍정적이다. 그런데 관리가 어려울 것 같은데 어떤 식으로 제공될지 조금 더 지켜봐야겠다.\n\n### 2. 김재민 '지속 성장 가능한 설계를 만들어가는 방법'\n\n가장 앞줄 중앙에 가서 재민님의 발표를 들었다. [Youtube(유튜브)](https://www.youtube.com/@geminikims)에서도 자주 뵀던 분이라 기대가 컸다. \n'설계'를 주제로 내용을 풀어주셨는데 경험이 적어서 초반은 이해하기 어려웠다. 그런데 코드와 함께 예시를 들어주시는 부분부터는 이해가 잘됐다. \n추가로 [강의](https://inf.run/RnztG)에서는 어떤 내용을 전달하고 계실지 궁금했다.\n\n### 3. 이동욱 '인프런 아키텍처 2024 ~ 2025'\n\n올해 두 번째 뵌 이동욱(향로)님. 앞서 인프랩의 여정을 모두가 이해할 수 있도록 해주셨다면 동욱 님께서는 조금 더 기술적인 이야기를 해주셨다.\n아키텍처를 어떻게 설계하고 변경하셨는지 그림과 예시가 적절해서 재밌었다. 특히 `avif` 확장자 도입과 `JSON CDN Caching` 이야기가 가장 기억에 남는다.\n\n> 블로그에 바로 `avif` 확장자를 도입했다. [GeekNews](https://news.hada.io/)를 흘려봤는데 조금 더 신경 써서 봐야겠다는 생각이 들었다.\n\n### 4. 조현우 '사이드 프로젝트로 커리어 레벨업!'\n\n짧은 시간에 내용이 농축되어 있는 좋은 발표였다. 점심 먹기 전에 시간 내어 들었는데 기억에 남았다.\n빠른 시간에 어떻게 사이드 프로젝트를 구현하셨고 어떤 어려움이 있었는지 공유해 주셨다. 특히 발표자분의 관심사를 어떻게 사이드 프로젝트로 녹여내셨는지 사례를 이야기해 주셔서 공감이 많이 됐다.\n\n> 도메인이 인터넷 방송이어서 더욱 재밌었다. 처음 뵀는데 그동안 어떤 행보를 보내셨는지 궁금했다.\n\n### 후기\n\n![펠리칸적 사고 \"일단 시도함\" <출처: X>](./pelican-just-do-it.avif)\n\n오전에만 발표를 들었다. 발표에서 공통적으로 '일단 시도하라'라고 강조했다. 말은 쉽지만 행동으로 이어지기 어려운 것이 '도전'이라 생각한다.\n그럼에도 다시 돌아보고 다잡을 수 있는 이야기여서 좋았다.\n\n가장 인상 깊었던 발표는 마지막에 들었던 **조현우 님의 '사이드 프로젝트로 커리어 레벨업!'**이다.\n모두 훌륭하지만 바로 적용가능하고 필요한 내용이어서 인상 깊다. 발표가 마치 다듬어지지 않은 원석 같았다.\n\n## 네트워킹\n\n![감사합니다. 고맙습니다. 덕분입니다. <출처: 도박묵시록 카이지>](./the-gambling-apocalypse-kaiji.avif)\n\n오후에는 네트워킹에 전념했다. 여러 사람들과 같은 공간에서 네트워킹 하는 경험은 처음이었다. 발표도 기대했던 만큼 좋았지만 네트워킹은 더욱 좋았다. (강조하신 이유가 있었다)\n\n> 만약 서포터즈분들의 도움이 없었다면 듣기만 했을 것 같다. 여러 고충도 많이 들었는데 감사드린다.\n\n백엔드 주제에서 주로 놀았는데, `Java/Spring` 개발자 분들이 역시 많았다. (의외로 `Go`도 많았다)\n선배 개발자의 문제를 만났던 경험과 해결 노하우를 들으니 즐거웠다. 놀다 보니 어둠 속의 한줄기 빛처럼 `Node.js` 경험을 공유하시는 분을 만났다. 너무 반가워서 조금 더 궁금했던 주제를 꺼냈다.\n\n* `Closure(클로저)`, `Prototype(프로토 타입)`, `NestJS 'Mapped types'`\n* 자료를 얻는 배경\n* 테스트를 어떻게 작성하는가\n\n그동안 혼자 정의했던 개념들에 대해 의견을 주고받을 수 있어서 너무 즐거웠다. 입이 풀려서 \"감사합니다. 고맙습니다. 덕분입니다\"를 연신 외치며 오랜 시간 대화를 나눴다.\n끝까지 듣고 의견을 전해주신 재호님과 인프랩 후니님께 다시 한번 감사드린다.\n\n어렸을 때 유명한 사람들을 많이 봐서 그런지 연예인, 인플루언서를 만나도 별 감흥 없었다. 결국 똑같은 '사람'이라는 인식이 강했다.\n그런데 INFCON에서 유명 개발자분들을 마주하니 달랐다. 유명세를 떠나 성장에 영향받은 기억이 남아서 색다른 감정이 들었다.\n특히 최근에 즐겨 듣는 강의[^1] 지식 공유자이신 박우빈 님과 예전부터 도움[^2] 받은 진유림 님을 뵀을 때 그랬다.\n이일민(토비)님도 2층에서 많이 뵀는데 10년 전에도 유명하셨던 분을 마주하니 장로님을 뵙는 것 같아 당황스러웠다. 당황하며 \"어??? 안녕하세요\" 인사드렸는데 받아주신 토비 님께 감사드린다.\n만약 내년에도 참여할 수 있다면 꼭 책에 사인받고 싶다.\n\n> 한 가지 아쉬운 점도 있다. QR코드 출력에 문제가 있어서 네트워킹에서 '랠릿 허브 이력서'를 공유할 수 없었다. 간단한 이력서였지만 네트워킹에 도움 되지 않았을까.\n> 그런데 영화관 티켓 판매기처럼 '단순한 출력 문제'가 아닐까 싶다. 조금 더 신경 쓰는 방법 말고 마땅한 해답이 떠오르지 않는다.\n\n## 마치며\n\n![누구나 그럴싸한 계획을 갖고 있다. 쳐 맞기 전까지는](./mike-tyson.avif)\n\n계획에 빈틈이 없었다. [가이드](https://devmeeple.github.io/infcon-2024-guide/)도 다시 보고 시작부터 종료까지 발표를 들을 생각이었다. 그런데 실제로는 오전에 4개를 들은\n게 전부였다. (오히려 좋았다) 노트북을 들고 가야 할지 끝까지 고민했는데 안 들고 가길 잘했다.\n\n운영진과 스터디원을 만나서 재밌었다. 인프런 워밍업 클럽 덕분에 좋은 인연을 맺었다. 감사함을 전하고 싶은 분들이 많아서 작은 비타민을 챙겨 드렸는데 INFCON을 즐기는 '나만의 방법'[^3]이었다.\n\n'펠리컨적 사고'를 배웠지만 집으로 돌아와서 푹 쉬었다. 다음날에도, 또 다음날에도, 그렇게 2주 정도를 하는 둥 마는 둥 보냈다.\n색다른 시도[^4]를 하지 않았다면 후기도 작성하지 않고 넘어갔을 것 같다. 그래도 [이벤트](https://inf.run/38Va9) 막차가 끊기기 전에 탑승해서 \n다행이다.\n\n많은 사람들이 지원하지만 아무나 올 수 없는 세미나. 참여에서 끝나지 않고 앞으로 어떤 변화가 일어날지 기대된다.\n\n[^1]: [박우빈 'Readable Code: 읽기 좋은 코드를 작성하는 사고법'](https://inf.run/kHiWM)\n[^2]: [정호영, 진유림 『팀 개발을 위한 Git, GitHub 시작하기』](https://product.kyobobook.co.kr/detail/S000202039327)\n[^3]: 어렸을 때 친구들 딱풀 챙겨주던 기억도 나서 반가웠다.\n[^4]: 자세한 이야기는 8월 회고에서 이어진다.\n"},{"excerpt":"IntelliJ IDEA 2024.2가 정식으로 출시됐다. 업데이트된 여러 기능 중 'TypeScript 파일을 직접 실행 및 디버그'가 가장 흥미로웠다. 바로 업데이트하고 실행했을 때 문제가 발생했다. 문제는  환경에서만 발생했다. 해결하기 위해서는 표준  인터프리터를 사용해야 한다. 는 Package Manager 도구 중 하나다. 여러  버전을 관리…","fields":{"slug":"/jetbrains-ideas-volta-error/"},"frontmatter":{"date":"August 15, 2024","title":"IntelliJ IDEA Volta 인터프리터 에러 해결하기","tags":["IDE"]},"rawMarkdownBody":"\nIntelliJ IDEA 2024.2가 정식으로 출시됐다. 업데이트된 여러 기능 중 'TypeScript 파일을 직접 실행 및 디버그'가 가장 흥미로웠다. 바로 업데이트하고 실행했을 때 문제가 발생했다.\n\n```shell \nnode:internal/modules/run_main:129\n    triggerUncaughtException(\n    ^\nError: tsx must be loaded with --import instead of --loader\nThe --loader flag was deprecated in Node v20.6.0 and v18.19.0\n``` \n\n문제는 `Volta` 환경에서만 발생했다. 해결하기 위해서는 표준 `Node.js` 인터프리터를 사용해야 한다.\n\n> `Volta`는 Package Manager 도구 중 하나다. 여러 `Node.js` 버전을 관리할 때 유용하다. `Volta` 외에도 `nvm`, `fnm`등이 있다.\n> Java에서 사용하는 `jenv`와 유사하다.\n\n## Volta 제거하기\n\n> macOS, zsh 환경에서 진행한다.\n\n1. `rm -rf ~/.volta`: 바이너리를 제거한다.\n\n```shell\nexport VOLTA_HOME=\"$HOME/.volta\"\nexport PATH=\"$VOLTA_HOME/bin:$PATH\"\n```\n\n2. `vim ~/.zshrc`: 위와 같은 환경 변수를 제거한다.\n3. `source ~/.zshrc`: 설정 파일을 다시 불러온다.\n4. `volta -v`: 삭제를 확인한다.\n\n## 기능 확인하기\n\n```typescript\nconst blog = '장태근블로그 devmeeple.github.io';\nconst thankYou = (blogName: string) => console.log(`${blogName} 클릭해주셔서 감사합니다.`);\n\nthankYou(blog);\n```\n\n제거를 마쳤다면, 간단한 프로그램으로 기능을 확인해 보자.\n\n![Thank You!](./thank-you-log.avif)\n\n업데이트가 성공하고 기능이 정상동작함을 확인할 수 있다.\n\n\n## 마치며\n\n`Volta`를 삭제하면 당장의 문제는 해결할 수 있다. 하지만 다양한 버전을 사용하기 위해서 다른 버전 관리자(Node Version Manager)를 고려해야겠다. 우선 급한 대로 `nvm`을 다시 사용 중이다.\n\n**<참고 자료>**\n\n* [IntelliJ IDEA 2024.2의 새로운 기능](https://www.jetbrains.com/ko-kr/idea/whatsnew/)\n* [YoTrack 'Volta Node interpreter version not correctly detected when running Typescript with\n  `tsx`'](https://youtrack.jetbrains.com/issue/WEB-67800/Volta-Node-interpreter-version-not-correctly-detected-when-running-Typescript-with-tsx)\n* [VOLTA 'Uninstalling Volta'](https://docs.volta.sh/advanced/uninstall)\n"},{"excerpt":"경찰서 믿기지 않는 상황이 펼쳐졌다. 새벽에 집을 나왔다. 골목길은 항상 더러웠다. 하지만 그날따라 깨끗했다.\n무엇 앤가 이끌린 듯 고개를 돌렸다. 돈이 떨어져 있었다. 가로등 아래 빛나는 황색 지폐는 흡사 금덩이 같았다.\n그런데 이게 무슨 일일까. 지폐가 아니라 돈다발이었다. 무려 500만 원이었다. 어이가 없었다. 일정을 미루고 경찰서로 몸을 돌렸다.…","fields":{"slug":"/retrospective-20240728/"},"frontmatter":{"date":"July 28, 2024","title":"2024 월간 장태근 7월호 '시퍼런 봄'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/8i-B1ieI_kY?si=VDSK-up06aLKIp7g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n## 경찰서\n\n믿기지 않는 상황이 펼쳐졌다. 새벽에 집을 나왔다. 골목길은 항상 더러웠다. 하지만 그날따라 깨끗했다.\n무엇 앤가 이끌린 듯 고개를 돌렸다. 돈이 떨어져 있었다. 가로등 아래 빛나는 황색 지폐는 흡사 금덩이 같았다.\n그런데 이게 무슨 일일까. 지폐가 아니라 돈다발이었다. 무려 500만 원이었다. 어이가 없었다.\n\n일정을 미루고 경찰서로 몸을 돌렸다. 새벽 4시 30분, 한적한 경찰서에 돈다발을 들고 등장했다. 경찰관 분들과 함께 놀랐다.\n\n신고를 마치고 집으로 돌아가는 길이 재밌었다. 돈에 허덕임에도 불구하고 한치의 망설임 없었다.\n당연히 해야 할 일을 한 거지만 스스로가 대견했다. 그리고 부모님께 감사했다.\n\n![돈다발은 사실 운명이었다 <출처: 네이버 오늘의 운세>](lucky-guy.png)\n\n## 함께 자라기\n\n![한국 마이크로소프트](microsoft.webp)\n\n특강부터 세미나까지, 다양한 활동에 참여했다. 퍼스널 브랜딩, 데이터베이스, 성장, 각기 다른 주제는 매력적으로 다가왔다. 하지만 활동으로 얻은 가장 큰 수확은 '회고'다.\n\n개발자를 포기하고 일했던 분야는 모두 '덕업일치'를 이뤘다. 어떻게 하면 생산성을 높일 수 있을지 고민하니 자연스레 다가왔다.\n반면 개발은 드디어 덕업일치를 이룬다고 생각했다. 하지만 아니었다. 이전에도 DEVIEW, 생활코딩 오프라인 수업 등 다양한 활동에 참여했다. 시켜서 하던 일이 아니었다.\n\n스터디에 참여하길 잘했다고 거듭 느꼈다. 함께 공부하라는 조언을 흔히 듣는다. 하지만 맞지 않는 옷 같았다. 주로 혼자 공부했다. 나에게 맞는 방법을 실행하고 수정하며 여러 애로사항을 겪었다.\n그러다 결국 '풀리지 않는 문제'라는 벽에 부딪혔다.\n\n기존의 방법에서 변화를 주고자 스터디에 참여했다. 돌이켜보면 적절했다. 덕분에 여러 기회를 얻었다. 생각하지 못했던 관점을 듣고 의견을 토로하는 과정이 즐겁다.\n\n## 도서관\n\n* [월리엄 진서 『글쓰기 생각쓰기』](https://product.kyobobook.co.kr/detail/S000001110694): '글쓰기 스테디 셀러' 글쓰기 종류와 형식을 설명하는 예제가 풍부하다. 하지만\n  번역이 매끄럽지 않다. 3.5/5\n\n## 마치며\n\n![아침에 눈을 뜨면 지난밤이 궁금해 오늘은 어떤 사건이 날 부를까 <출처: 명탐정 코난>](case-closed.webp)\n\n다양한 시도를 했다. 언어와 상관없이 '기본기'라고 이야기하는 여러 주제 중[^1] 테스트에 특히 집중했다. 테스트는 오랜 숙원이다. 의도와 다르게 발효된 테스트는 마치 묵은지 같았다.\n고약한 냄새가 날 지경이었다. 질문도 하고 책도 보고 다양한 시도를 했다. 명쾌하지 않았다.\n\n테스트 대역과 프레임워크에 어떻게 접목시키는지 궁금했다. 아무리 봐도 단위 테스트가 아니었고 생산성도 떨어졌다.\n그런데 역시 좋은 자료와 더불어 '백문이 불여일타' 직접 실행해야 한다.\n\n결국 기본기는 연결되어 있다. 테스트를 공부하면 자연스럽게 객체지향과 설계에 손이갔다.\n\n\"당신의 테스트 코드가 테스트하기 어려운 이유는 설계의 문제일 수 있다\" 관점이 충격적이었다. 기존의 생각과 학습 이후 변화를 글로 표현할 때다.\n\n\"아침에 눈을 뜨면 지난밤이 궁금해 오늘은 어떤 사건이 날 부를까\" 흡사 명탐정 코난 같다. 올해 중 유독 재밌는 한 달을 보냈다. 매 순간이 우당탕탕, 비틀비틀 짝짜꿍이었지만 내일이 기대됐다.\n지난달은 응급실, 이번달은 경찰서 다음 달은 어디로 떠나볼까. ~~회사로 보내주면 좋겠다.~~\n\n[^1]: OOP(Object-Oriented Programming: 객체지향 프로그래밍), 테스트, 아키텍처\n"},{"excerpt":"주니어 개발자를 대상으로 데이터베이스 운용 경험, 노하우를 공유한다.  7월 18일 목요일, 한빛앤에서 주최한 <데이터베이스 활용도 끌어올리기>에 다녀왔다. 마침 데이터베이스 관련 세미나가 열렸다. 우연히도 발표자분이 SNS에서 팔로우하고 있던 분이셨다.\n주제도 흥미롭고, 어떤 이야기를 하실지 궁금해서 참석했다. 1. 비즈니스와 아키텍쳐의 관계 비즈니스란…","fields":{"slug":"/boost-database-utilization/"},"frontmatter":{"date":"July 21, 2024","title":"<한빛앤 MSA 데이터베이스 활용도 끌어올리기> 후기","tags":["행사(세미나/콘퍼런스)"]},"rawMarkdownBody":"\n> 주니어 개발자를 대상으로 데이터베이스 운용 경험, 노하우를 공유한다.\n\n![한빛앤 MSA 데이터베이스 활용도 끌어올리기 <출처: X(SNS)>](boost-database-utilization.jpeg)\n\n7월 18일 목요일, 한빛앤에서 주최한 <데이터베이스 활용도 끌어올리기>에 다녀왔다.\n\n마침 데이터베이스 관련 세미나가 열렸다. 우연히도 발표자분이 SNS에서 팔로우하고 있던 분이셨다.\n주제도 흥미롭고, 어떤 이야기를 하실지 궁금해서 참석했다.\n\n## 1. 비즈니스와 아키텍쳐의 관계\n\n비즈니스란 무엇일까. 비즈니스란 '해결해야 하는 문제'다. 소프트웨어 아키텍처는 비즈니스를 해결하기 위해서 포괄하는 시스템이다.\n흔히 아키텍처는 한 번 정해지면 바꿀 수 없다.\n\n그렇다면 어떻게 하면 비즈니스 정보를 빠르게 얻을 수 있을까. 가장 빠르게 정보를 얻는 방법은 '동료들과의 대화'다. 비즈니스가 어떻게 구현되어 왔고 어느 상황에 있는지 이해하는 시간을 충분히\n가지길 바란다.\n\n## 2. 실무 적응하기: 데이터베이스 지식, 어디까지 알아야 할까?\n\n가장 추천하는 방법은 동료와 '페어 프로그래밍(pair programming)'이다. 개인이 할 수 있는 최선은 '우선순위 정의하기'다. \n\n## 3. 도메인 모델 패턴과 트랜잭션 스크립트 패턴\n\n도메인 모델 패턴과 트랜잭션 스크립트 패턴에 자세한 내용은 책[^1]을 참고하자.\n\n도메인 모델 패턴을 잘못 사용하게 되면 오히려 독이 된다. 비용이 커지는 작업이기 때문에 가급적이면 구성원과 함께 모범 사례(Best Practice)를 학습, 도입하는 방법을 권장한다. \n\n## 4. 좋은 쿼리 작성하기\n\n'N+1 문제'[^2]에 대해 이야기하신 것 같다.\n\n## 5. 질문 & 답변\n\n### Q. SQL이 어렵습니다. 어떻게 쉽게 접근할 수 있나요?\n\n책과 펜을 쥐고 그림 그려보기를 추천한다.\n\n### Q. 서버 인프라를 어떻게 배울 수 있을까요?\n\n유튜브(YouTube), 기술문서 Hands-On Lab을 활용한다.\n\n### Q. 괜찮은 데이터베이스 관리 툴이 있나요?\n\n이전에 DBDiagram[^3]을 사용했다.\n\n### Q. 한 가지를 깊게 하는 방법과 여러 제품을 포괄적으로 학습하는 방법 중 어떤 방법이 좋을까요?\n\n자주 사용하는 데이터베이스로 API를 만들어보고 살을 붙이는 방법을 추천한다. 어떻게 설계할지를 자연스럽게 고민한다.\n\n### Q. 추천하시는 책이 있나요?\n\n필독! 개발자 온보딩 가이드[^4], 육각형 개발자: 시니어 개발자로 성장하기 위한 10가지 핵심 역량[^5]을 추천한다. 주니어 시니어 상관없이 읽기 괜찮은 책이다.\n\n## 마치며\n\n날씨가 좋지 않아서 발표가 지연됐다. 하마터면 어수선한 분위기로 진행될 뻔했다. 하지만 주최 측에서 현명하게 대처했다.\n한빛미디어 책을 추첨해서 나눠주셨다. ~~눈여겨보던 책을 얻지 못해서 아쉬웠다.~~\n\n\"주니어 개발자, 그대들은 어떻게 살 것인가\"\n\n경험을 공유해 주신 발표도 흥미로웠지만 발표를 마치고 진행된 '네트워킹'도 인상 깊었다. 오랜만에 참석이라 낯을 가렸는데 슬기님께서 먼저 다가와주셔서 감사했다.\n작년에 가장 재밌게 읽은 책을 슬기님께서도 흥미롭게 읽으신 것 같아서 반가웠다. 가볍게 담소를 나누고 다른 참가자 분들의 고민을 들었다.\n\n경험을 공유하고 나누는 방법은 '재밌게 성장할 수 있는 한 가지 방법'이라고 생각한다. 막연한 미래지만 하고 싶은 일이 무엇인지 확고하게 다졌다.\n\n**<참고 자료>**\n\n- [Festa '한빛앤 MSA #2-8 데이터베이스 활용도 끌어올리기'](https://festa.io/events/5523)\n\n[^1]: [마틴 파울러 『엔터프라이즈 애플리케이션 아키텍처 패턴』](https://product.kyobobook.co.kr/detail/S000001766248)\n[^2]: [향로 'JPA N+1 문제 및 해결방안'](https://jojoldu.tistory.com/165)\n[^3]: [DBDiagram](https://dbdiagram.io/home)\n[^4]: [크리스 리코미니, 드미트리 리아보이 『필독! 개발자 온보딩 가이드』](https://product.kyobobook.co.kr/detail/S000202318866)\n[^5]: [최범균 『육각형 개발자: 시니어 개발자로 성장하기 위한 10가지 핵심 역량』](https://product.kyobobook.co.kr/detail/S000203107475)\n"},{"excerpt":"이 글은 인프런 라이브 방송과 인프콘 2024 공식 사이트를 기준으로 작성되었다. (2024. 07. 03)  들어가며 인프콘(INFCON)은 인프런에서 주관하는 IT 콘퍼런스로, 2024년 8월 2일 금요일 코엑스에서 열린다. '우주'를 테마로 총 48개의 발표가 준비되어 있다. 무엇이 달라졌나요? 다양한 직무를 대상으로 진행된다. 딥다이브 세션이 추가…","fields":{"slug":"/infcon-2024-guide/"},"frontmatter":{"date":"July 03, 2024","title":"<INFCON 2024> 가이드","tags":["행사(세미나/콘퍼런스)"]},"rawMarkdownBody":"\n> 이 글은 인프런 라이브 방송과 인프콘 2024 공식 사이트를 기준으로 작성되었다. (2024. 07. 03)\n\n![출처: 인프런 <INFCON 2024>](./infcon-2024.png)\n\n## 들어가며\n\n**인프콘(INFCON)은 인프런에서 주관하는 IT 콘퍼런스로, 2024년 8월 2일 금요일 코엑스에서 열린다.**\n\n'우주'를 테마로 총 48개의 발표가 준비되어 있다.\n\n### 무엇이 달라졌나요?\n\n- 다양한 직무[^1]를 대상으로 진행된다.\n- 딥다이브 세션[^2]이 추가됐다.\n\n### 알아두면 유용한 정보\n\n- 다양한 [이벤트](https://www.inflearn.com/conf/infcon-2024/info/event/)가 진행된다. 특히 스탬프 투어를 완료하면 한정판 굿즈를 받을 수 있다.\n- 'MY 인프콘' 기능 활용을 권장한다.\n    - 랠릿 이력서 연결: 네트워킹 파티에 참여하기 위해서 필수\n        - 이력서 허브 등록은 이름, 연락처만 작성해도 등록가능하다.\n    - 다양한 시간에 발표가 진행되므로 '나만의 시간표 만들기'(개인 시간표) 활용을 권장한다.\n- 1층(그랜드볼룸)\n    - 등록과 발표가 진행된다.\n    - 인프런존에 포토존이 추가됐다.\n    - 네트워킹 파티 사전 등록을 받는다.\n    - 12개의 기업부스가 운영되고 다양한 선물을 제공한다.\n- 2층(아셈볼룸)\n    - 프로그램(딥다이브)이 진행된다.\n    - 커뮤니티 부스, 발표 질의응답, 인프런 이벤트존&라이트닝, 네트워킹 파티가 진행된다.\n\n## 인프런이 추천하는 직무별 추천발표\n\n### 시작\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/912/\" target=\"_blank\">인프랩 '인프랩의 도전: 글로벌 교육 플랫폼으로의 첫\n  발걸음'</a>\n\n### 백엔드\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/877/\" target=\"_blank\">김재민 '지속 성장 가능한 설계를 만들어가는 방법'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/880/\" target=\"_blank\">이일민(토비) '클린 스프링: 스프링 개발자를 위한 클린코드\n  전략'</a>\n\n### DevOps\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/874/\" target=\"_blank\">심호진 '지난 4년간 6번의 무진장 행사를 통해 성장한\n  DevOps 이야기'</a>\n\n### 프론트엔드\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/871/\" target=\"_blank\">하조은 'Next.js 블로그 모범 사례 탐구: Vercel\n  리더십 블로그 아키텍처 파헤치기'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/866/\" target=\"_blank\">유인동 '멀티패러다임 프로그래밍 언어의 시대 - 객체지향과\n  함수형을 섞어야할 때!'</a>\n    - 라이브코딩 진행예정\n\n### 디자인\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/891/\" target=\"_blank\">강영화 '10년 동안의 실패 이야기: 실패를 의미있는 일로\n  탈바꿈하는 가장 쉬운 방법'</a>\n\n### PM/PO\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/899/\" target=\"_blank\">김영재 '성장하지 않아도 괜찮습니다'</a>\n\n### 패널토크[^3]\n\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/905/\" target=\"_blank\">원티드랩 패널토크 '디자인 시스템의 명과 암'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/904/\" target=\"_blank\">인프랩 패널토크 '목적 조직 구조 안에서 개발팀이 일하는\n  법'</a>\n- <a href=\"https://inflearn.com/conf/infcon-2024/session-detail/901/\" target=\"_blank\">딜라이트룸 패널토크 '소수 인원으로 글로벌 1위 앱 서비스를\n  만든 비결'</a>\n\n## 질문 & 답변\n\n### Q. 작년 경쟁률은 어땠나요? 몇 명을 뽑나요?\n\n이전에 진행된 1, 2회의 경우 7대 1, 8대 1의 경쟁률을 기록했다. 최대 수용인원은 1800 ~ 2000명이다.\n\n### Q. 환불은 어떻게 진행되나요?\n\n추첨 선정자에 한해 참가권이 지급된다. 미선정자는 자동 환불 진행된다.\n\n### Q. 모든 발표에 의자와 책상이 제공되나요?\n\n의자는 모든 발표에 제공된다. 하지만 많은 인원을 수용하기 위해 2층에서 진행되는 딥다이브 프로그램만 책상이 제공된다.\n\n### Q. 발표 진행 중, 이동이 가능한가요?\n\n가능하다. 다만, 발표 분위기를 위해 문은 닫아둘 예정이다.\n\n### Q. 특정 발표에 인원이 몰리면 어떻게 하나요?\n\n안전문제로 수용에 제한이 생길 수 있다. 다만, 흔하지 않다.\n\n### Q. 대학생도 네트워킹에 참가할 수 있을까요?\n\n현장에 팀원, 서포터의 도움으로 무리 없이 참가가능하다.\n\n### Q. 발표자료는 공유되나요?\n\n발표자료는 발표자의 동의를 받고 있다. 동의된 자료와 영상은 인프런에서 강의형태로 공유될 예정이다.\n\n### Q. 인프콘 영상 업로드 되나요?\n\n인프런에 우선 올라가고, 유튜브는 추후 올라갈 예정이다.\n\n## 마치며\n\n참가신청은 [인프런](https://inf.run/NgR9K)에서 가능하다. 경쟁률이 아찔하지만 성장에 목마른 사람들을 만날 수 있는 축제의 장에 참가해 보자.\n\n- [MY 인프콘](https://www.inflearn.com/conf/infcon-2024/share?year=2024&id=1148697&hash=devmeeple%40e53018af&name=%EB%AF%B8%ED%94%8C)\n\n## 참고\n\n- [INFCON 2024 공식 페이지](https://www.inflearn.com/conf/infcon-2024/)\n- [유튜브 'INFCON 2024 즐기기 라이브 방송'](https://www.youtube.com/live/BICZOyzv7_0?si=POGyjIAPF2keDJyb)\n\n[^1]: 개발자, PM/PO, 프로덕트 디자이너 등\n[^2]: 소수 인원이 주제를 밀도 있게 깊이 있는 지식과 경험을 나눌 수 있는 특별한 시간\n[^3]: 제품(Product)을 만들기 위해 여러 직군이 모여서 나누는 시간\n"},{"excerpt":"웃으며 지내다 결국 쓰러졌다. 다시 한번 겸손에 대해 생각했다. 예정에 없던 손님이 방문해서 고충이 이만저만이 아니었다. 그래도 호기심으로 시작해서 성찰까지 이어지는 한 달을 보냈다. 응급실  응급실에 다녀왔다. 몸이 좋지 않았다. 웬만하면 통증을 참는데 몸이 심상치 않았다. 동네병원에서 응급실로 이동했다. 황급히 도착한 응급실은 대기, 진료, 의료진분들…","fields":{"slug":"/retrospective-20240630/"},"frontmatter":{"date":"June 30, 2024","title":"2024 월간 장태근 6월호 'Stop Crying Your Heart Out'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/dhZUsNJ-LQU?si=lLxvUqTK1gvnEVA8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n**웃으며 지내다 결국 쓰러졌다.** 다시 한번 겸손에 대해 생각했다. 예정에 없던 손님이 방문해서 고충이 이만저만이 아니었다. 그래도 호기심으로 시작해서 성찰까지 이어지는 한 달을 보냈다.\n\n## 응급실\n\n![불-편 <출처: 개비스콘>](./gaviscon.webp)\n\n응급실에 다녀왔다. 몸이 좋지 않았다. 웬만하면 통증을 참는데 몸이 심상치 않았다.\n\n동네병원에서 응급실로 이동했다. 황급히 도착한 응급실은 대기, 진료, 의료진분들의 모습까지 모두 낯설었다. 몸은 불편했지만 정신은 차릴 수 있었는데 시간이 갈수록 정신이 분열됐다.\n\n**'이곳은 어디, 나는 누구인가?'**\n\n식은땀을 흘리며 병상에서 대기하는 모습이 이질적으로 느껴졌다. 불안이 영혼을 잠식하는 과정을 보니 불안했다. 억지로 잠들었다.\n\n오랜 대기와 진료(총 8시간) 끝에 큰 문제는 발견되지 않았다. 다행히, 약과 함께라면 일상생활에 문제가 없었다. 하지만 유지하던 습관(운동, 개발)은 변화가 필요했다. 달리지 못하고 오랜\n시간 앉아 있을 수 없다는 사실은 고역이었다. 다행인 건 독서로 대체됐다. 미뤄왔던 책을 읽으며 '글쓰기'로 관심을 돌렸다.\n\n## 책책책! 책을 읽읍시다\n\n![<출처: MBC 느낌표 ｢책책책! 책을 읽읍시다｣>](./exclamation-mark.jpeg)\n\n몸이 좋지 않은 덕분에 미뤄왔던 책을 읽었다. 특히 기술이 아닌 일반도서를 주로 읽었다.\n\n이전에 책을 선택할 때는 기준이 없었다. 남들이 추천하는 \"OOO 선정 100선\"을 주로 선택했다. 하지만 계속 책을\n읽다 보니 나만의 기준이 생겼다. (물론, 기술과 일반에 따라 다르다.)\n\n### 1. 호기심\n\n- 기술: 구현과 결과, 반복하여 나오는 키워드, 오랜 시간 품어도 해결되지 않은 내용,\n    - 예) 데이터베이스, 일급객체, NestJS, 리팩터링\n- 일반: 인간관계, 인물\n    - 예) 상대방 또는 유명인물의 사고방식\n\n### 2. 휴대성\n\n- 앉아서 읽기: 기술\n- 이동 중 읽기: 주로 일반서, O'Reilly Media는 예외\n\n## 블로그 일주일 1포스팅 챌린지\n\n스터디가 흥미롭다. 인프런 워밍업 클럽이 종료되고 뜻이 맞는 러너(참가자)들이 모여 매주 시간을 보낸다. 5번밖에 진행되지 않았지만, 체감은 10회 이상 진행된 스터디 같다.\n\n스터디는 한 주간 공부한 내용을 정리해서 포스팅하며 진행된다. 관심사와 관점이 다양하다고 여러 번 느꼈다. 객체지향 프로그래밍, AI, 쿠키, 테스트에 관해 이야기했던 시간이 가장 기억에 남는다.\n\n**삶에서 가장 큰 재미를 느낄 때는 의견교환이다.** 스터디에 참여하길 잘했다는 생각이 든다. 선입견을 가졌었는데 긍정적인 방향으로 흘러가고 있다. 같은 관심사를 가진 사람들이 모여 함께 자라는 느낌을 받아서\n즐겁다.\n\n어떻게 하면 더욱 활성화될 수 있을까에 대해 고민한 적이 있는데 같은 고민을 하신 분이 계셔서 반가웠다. 포스팅을 하며 생각을 정리하고, 여러 관점도 접하고 일거양득이다.\n\n## 마치며\n\n건강의 중요성에 대해 한번 더 생각했다. 통증 덕분에 평소에 고민하지 않던 내용도 고민한 건 좋았지만, 불편한 건 부정할 수 없었다. 평소에 최대한 긍정적으로 사고하려 의식하는데, 몸이 좋지 않으니 어려웠다. 하고\n싶어서 계속 즐거워하며 하던 일에도 부담을 느꼈다. 그럼에도 다행인 건 지금은 많이 호전됐다.\n\n**\"컴포트존(Comfort Zone)에서 벗어나자.\"**\n\n다음을 위해서는 결국 도전을 해야 한다는 사실을 알면서도 컴포트존에 머무르고 있었다. 미지의 세계가 두렵고, 부담되지만 이겨내야 한다. 도전하기 좋은 적기다.\n"},{"excerpt":"이번장에서는 DML에 해당되는 INSERT, DELETE, UPDATE를 배우고 논리삭제와 물리삭제의 차이를 다룬다. 추가하기 - INSERT INSERT는 데이터를 추가할 때 사용한다. 예를 들어 회원가입, 상품추가등에 사용된다. 이전에 배운 SELECT는 서버에서 데이터를 조회하고 결과를 반환했다. (서버 -> 클라이언트) INSERT는 클라이언트에서…","fields":{"slug":"/sql-first-step-4/"},"frontmatter":{"date":"June 13, 2024","title":"[SQL 첫걸음] 4장. 데이터 추가, 삭제, 갱신","tags":["Database"]},"rawMarkdownBody":"\n이번장에서는 DML에 해당되는 INSERT, DELETE, UPDATE를 배우고 논리삭제와 물리삭제의 차이를 다룬다.\n\n## 추가하기 - INSERT\n\n```sql\nINSERT INTO 테이블명\nVALUES (값1, 값2, ...)\n```\n\nINSERT는 데이터를 추가할 때 사용한다. 예를 들어 회원가입, 상품추가등에 사용된다.\n\n- 이전에 배운 SELECT는 서버에서 데이터를 조회하고 결과를 반환했다. (서버 -> 클라이언트)\n- INSERT는 클라이언트에서 서버로 전송되므로 결과를 반환받지 않는다.\n\n데이터를 추가할 때 전체 열에 값을 추가할수도 있지만 열을 지정할 수도 있다.\n\n```sql\nINSERT INTO 테이블명 (열1, 열2, ...)\nVALUES (값1, 값2, ...)\n```\n\n데이터를 추가할 때 몇 가지 주의점이 있다.\n\n1. 해당 열의 데이터 형식에 맞는 값을 지정한다.\n2. 제약조건(DEFAULT, NOT NULL 등)\n\n> 앞서 여러 번 다뤘지만 NULL을 다룰 땐 특별히 주의가 필요하다.\n\n## 삭제하기 - DELETE\n\n```sql\nDELETE\nFROM 테이블명\nWHERE 조건식\n```\n\nDELETE는 데이터를 삭제한다. 조건식은 생략이 가능한데 생략 시 모든 행을 대상으로 동작한다. 만약 운영 중인 서비스에서 고객의 데이터 전체를 삭제하면 어떨까? 상상만 해도 등골이 오싹해진다.\n따라서 의도한 데이터만 삭제할 수 있도록 조건식 지정을 습관화하자.\n\n## 갱신하기 - UPDATE\n\n```sql\nUPDATE 테이블명\nSET 열1 = 값1,\n    열2 = 값2, ...WHERE 조건식\n```\n\nUPDATE는 데이터를 갱신할 때 사용한다. 앞서 다룬 DELETE처럼 조건식 생략이 가능하다. 하지만 모든 행이 갱신된다.\n\n> DELETE, UPDATE와 같은 데이터 수정 작업은 더욱 주의가 필요하다. 의도에 맞게 동작할 수 있도록 명령을 작성하자.\n\n## 물리삭제와 논리삭제\n\n물리삭제와 논리삭제는 데이터를 삭제하는 2가지 방법을 의미한다. 정답이 없고 비즈니스 요구사항에 맞춰 상황에 따라 선택해야 한다.\n\n### 물리삭제(Hard delete)\n\n- DELETE 명령을 사용해 데이터를 완전히 삭제한다.\n\n### 논리삭제(Soft delete)\n\n- 데이터가 삭제된 것처럼 표시하는 삭제 방법\n- 실제 데이터를 삭제하지 않고 삭제 플래그를 추가하여 상태를 변경한다.\n- 휴지통을 예시로 생각하면 편하다. 삭제한 파일이 휴지통으로 가고 완전히 삭제하면 복구할 수 없다.\n\n## 마치며\n\n논리삭제와, 물리삭제의 개념을 정리할 때 어려웠다. 책에서 설명하는 개념 외에 어떤 표현을 사용해야 이후에 자료를 접해도 기억할 수 있을까라는 관점에서 의문이 들었다. 그런데 파일 삭제를 예시로 떠올리니 쉽게\n이해할 수 있었다.\n\n- 논리삭제: 삭제한 파일은 휴지통으로 간다. (플래그를 수정한다)\n- 물리삭제: 휴지통에 보관된 파일을 삭제하여 완전히 삭제한다.\n\n물론 물리삭제와, 논리삭제가 데이터베이스에서 학습한 개념이기에 적절한 예제가 아닐 수 있다. 파일의 상태가 클라이언트에게 보여도 괜찮은가라는 의문이 있었는데 논리삭제의 개념과 빗대어 생각해 봤을 때 별다른 문제가\n없었다. 이렇게 이해가 잘 되지 않을 땐 일상의 개념과 접목해서 연상하는 것도 괜찮은 방법이라고 느껴 재밌었다.\n"},{"excerpt":"알고리즘에 들어온 허준이 교수의 영상은 흥미로웠다. 이어서 세계적인 수학자는 어떤 생각을 할까라는 질문을 가지고 인터뷰까지 읽었다. 추천하는 책이 많았지만 수학자라는 직업을 선택하는데\n도움 되었다는 부분에 이끌렸다. ―수학자가 되기로 결심한 계기는 무엇인가. “학부 마지막 학기 때, 서울대 석좌교수로 초빙된 일본의 세계적인 수학자이자 1970년 필즈상 수…","fields":{"slug":"/joy-of-learning/"},"frontmatter":{"date":"June 12, 2024","title":"히로나카 헤이스케, 『학문의 즐거움』","tags":["책"]},"rawMarkdownBody":"\n![히로나카 헤이스케, 《학문의 즐거움》, 방승양 번역, 김영사, 2013](./images/joy-of-learning.jpg)\n\n알고리즘에 들어온 허준이 교수의 영상은 흥미로웠다. 이어서 세계적인 수학자는 어떤 생각을 할까라는 질문을 가지고 인터뷰까지 읽었다. 추천하는 책이 많았지만 수학자라는 직업을 선택하는데\n도움 되었다는 부분에 이끌렸다.\n\n> ―수학자가 되기로 결심한 계기는 무엇인가.\n>\n> “학부 마지막 학기 때, 서울대 석좌교수로 초빙된 일본의 세계적인 수학자이자 1970년 필즈상 수상자인 히로나카 헤이스케의 수업을 들으면서 수학자가 되기로 결심했다. 중학교 때 히로나카 교수님이 쓴 ‘학문의\n> 즐거움’이란 책을 인상 깊게 읽었다. 교수님의 권유로 서울대 수학과 석사과정에 들어갔다.”\n\n- '산다'는 것은 자기 스스로 벌어서 자기의 힘으로 살아가는 것이다. 누구에게도 의존하지 않고 자기 혼자의 힘으로 살아가기 위해서는,\n  남들이 어떻게 생각할까 또는 남에게 어떻게 보일까 등에 신경 쓸 여유가 없다.(32쪽)\n- 내가 논물을 쓸 수 없었던 이유도 이것과 비슷하다. 그러나 논문을 씀으로써 자기의 이론을 창조해 가지 않으면 수학자로의 길이 막힌다. 써야 하나, 쓰지 말아야 하나? 나는 계속 고민했다. (85쪽)\n- 2년 동안이나 연구해 온 수학 이론이 젊은 학자에 의하여 풀렸다는 사실은 큰 충격이었다. 왜냐하면 '상대가 안된다'고 체념하고 '나는 바보니까'라고 자세를 바로 잡았기 때문이다. 그렇게 생각을 바꾸고 긍정적으로\n  생각하지 않으면 다음의 새로운 문제에 손댈 수 없으며, 더 나아가서 새로운 창조의 여행을 떠날 수 없다. (106쪽)\n- 소박한 마음을 잃지 않는 것, 그것이야말로 창조의 기반이 아닐까? 소심심고(素心深考) (108쪽)\n- 둘째는, 욕망이 창조에 필요한 것은 두말 할 필요도 없지만, 어디까지나 자기 내부에서 생긴 것이 아니면 안 된다는 것을 뼈저리게 느꼈다. (177쪽)\n- 나는 남보다 두 배의 시간을 들이는 것을 신조로 하고 있다. 그리고 끝까지 해내는 끈기를 의식적으로 키워 왔다. 끝까지 해내지 않으면 그 과정이 아무리 우수하더라도 결과가 생겨날 수 없기 때문이다. 아무리 두뇌가\n  우수하더라도 업적을 쌓지 않으면 수학자라고 말할 자격이 없다. (187쪽)\n\n## 마치며\n\n5월 인프런 워밍업 클럽 스터디가 막바지에 다 달았을 때 읽기 시작했고 이틀이 채 걸리지 않았다. 문장이 간단명료해서 쉽고 몰입력 있었다. 물론 수학 이론을 근거로 저자의 생각을 풀어내는 부분은 이해가 잘 되지\n않았다.\n\n가장 좋았던 점은 기존의 생각을 견고히 할 수 있었다. 책을 읽기 전부터 꾸준함과 동기에 대해 여러 번 고민했다. 꾸준함을 얻기 위해서는 외부에서 주입하는 동기가 아닌 내면의 소리를 듣고 본인만의 동기를 찾아야\n한다고 거듭 생각했는데 저자도 비슷한 생각을 하는 것 같아 반가웠다.\n\n또 제목만 봤을 땐 학문이라는 어렵고 따분한 주제로 이야기를 풀어갈 것 같지만 전혀 그렇지 않다. 가장 많이 이야기하는 주제는 \"창조\"인데 남녀노소 불문하고 추천하고 싶은 내용이었다. 특히 개발자를 준비하는\n나에게 와닿았고 개발자를 고민하는 다른 사람이 있다면 추천하고 싶다.\n\n나는 만족스럽게 읽었지만 비판적인 의견도 있었다.\n\n- 저자는 본인이 천재가 아니라고 이야기하지만 결국 천재들의 이야기다.\n- 일반인이 읽기에는 부담스럽고 기대에 미치지 못한다.\n\n받아들이기 나름이라고 생각한다. 천재라서 이렇게 할 수 있다기보단 이렇게 문제를 바라보고 해결하는 사람도 있구나라는 시각으로 읽었을 때 괜찮았다. 그리고 사람에 따라 어렵다고 생각할 수 있을 것 같다. (특히\n초반)\n\n> 수학은 인문학이라고 생각합니다. 천문학, 물리학 등은 자연이 만든 대상을 연구하는데 수학은 사람이 만들어 낸 걸 연구해요. 그런 면에서 철학, 문학과 오히려 결이 비슷하죠.\n\n끝으로 왜 배워야 하는가라는 근본적인 질문에 답하고 지혜를 얻을 수 있는 책이었다. 완독을 마쳤을 때, CS(Computer science)가 더욱 궁금해졌다.\n\n- [학문의 즐거움 추천 인터뷰 전문](https://www.donga.com/news/Economy/article/all/20220706/114308959/1)\n- [수학은 인문학이라고 생각합니다 인터뷰 전문](https://www.chosun.com/national/weekend/2022/01/01/ASP3UHRZTBD3VC7XN3LGQCIS2A/)\n"},{"excerpt":"매일 회고를 작성하며 나를 돌아본다. 일일회고를 모아 월간회고를 작성할 때 불편함을 겪어 간단한 서비스를 만들고 있다. 서비스를 개발하며 글은 쌓일텐데 항상 전체 데이터를 가져오는건 비효율적이지 않을까라는 접근으로 페이지네이션을 구현했다. 알고보니 페이지네이션도 다양한 선택지가 있었다. (Offset , No Offset)  오늘 이 시간에는 흔하게 접할…","fields":{"slug":"/sql-first-step-3/"},"frontmatter":{"date":"June 09, 2024","title":"[SQL 첫걸음] 3장. 정렬과 연산","tags":["Database"]},"rawMarkdownBody":"\n매일 회고를 작성하며 나를 돌아본다. 일일회고를 모아 월간회고를 작성할 때 불편함을 겪어 간단한 서비스를 만들고 있다.\n\n서비스를 개발하며 글은 쌓일텐데 항상 전체 데이터를 가져오는건 비효율적이지 않을까라는 접근으로 페이지네이션을 구현했다. 알고보니 페이지네이션도 다양한 선택지가 있었다. (Offset , No Offset)\n\n![인프런 질문 & 답변](images/offset-pagination.png)\n\n오늘 이 시간에는 흔하게 접할 수 있는 Offset 기반의 페이지네이션 구현에 필요한 기본적인 정보와 제공되는 함수에 대해 알아보자.\n\n## 정렬 - ORDER BY\n\n```sql\nSELECT 열명\nFROM 테이블명\nWHERE 조건식\nORDER BY 열명;\n```\n\n- ORDER BY는 검색 결과의 행 순서를 바꾸는 데 사용된다.\n- 테이블에 저장된 데이터의 순서를 바꾸지 않는다.\n- 지정하는 열명을 기준으로 정렬한다.\n- 기본은 오름차순(ASC)이고, 내림차순은 DESC 키워드를 사용한다.\n- 가능한 정렬 방법을 생략하지 않고 지정하는 방법을 권장한다.\n\n```sql\nSELECT 열명\nFROM 테이블명\nWHERE 조건식\nORDER BY 열명1, 열명2;\n```\n\n- 복수의 열을 지정하여 정렬할 수 있다.\n- **NULL 값의 정렬순서는 DBMS마다 다르다. MySQL은 NULL 값이 가장 작은 값으로 취급한다.**\n\n> 예를 들어 작성된 최신글을 조회할 때 ORDER BY 열명 DESC를 사용한다.\n\n## 결과 행 제한하기 - LIMIT & OFFSET\n\n```sql\nSELECT 열명\nFROM 테이블명 LIMIT 행수\nOFFSET 위치;\n```\n\n- 결과로 반환되는 행 수를 제한하는 데 사용한다.\n- LIMIT 구는 표준 SQL이 아니다. MySQL, PostgreSQL에서 사용할 수 있다.\n- OFFSET 구는 시작 위치를 지정한다.\n\n## 페이지네이션\n\n예를 들어 글 테이블에서 작성날짜를 기준으로 최신글을 조회하면 다음과 같이 작성할 수 있다.\n\n```sql\nSELECT *\nFROM posts\nORDER BY created_at DESC LIMIT 10\nOFFSET 20;\n```\n\n> 21번째 행부터 30번째 행까지 10개의 행을 가져온다.\n\n## 마치며\n\n![김연아 - 무슨 생각을 해... 그냥 하는거지](images/kim-yuna.jpeg)\n\n1년 전이 떠오른다. 팀 프로젝트에서 데이터베이스 관련 작업은 도움이 되지 못했다. 테이블 설계와 SQL에 대해 전혀 몰랐고, 페이지네이션도 자료를 보며 겨우 구현했다.\n\n프로젝트가 끝나고 페이지네이션에 대해 더 많은 자료를 찾아봤지만 의문은 풀리지 않았다. 돌이켜보면 기본기가 부족했다. (물론 아직도 부족하지만)\n\n아무리 봐도 이해되지 않는 부분들이 있었는데 오랜만에 책을 다시 읽으니 의문들이 풀려있었다. 잘 모르지만 일단 해보자라는 접근이 빛을 발하는 순간이다. 처음에는 이해되지 않아도 여러 번 반복해서 읽으니 이해됐다. (\n백문이 불여일타)\n\n오랜만에 페이지네이션 기본기를 정리하며 기초체력에 대해 한 번 더 돌아보는 시간을 가져 반가웠다.\n"},{"excerpt":"지난 4월 말부터 5월의 마지막날까지 한 달의 여정이 끝났다. 앞선 글에서 짧은 후기를 남겼다면 이번글에서는 전체적인 상세후기를 다룬다. 서론 스터디 참석 후기를 공유하기 전, 나를 먼저 소개하자면 개발자를 준비한 지 1년 됐다. 특성화고를 졸업한 반전공자다. 국비교육(자바 웹 개발 & AI)으로 다시 시작했고\n6개월 과정이 종료된 후에는 독학 중이다. …","fields":{"slug":"/inflearn-warmup-club-1-240531/"},"frontmatter":{"date":"June 01, 2024","title":"7. 인프런 워밍업 클럽 스터디 1기 참석 후기","tags":["후기"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 스터디 백엔드 1기](../images/inflearn-warmup-club-study.png)\n\n지난 4월 말부터 5월의 마지막날까지 한 달의 여정이 끝났다. 앞선 글에서 짧은 후기를 남겼다면 이번글에서는 전체적인 상세후기를 다룬다.\n\n## 서론\n\n스터디 참석 후기를 공유하기 전, 나를 먼저 소개하자면 개발자를 준비한 지 1년 됐다. 특성화고를 졸업한 반전공자다. 국비교육(자바 웹 개발 & AI)으로 다시 시작했고\n6개월 과정이 종료된 후에는 독학 중이다. (취업준비생) 스터디 참여를 결정하기 전 끊임없이 고민했다. 고민했던 이유는 크게 3가지다.\n\n- Java & Spring\n- 의문과 반감\n- 비용\n\n### Java & Spring\n\n국비교육에서 Java & Spring을 간단하게 배우고 [김영한 님 강의](https://www.inflearn.com/courses?s=%EA%B9%80%EC%98%81%ED%95%9C)도 짧게 봤었지만 현재는\n주로 사용하고 있지 않다. 또한 깊게 다뤄본 적이 없다.\n\n### 의문과 반감\n\n이전에 참여했던 스터디에서 선입견이 생겼다. 발표형식과 프로젝트형식을 참여했는데 부정적인 감정이 더 컸다. 형식과 상관없이 편차가 컸고 중도 이탈이 많았다. 스터디의 성공과\n실패에 상관없이(기준도 애매하지만) 함께 문제를 해결하는 느낌을 기대했던 나로선 아쉬움이 컸다.\n\n### 비용\n\n물론 인프런에서 깜짝 할인 쿠폰을 제공해 주신다. (백엔드 30%) 하지만 소득이 없는 나에겐 이마저 부담스러웠다. 입소문을 듣고 이미 장바구니에 있던 최태현 님의 강의였지만 그럼에도 심사숙고할 필요가 있었다.\n\n하지만 고민 끝에 참여를 결정했다. Java & Spring 문제는 단순했다. 다른 언어, 프레임워크를 배울 때도 자연스럽게 Java & Spring 키워드로 검색해서 좋은 자료를 접했다. 그리고 돌아가는 길이\n아닐까 고민도 했지만 언어와 프레임워크 상관없이 좋은 개발자에 대해 배울 수 있을 것 같았다. 선입견을 깨고 도전해 보자는 가벼운 마음으로 시작했다.\n\n## 수료식\n\n![수료식](./images/completion-ceremony.jpeg)\n\n오프라인 수료식에 참여했다. 수료식은 네트워킹, 시상식, Q&A 순서로 진행됐다.\n\n### 네트워킹\n\n호기롭게 판교에 도착한 지 10시간이 지나 초췌한 모습으로 인프랩에 도착했다. 이미 도착하신 두 분이 계셨고 자연스럽게 합석했다. 처음 뵀지만 낯설지 않았다. 온라인으로 다른 러너, 서포터즈분들의 관점을 배워서\n낯익었다. 심지어 어디서 뵌듯한 느낌이 들어서 조심스럽게 여쭤봤는데 [김영한 님 밋업 행사](https://devmeeple.github.io/2024-02/)에서 마주친 분들이 많으셨다. 몹시 반가워서 편하게\n대화를 나눴다.\n\n서포터즈중에 현직자분들도 계셔서 직장생활 후기도 들을 수 있었고, 취업준비생들의 고민, 그리고 대학생분의 이야기도 들을 수 있어서 재밌었다.\n\n### 시상식\n\n내색하지 않았지만 모두가 주목하던 시상식이 시작됐다. 셰리 님께서 인프런 워밍업 클럽이 시작하게 된 방향성을 먼저 소개해주셔서 감사했다. 개인적으로 궁금했던 내용이기 때문에 말씀해주시지 않았다면 직접 여쭤봤을 것\n같다.\n\n이어서 코치님들(최태현, John Ann, 볼드님)의 간단한 소개와 후기가 이어졌다. 온라인으로 뵙고 오프라인으로 처음 뵀는데 정말 똑같으셨다. 이어서 시상식이 이어졌는데, 운 좋게 우수러너에 선정됐다. 시상식을\n진행하며 서포터즈분들께서 장난을 치셔서 괜히 기대를 했다 안되면 어떻게 하지 걱정을 했는데 다행이다. 좋았지만 괜히 쑥스러웠다. 참석하신 분들의 축하를 받으며 앞에 나가 상품을 받았다. 수상을 하지 않았더라도\n이미 배운 점이 많아서 감사했는데 더욱 모든 분들께 감사했다.\n\n### Q&A\n\nQ&A는 오프라인, 온라인 동시에 진행됐다. 시작 전 남은 시간에 태현 님께서 세금강의를 해주셨는데 말씀을 정말 잘하신다고 느꼈다. 다음 강의가 혹시 세금강의인지 여쭤보고 싶을 정도다. Q&A는 이전 라이브세션과\n비슷했다. 모두가 좋은 백엔드 개발자를 목표로 하고 있기 때문에 성장에 관련된 질문과 답변이 오갔다.\n\n질문과 답변보다 인상 깊었던 점은 태현 님의 모습이다. 오래 개발을 하셨기 때문에 본인의 확고한 생각으로 단언하실 수 있다 생각한다. 하지만 강의, 라이브세션, Q&A 과정 전체 중 한 번도 단언하시는 모습을 볼 수\n없었다. 항상 여러 가능성을 열어두고 조심스럽게 답변하시고 어떤 질문이라도 좋은 질문이라는 말씀을 빼먹지 않으셨다. 대한민국의 교육과정을 거쳐온 우리가 질문을 하는 건 굉장히 용기가 필요한 행동이라고 생각하는데 어떤\n질문이라도 성심성의껏 답변하시는 모습이 인상 깊었다.\n\n## 마치며\n\n직장인의 생활을 체험하고자 호기롭게 나서 아침에 판교에 도착했다. 오전에는 카페에서 시간을 보내고 오후는 거리를 배회했다. 평소에 운동도 꾸준히 하고 있었기 때문에 체력이 늘지 않았을까 싶었는데 오산이었다. 일정을\n마치고 집에 돌아오니 허리가 끊어질 것 같았다.\n\n인프런 워밍업 클럽 백엔드 1기 생활이 정말 끝났다. 오랜 고민 끝에 참여한 스터디에서 **좋은 개발자란 무엇이고 어떻게 학습할 수 있을까를 배운 점**이 가장 큰 소득이다. 스터디가 끝이 났지만 활동에 지속적인\n관심을 보낼 예정이다. 더욱 활성화되길 바란다. 끝으로 나와 비슷한 고민을 하시는 다른 미래러너분들의 선택에 도움이 되길 바라며 후기를 마친다.\n"},{"excerpt":"지난달보다 휴식이 많았지만 만족스러운 한달을 보냈다. 기억하고 싶은 사건사고도 많다. 어떤일이 있었는지 알아보자. 우리는 왜 잠을 자야 할까 개발서적 외에 이 책이 가장 궁금했다. 1장을 읽은 게 전부지만 잠은 항상 탐구하고 해결하고 싶은 문제였다.\n이론적인 배경외에 잠이 왜 필요한지 직접 느꼈다. 앞서 이야기했듯 이번달은 휴식이 잦았다. 운동을 쉬기도 …","fields":{"slug":"/retrospective-20240530/"},"frontmatter":{"date":"May 30, 2024","title":"2024 월간 장태근 5월호 '마라톤'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ClwEVvUgxEE?si=HzV9OLWagN8cm1FT\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n지난달보다 휴식이 많았지만 만족스러운 한달을 보냈다. 기억하고 싶은 사건사고도 많다. 어떤일이 있었는지 알아보자.\n\n## 우리는 왜 잠을 자야 할까\n\n개발서적 외에 이 [책](https://product.kyobobook.co.kr/detail/S000000582009)이 가장 궁금했다. 1장을 읽은 게 전부지만 잠은 항상 탐구하고 해결하고 싶은 문제였다.\n이론적인 배경외에 잠이 왜 필요한지 직접 느꼈다. 앞서 이야기했듯 이번달은 휴식이 잦았다. 운동을 쉬기도 했고 개발에 손을 대지 않은 날도 있었다. 시간이 지나 다시 생각하니 문제는 잠에서 시작됐다.\n잠이 오지 않으니 밤을 새워야겠다는 접근은 잘못됐다. 하루가 아닌 며칠이 사라졌다. 상태이상이 걸려 도트대미지가 들어온다. 어떻게든 자야 한다.\n\n### 잠이 오지 않았던 이유(추정)\n\n1. 낮잠\n2. 카페인\n3. 잠들기 전 운동\n\n## 인프런 워밍업 클럽 - 스터디 1기\n\n강한 이끌림으로 시작했다. [앞서 이야기](https://devmeeple.github.io/2024-04/)했듯이 참여하지 않으면 후회할 것 같았다. 스터디뿐만 아니라 학습할 때 중요하게 생각하는 점은 사고력이다.\n익숙한 학습방식은 정답을 찾는 것이다. 하지만 현실의 문제는 100% 일치하는 정답이 없고 관점에 따라 계속 바뀌기 마련이었다. 스터디에서도 관점에 따른 사고방식을 중점으로 두었다.\n개인적으로 난이도(과제, 강의)는 적절했고 운영방식도 만족스러웠다.\n\n> 모집 페이지에서 강조한 취업 준비와 실무에 필요한 기초를 적절하게 다뤘고 다른 방법으로 문제를 해결할 수 있지 않을까 생각하면 라이브 세션이 열렸다.\n\n워밍업 클럽은 지식공유자 주도 스터디라는 점이 다른 스터디와 차별화된 점이기 때문에 라이브세션의 중요도가 높다 생각한다. 또한 강의도 차이점이 있다고 생각하는데 과제를 제공하는 강의는\n많지 않았다. (강의를 들었다면 풀 수 있는 난이도) 만약 모집기간이 아니라서 신청하지 못했더라도 제안하는 일정에 맞춰 강의를 듣고 과제를 구현하면 비슷한 경험을 할 수 있을 것 같다.\n\n아쉬운 점도 있었다. 온라인으로 이뤄지는 강의라서 러너들 간의 소통이 부족했다. 다른 러너는 어떻게 문제를 해결했는지 참고하는 게 전부였다. 하지만 온라인이기 때문에 어쩔 수 없고 운영의 문제는 아니라고 생각한다.\n오히려 문의사항과 질문에 피드백이 몹시 빨라서 당황스러웠다. (장점)\n\n만약 누군가 참여를 고민한다면 추천하고 싶다. 참여인원은 취업준비생, 주니어개발자로 주로 구성되는데 코드리뷰(피드백)와 다양한 지식을 공유하는 점이 매력적이다. 스터디를 신청하기 전에 방황하고 있었는데\n방향을 잡고 확신을 가질 수 있었다.\n\n스터디 인식의 변화를 이뤘다. 학습할 때 함께 공부하라는 의견을 흔히 접할 수 있다. 하지만 동의하기 어려웠다. 이전에 참여했던 스터디는 조별과제의 성격이 강했다.\n뛰어난 한 명이 앞서나가고 다른 인원은 버거워하거나 중도하차가 빈번했다. 이러한 점이 긍정적으로 다가오지 않았고 오히려 부정적으로 다가왔다. 그러나 이번 스터디는 일정이 명확하게 정해져 있고, 의견을 온라인으로\n편하게 물어보며 함께 자라는 느낌을 받았다.\n\n끝으로 태현님께서 강의마다 하시는 마지막 멘트가 기억에 남는다. 그럼 오늘도 스터디에 참여하신 여러분들을 존중하고 존경하며 마무리하도록 하겠습니다!\n\n## 트레일러닝\n\n습관을 만들 때 가장 중요하게 생각한 점은 관심의 끈을 놓지 않는 것이다. 시작할 때는 매일 코딩을 해야 한다는 생각이 강했는데 막상 쉽지 않았다. 또한 문제를 계속 잡고 있는 게 문제해결의 능사는 아니라는 것을\n느꼈다. 무의식에 문제를 정의해 둬도 우연히 해결되는 경우가 많았다. 수정을 거쳐 만들어진 현재의 습관은 일요일 휴식이다. 6일은 같은 루틴을 반복하지만 일요일은 평소보다 늦게 일어난다. 평소 우선순위가 개발이었다면\n일요일은 우선순위를 조정한다. 마지막 주 일요일은 예외인데, 나에게 선물을 주는 편이다.\n\n이번달은 [트레일러닝](https://socksupmoment.com/blogPost/trail_running)을 다녀왔다. 당일 전까지도 등산을 계획했는데 잠들기 전에 전환했다. 등산과 러닝 둘 다 하고 싶은\n욕심이 불러온 결과다. 가볍게 생각했는데 쉽지 않았다. 평지와 오르막의 차이를 느꼈고 비포장된 길을 뛰며 신발의 중요성을 느꼈다. (슬립온을 신었는데 지압판에서 뛰는 것 같았다) 언덕의 수많은 수문장에 가로막혀\n빠른 속도는 아니었지만 다치지 않아서 다행이다. 색다른 경험이었고 다음에도 뛰고 싶다.\n\n## 기타\n\n- [학문의 즐거움](https://product.kyobobook.co.kr/detail/S000000594931): 수학자의 삶과 창조에 대해 다룬다. 창조를 시작하는 과정에서 완벽주의의 문제점을 느꼈다.\n- 5,000만의 사나이: 인프런 봤어요 5,000만 깜짝 이벤트에 당첨됐지만 사용하지 못해서 아쉽다.\n\n## 마치며\n\n꾸준하게 질문을 던지며 만족스러운 한 달을 보냈다. 개발 외에도 다양한 경험과 적절한 휴식의 조화로 이뤄낸 성과라고 생각한다. 이 또한 지나가겠지만 현재의 파도에 올라탄다면 성과도 드러나고 이야기할 거리도 생기지\n않을까 싶다. 일희일비하지 말고 6월에 올라타자.\n"},{"excerpt":"6일 차는 스프링 컨테이너의 의미와 사용 방법을 주제로 스프링 컨테이너가 왜 필요한지, 어떻게 기존의 코드를 리팩터링 할 수 있는지 배웠다. 주어진 과제는 총 2문제로 계층화 아키텍처(Layered\nArchitecture) 리팩터링 하기, 스프링 빈(Spring Bean)을 다룰 수 있는지 확인한다. 요구사항 문제 1: 과제 4에서 만들었던 API를 Co…","fields":{"slug":"/task-6-spring-container-and-layered-architecture/"},"frontmatter":{"date":"May 13, 2024","title":"6. 스프링 컨테이너와 계층화 아키텍처(Layered Architecture)","tags":["Spring"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n6일 차는 **스프링 컨테이너의 의미와 사용 방법**을 주제로 스프링 컨테이너가 왜 필요한지, 어떻게 기존의 코드를 리팩터링 할 수 있는지 배웠다. 주어진 과제는 총 2문제로 계층화 아키텍처(Layered\nArchitecture) 리팩터링 하기, 스프링 빈(Spring Bean)을 다룰 수 있는지 확인한다.\n\n## 요구사항\n\n- 문제 1: [과제 4](https://devmeeple.github.io/task-4-fruit-store-api/)에서 만들었던 API를 Controller -Service - Repository로 분리하기\n- 문제 2:\n    1. 분리된 저장소(FruitRepository)를 FruitMemoryRepository, FruitMySqlRepository로 나누기\n    2. `@Primary` 어노테이션을 활용해 Repository를 바꿔가며 동작할 수 있도록 변경하기\n\n## 문제 1\n\n```java\n\n@RequestMapping(\"/api/v1/fruit\")\n@RestController\npublic class FruitController {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    public FruitController(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @PostMapping\n    public void addFruit(@RequestBody AddFruitIRequest request) {\n        String sql = \"INSERT INTO fruit (name, warehousing_date, price) VALUES (?, ?, ?)\";\n        jdbcTemplate.update(sql, request.getName(), request.getWarehousingDate(), request.getPrice());\n    }\n\n    @PutMapping\n    public void updateFruit(@RequestBody UpdateFruitRequest request) {\n        String readSql = \"SELECT * FROM fruit WHERE id = ?\";\n        boolean isFruitNotExist = jdbcTemplate.query(readSql, (rs, rowNum) -> 0, request.getId()).isEmpty();\n\n        if (isFruitNotExist) {\n            throw new IllegalArgumentException(\"과일을 찾을 수 없습니다\");\n        }\n\n        String sql = \"UPDATE fruit SET is_sold = 1 WHERE id = ?\";\n        jdbcTemplate.update(sql, request.getId());\n    }\n\n    @GetMapping(\"/stat\")\n    public FruitSalesResponse findByName(@RequestParam String name) {\n        String sql = \"SELECT SUM(price) FROM fruit WHERE name = ? GROUP BY is_sold\";\n        List<Long> salesAmounts = jdbcTemplate.query(sql, (rs, rowNum) -> rs.getLong(1), name);\n\n        Long salesAmount = salesAmounts.get(0);\n        Long notSaleAmount = salesAmounts.get(1);\n\n        return new FruitSalesResponse(salesAmount, notSaleAmount);\n    }\n}\n```\n\n이전에 작성된 코드는 Controller가 HTTP와 관련된 기능 외에 다양한 기능을 포함하고 있다. 요구사항에 맞게 분리해 보자.\n\n### Controller\n\n```java\n\n@RequestMapping(\"/api/v1/fruit\")\n@RestController\npublic class FruitController {\n\n    private final FruitService fruitService;\n\n    public FruitController(FruitService fruitService) {\n        this.fruitService = fruitService;\n    }\n\n    @PostMapping\n    public void addFruit(@RequestBody AddFruitRequest request) {\n        fruitService.addFruit(request);\n    }\n\n    @PutMapping\n    public void updateFruit(@RequestBody UpdateFruitRequest request) {\n        fruitService.updateFruit(request);\n    }\n\n    @GetMapping(\"/stat\")\n    public FruitSalesResponse findByName(@RequestParam String name) {\n        return fruitService.findByName(name);\n    }\n}\n```\n\n### Service\n\n```java\n\n@Service\npublic class FruitService {\n\n    private final FruitRepository fruitRepository;\n\n    public FruitService(FruitRepository fruitRepository) {\n        this.fruitRepository = fruitRepository;\n    }\n\n    public void addFruit(AddFruitRequest request) {\n        fruitRepository.addFruit(request.getName(), request.getWarehousingDate(), request.getPrice());\n    }\n\n    public void updateFruit(UpdateFruitRequest request) {\n        if (fruitRepository.isFruitNotExist(request.getId())) {\n            throw new IllegalArgumentException(\"과일을 찾을 수 없습니다\");\n        }\n\n        fruitRepository.updateFruit(request.getId());\n    }\n\n    public FruitSalesResponse findByName(String name) {\n        List<Long> salesAmounts = fruitRepository.findByName(name);\n\n        Long salesAmount = salesAmounts.get(0);\n        Long notSaleAmount = salesAmounts.get(1);\n\n        return new FruitSalesResponse(salesAmount, notSaleAmount);\n    }\n}\n```\n\n### Repository\n\n```java\n\n@Repository\npublic class FruitRepository {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    public FruitRepository(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @Override\n    public void addFruit(String name, LocalDate warehousingDate, long price) {\n        String sql = \"INSERT INTO fruit (name, warehousing_date, price) VALUES (?, ?, ?)\";\n        jdbcTemplate.update(sql, name, warehousingDate, price);\n    }\n\n    @Override\n    public List<Long> findByName(String name) {\n        String sql = \"SELECT SUM(price) FROM fruit WHERE name = ? GROUP BY is_sold\";\n        return jdbcTemplate.query(sql, (rs, rowNum) -> rs.getLong(1), name);\n    }\n\n    @Override\n    public boolean isFruitNotExist(long id) {\n        String readSql = \"SELECT * FROM fruit WHERE id = ?\";\n        return jdbcTemplate.query(readSql, (rs, rowNum) -> 0, id).isEmpty();\n    }\n\n    @Override\n    public void updateFruit(long id) {\n        String sql = \"UPDATE fruit SET is_sold = 1 WHERE id = ?\";\n        jdbcTemplate.update(sql, id);\n    }\n}\n```\n\n기존 코드보다 역할이 분명해진 점을 확인할 수 있다. 다시 정리하면 Controller, Service, Repository는 다음과 같은 역할을 가진다.\n\n- Controller: HTTP와 관련된 기능\n- Service: 트랜잭션에 대한 제어, 다양한 도메인을 필요로 하는 로직의 일부\n- Repository: 저장소에서 도메인을 가져오는 기능\n\n## 문제 2\n\n- 강의를 참고하여 최소한으로 구성했다.\n\nRepository를 나누기 위해 인터페이스(interface)를 생성하고 상속하여 구현하는 방식으로 진행했다.\n\n```java\npublic interface FruitRepository {\n\n    void addFruit(String name, LocalDate warehousingDate, long price);\n\n    List<Long> findByName(String name);\n\n    void updateFruit(long id);\n\n    boolean isFruitNotExist(long id);\n}\n```\n\n### @Primary\n\n```java\n\n@Primary\n@Repository\npublic class FruitMySqlRepository implements FruitRepository {\n}\n\n@Repository\npublic class FruitMemoryRepository implements FruitRepository {\n}\n```\n\n구현한 저장소에 `@Repository`를 사용하고 동작시키고 싶은 저장소에 `@Primary`를 사용한다.\n\n- 여러 구현체를 가진 동일한 인터페이스를 사용할 때 어떤 빈을 주입할지 지정해야 한다.\n\n- `@Primary` 또는 `@Qualifier`를 사용하지 않으면 에러가 발생한다.\n\n### @Qualifier\n\n정의\n\n```java\n\n@Repository\n@Qualifier(\"mysql\")\npublic class FruitMySqlRepository implements FruitRepository {\n    // 구현\n}\n\n@Repository\n@Qualifier(\"memory\")\npublic class FruitMemoryRepository implements FruitRepository {\n    // 구현\n}\n```\n\n주입\n\n```java\n\n@Autowired\n@Qualifier(\"mysql\")\nprivate FruitRepository mysqlRepository;\n\n@Autowired\n@Qualifier(\"memory\")\nprivate FruitRepository memoryRepository;\n```\n\n## 마치며\n\n간단한 문제였지만 이외에도 다양한 시도를 해서 얻은 지식이 많았다. 추가로 고민했던 내용은 다음과 같다.\n\n- 메모리 데이터베이스 데이터를 어떻게 미리 넣어둘 수 있을까?: `@EventListener`\n- MemoryRepository를 제대로 구현해야 하는가?: 요구사항을 오버한다고 생각하여 최소한으로 구성했다.\n\n리팩터링 전에 테스트 코드가 작성되어 있었다면 진행상황을 확인하며 더욱 재밌게 문제를 풀지 않았을까 하는 생각이 들었다. 테스트 코드도 얼른 배우고 리팩터링을 진행해야겠다.\n"},{"excerpt":"5일 차는 클린코드의 개념과 리팩터링을 배웠다. 실제 코드에 적용해 가면서 클린코드와 친해지자. 위 예제는 다음과 기능과 요구사항을 가진다. 기능 숫자를 입력받는다. 숫자만큼 주사위를 굴려, 숫자가 몇 번 나왔는지 출력한다. 요구사항 주사위가 정육면체가 아닌 n면체 일 때 최소한으로 수정하도록 고려하여 코드를 작성하라. 리팩터링 리팩터링을 진행할 때 아래…","fields":{"slug":"/task-5-clean-code/"},"frontmatter":{"date":"May 09, 2024","title":"5. 클린코드 이해하기","tags":["Java"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n5일 차는 클린코드의 개념과 리팩터링을 배웠다. 실제 코드에 적용해 가면서 클린코드와 친해지자.\n\n```java\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        System.out.print(\"숫자를 입력하세요 : \");\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n\n        int r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0;\n\n        for (int i = 0; i < a; i++) {\n            double b = Math.random() * 6;\n            if (b >= 0 && b < 1) {\n                r1++;\n            } else if (b >= 1 && b < 2) {\n                r2++;\n            } else if (b >= 2 && b < 3) {\n                r3++;\n            } else if (b >= 3 && b < 4) {\n                r4++;\n            } else if (b >= 4 && b < 5) {\n                r5++;\n            } else if (b >= 5 && b < 6) {\n                r6++;\n            }\n        }\n\n        System.out.printf(\"1은 %d번 나왔습니다. \\n\", r1);\n        System.out.printf(\"2는 %d번 나왔습니다. \\n\", r2);\n        System.out.printf(\"3은 %d번 나왔습니다. \\n\", r3);\n        System.out.printf(\"4는 %d번 나왔습니다. \\n\", r4);\n        System.out.printf(\"5는 %d번 나왔습니다. \\n\", r5);\n        System.out.printf(\"6은 %d번 나왔습니다. \\n\", r6);\n    }\n}\n```\n\n위 예제는 다음과 기능과 요구사항을 가진다.\n\n## 기능\n\n- 숫자를 입력받는다.\n- 숫자만큼 주사위를 굴려, 숫자가 몇 번 나왔는지 출력한다.\n\n## 요구사항\n\n- 주사위가 정육면체가 아닌 n면체 일 때 최소한으로 수정하도록 고려하여 코드를 작성하라.\n\n## 리팩터링\n\n리팩터링을 진행할 때 아래 순서로 진행했다.\n\n1. 의미있는 변수명 사용하기\n2. 주사위 게임을 실행하는 메인 클래스와 주사위 게임 클래스를 선언하고 분리했다.\n3. 입력받기, 굴리기, 출력하기 메서드 구현하기\n4. 조합하기 + 출력하기\n\n```java\npublic class DiceGame {\n    private static final int DICE_FACE = 6;\n\n    private final int rolls;\n    private final int[] rollCounts;\n\n    public DiceGame(int rolls) {\n        this.rolls = rolls;\n        this.rollCounts = new int[DICE_FACE];\n    }\n\n    public void playGame() {\n        countRolls();\n        printResults();\n    }\n\n    private void countRolls() {\n        IntStream.range(0, rolls)\n                .map(i -> rollDice())\n                .forEach(roll -> rollCounts[roll - 1]++);\n    }\n\n    private int rollDice() {\n        return (int) (Math.random() * DICE_FACE) + 1;\n    }\n\n    private void printResults() {\n        IntStream.range(0, rollCounts.length)\n                .forEach(i -> System.out.printf(\"[%d] 은(는) [%d번] 나왔습니다.\\n\", i + 1, rollCounts[i]));\n    }\n}\n```\n\n```java\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        System.out.print(\"주사위를 몇번 굴릴까요? : \");\n        Scanner scanner = new Scanner(System.in);\n        int rolls = scanner.nextInt();\n        scanner.close();\n\n        System.out.println(\"==================================\");\n        DiceGame game = new DiceGame(rolls);\n        game.playGame();\n    }\n}\n```\n\n주사위가 정육면체가 아닌 n면체가 되었을 때 DICE_FACE 변수를 수정하면 모두 수정되도록 전역으로 선언했다.\n\n## 마치며\n\n어떤식으로 작성해야 가독성이 좋을지 고려하며 작성했다. 하지만 객체지향 프로그래밍과 함수형 프로그래밍이 능숙했다면 더 가독성 좋은 코드를 작성할 수 있을 것 같다고 느꼈다. 과제를 진행하는 다른 스터디원들은\n어떻게 문제를 해결했는지 참고하며 배워야겠다.\n"},{"excerpt":"3, 4일 차 강의에서는 기본적인 데이터베이스 사용법과 데이터베이스를 사용해 API를 만드는 방법을 배웠다. 학습한 내용을 바탕으로 요구사항을 살펴보자. 4일 차 구현과제는 총 3 문제고 각 문제는 이어진다. 요구사항 과일가게에 입고되는 과일정보를 추가한다. 팔린 과일의 정보를 저장한다. 과일이름을 기준으로 팔린 금액, 팔리지 않은 금액을 조회한다. 강의…","fields":{"slug":"/task-4-fruit-store-api/"},"frontmatter":{"date":"May 03, 2024","title":"4. 과일가게 API 구현하기","tags":["Spring"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n3, 4일 차 강의에서는 기본적인 데이터베이스 사용법과 데이터베이스를 사용해 API를 만드는 방법을 배웠다. 학습한 내용을 바탕으로 요구사항을 살펴보자.\n\n> 4일 차 구현과제는 총 3 문제고 각 문제는 이어진다.\n\n## 요구사항\n\n1. 과일가게에 입고되는 과일정보를 추가한다.\n2. 팔린 과일의 정보를 저장한다.\n3. 과일이름을 기준으로 팔린 금액, 팔리지 않은 금액을 조회한다.\n\n```sql\nCREATE TABLE fruit\n(\n    id               BIGINT AUTO_INCREMENT,\n    name             VARCHAR(20) NOT NULL,\n    warehousing_date DATE        NOT NULL,\n    price            BIGINT      NOT NULL,\n    is_sold          TINYINT(1) NOT NULL DEFAULT 0\n    PRIMARY KEY (id)\n);\n```\n\n강의에서 다룬 내용을 바탕으로 테이블을 선언한다.\n\n> Q. 만약 테이블을 이미 선언했다면 했다면 어떻게 할까?\n\n`ALTER TABLE [테이블명] ADD [컬럼명] [타입] [옵션];`과 같은 형식으로 컬럼을 추가한다.\n\n## 문제 1) 과일정보 추가하기\n\n| 메서드  | URL           |\n|------|---------------|\n| POST | /api/v1/fruit |\n\n### 요청\n\n| 이름              | 타입        | 설명   | 필수 |\n|-----------------|-----------|------|----|\n| name            | String    | 과일명  | O  |\n| warehousingDate | LocalDate | 입고날짜 | O  |\n| price           | long      | 가격   | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp POST :8080/api/v1/fruit name=사과 warehousingDate=2024-02-01 price=5000\n```\n\n```json\n{\n  \"name\": \"사과\",\n  \"warehousingDate\": \"2024-02-01\",\n  \"price\": 5000\n}\n```\n\n**응답: 성공**\n\n### 해결\n\n1번 문제의 경우 요청형식은 정의되어 있지만 응답은 상태코드를 반환한다. 문제 해결을 위해서 요청 객체(DTO)가 필요하다.\n\n```java\npublic class AddFruitIRequest {\n    private final String name;\n    private final LocalDate warehousingDate;\n    private final long price;\n\n    public AddFruitIRequest(String name, LocalDate warehousingDate, long price) {\n        this.name = name;\n        this.warehousingDate = warehousingDate;\n        this.price = price;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public LocalDate getWarehousingDate() {\n        return warehousingDate;\n    }\n\n    public long getPrice() {\n        return price;\n    }\n}\n```\n\n```java\n\n@PostMapping\npublic void addFruit(@RequestBody AddFruitIRequest request) {\n    String sql = \"INSERT INTO fruit (name, warehousing_date, price) VALUES (?, ?, ?)\";\n    jdbcTemplate.update(sql, request.getName(), request.getWarehousingDate(), request.getPrice());\n}\n```\n\n데이터베이스에 데이터를 추가하기 위해서는 DML(Data Manipulation Language) 중 하나인 INSERT 문을 사용한다. 응답형식은 따로 정해져 있지 않아 반환하지 않았다.\n\n> Q. 정수를 다루는 대표적인 방법은 int와 long이 있다. 왜 long을 사용했을까?\n\n애플리케이션의 확장을 고려하여 long형식으로 선언했다고 생각한다. 데이터베이스에서 BIGINT 형식으로 테이블을 선언한 것과 같은 이유다.\n\n## 문제 2) 과일정보 수정\n\n| 메서드 | URL           |\n|-----|---------------|\n| PUT | /api/v1/fruit |\n\n### 예제\n\n**요청**\n\n```shell\nhttp PUT :8080/api/v1/fruit id=3\n```\n\n```json\n{\n  \"id\": 3\n}\n```\n\n**응답: 성공**\n\n### 해결\n\n```java\n\n@PutMapping\npublic void updateFruit(@RequestBody UpdateFruitRequest request) {\n    String readSql = \"SELECT * FROM fruit WHERE id = ?\";\n    boolean isFruitNotExist = jdbcTemplate.query(readSql, (rs, rowNum) -> 0, request.getId()).isEmpty();\n\n    if (isFruitNotExist) {\n        throw new IllegalArgumentException(\"과일을 찾을 수 없습니다\");\n    }\n\n    String sql = \"UPDATE fruit SET is_sold = 1 WHERE id = ?\";\n    jdbcTemplate.update(sql, request.getId());\n}\n```\n\n가장 애를 먹었다. 컨트롤러는 강의에서 다룬 형식과 같다. 하지만 요청객체 선언은 수정이 필요했다. 기존과 같은 방법으로 선언했을 때는 문제가 해결되지 않았다. 반복적으로 400 Bad Request가 발생했다.\n\n> 400 상태코드는 클라이언트에서 잘못된 형식으로 요청할 때 발생한다.\n\n> JSON parse error: Cannot construct instance of\n\nSpring은 직렬화/역직렬화에 Jackson 라이브러리를 사용한다. Jackson은 기본생성자가 없으면 동작하지 않는다.\n총 3가지 방법으로 문제를 해결할 수 있었다.\n\n1. 기본 생성자를 생성한다: 기본 생성자를 생정하면 `final` 를 사용할 수 없다.\n2. 임의의 필드를 추가한다: 현재는 `id` 필드만 있지만 다른 필드를 추가하면 동작한다.\n3. 방식을 지정한다.\n\n3번으로 문제를 해결하기 위해서는 Jackson의 동작방식을 알아봤다. Jackson은 두 가지의 방식으로 데이터를 변환한다.\n\n- Properties: 기본적인 변환방식\n- Delegating: 복잡한 데이터가 있거나 데이터 처리방법을 변경할 때 사용\n\n> 필드가 1개인 상태에서 Properties 방식으로 변환하려면 어떻게 해야 할까?\n\n```java\n\npublic class UpdateFruitRequest {\n    private final long id;\n\n    @JsonCreator\n    public UpdateFruitRequest(@JsonProperty(\"id\") long id) {\n        this.id = id;\n    }\n\n    public long getId() {\n        return id;\n    }\n}\n```\n\n`@JsonCreator`, `@JsonProperty` 어노테이션을 사용한다. 두 어노테이션을 사용하면 기본생성자와 setter 없이도 객체를 생성하여 불변객체를 선언할 수 있다.\n\n2번 문제도 앞선 1번 문제처럼 응답형식이 정해져 있지 않다. 아무것도 반환하지 않는다.\n\n## 문제 3) 과일이름을 기준으로 팔린 금액, 팔리지 않는 금액 조회\n\n```text\n1. (1, 사과, 3000원, 판매 O)\n2. (2, 사과, 4000원, 판매 X)\n3. (3, 사과, 3000원, 판매 O)\n```\n\n| 메서드 | URL                |\n|-----|--------------------|\n| GET | /api/v1/fruit/stat |\n\n### 요청\n\n**쿼리 파라미터**\n\n| 이름   | 타입     | 설명  | 필수 |\n|------|--------|-----|----|\n| name | String | 과일명 | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp :8080/api/v1/fruit\\?name=사과\n```\n\n**응답: 성공**\n\n```json\n{\n  \"salesAmount\": 6000,\n  \"notSalesAmount\": 4000\n}\n```\n\n### 해결\n\n3번 문제는 이전 문제들과 다르게 응답형식이 지정되어 있다. 따라서 응답 객체를 선언해야 한다.\n\n```java\npublic class FruitSalesResponse {\n    private final long salesAmount;\n    private final long notSalesAmount;\n\n    public FruitSalesResponse(long salesAmount, long notSalesAmount) {\n        this.salesAmount = salesAmount;\n        this.notSalesAmount = notSalesAmount;\n    }\n\n    public long getSalesAmount() {\n        return salesAmount;\n    }\n\n    public long getNotSalesAmount() {\n        return notSalesAmount;\n    }\n}\n```\n\n```java\n\n@GetMapping(\"/stat\")\npublic FruitSalesResponse findByName(@RequestParam String name) {\n    String sql = \"SELECT SUM(price) FROM fruit WHERE name = ? GROUP BY is_sold\";\n    List<Long> salesAmounts = jdbcTemplate.query(sql, (rs, rowNum) -> rs.getLong(1), name);\n\n    Long salesAmount = salesAmounts.get(0);\n    Long notSaleAmount = salesAmounts.get(1);\n\n    return new FruitSalesResponse(salesAmount, notSaleAmount);\n}\n```\n\n처음부터 SUM, GROUP BY를 사용했다. 이외에는 이전과제와 강의에서 다루는 내용과 일치한다.\n\n## 마치며\n\n강의가 진행됨에 따라 컨트롤러의 역할이 증가하고 있다. 역할을 분리하는 리팩터링이 필요한 시간이다. 다음 강의와 과제가 기대된다.\n\n### 함께 자라기\n\n- [MySQL BOOLEAN by 당큰 테크 블로그](https://medium.com/daangn/mysql-boolean-%EC%BB%AC%EB%9F%BC-7abd9b35c664)\n- [SQL 가독성을 높이는 다섯 가지 사소한 습관](https://yozm.wishket.com/magazine/detail/1519/)\n- [Jackson by GitHub](https://github.com/FasterXML/jackson)\n"},{"excerpt":"3일 차는 익명 클래스(Anonymous Class)와 람다(Lambda)가 과제로 주어졌다. 둘은 함께 이야기되는 주제이다. 어떤 관계일까? 익명 클래스와 람다 익명 클래스로도 다양한 동작을 구현할 수 있었다. 하지만 Java SE 8에 등장한 람다는 복잡성을 줄이고 가독성을 높여 유지보수 하기 좋은 코드 작성을 위해 등장했다. 자세한 이론에 앞서 예제…","fields":{"slug":"/task-3-anonymous-class-and-lambda/"},"frontmatter":{"date":"May 01, 2024","title":"3. 익명 클래스와 람다","tags":["Java"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n```text \n[질문] \n\n1. 자바의 람다식은 왜 등장했을까?\n2. 람다식과 익명 클래스는 어떤 관계가 있을까? - 람다식의 문법은 어떻게 될까? \n\n```\n\n3일 차는 익명 클래스(Anonymous Class)와 람다(Lambda)가 과제로 주어졌다. 둘은 함께 이야기되는 주제이다. 어떤 관계일까?\n\n## 익명 클래스와 람다\n\n익명 클래스로도 다양한 동작을 구현할 수 있었다. 하지만 Java SE 8에 등장한 람다는 복잡성을 줄이고 가독성을 높여 유지보수 하기 좋은 코드 작성을 위해 등장했다.\n\n자세한 이론에 앞서 예제를 먼저 살펴보자.\n\n```java\n// 1. 익명 클래스로 구현한 아이템 가격 비교\nComparator<Item> byPrice = new Comparator<Item>() {\n    public int compare(Item boots, Item mobilityBoots) {\n        return boots.getPrice().compareTo(mobilityBoots.getPrice());\n    }\n};\n\n// 2. 람다로 구현한 아이템 가격 비교\nComparator<Item> byPrice = (Item boots, Item mobilityBoots) -> boots.getPrice().compreTo(mobilityBoots.getPrice());\n```\n\n예제코드는 리그오브레전드 아이템 가격을 비교하고 더 비싼 아이템 가격을 반환한다. 같은 결과를 반환하지만 람다를 사용했을 때 더욱 간결하게 작성된 점을 확인할 수 있다.\n\n### 익명 클래스\n\n익명 클래스는 일회성으로 사용되는 클래스를 정의할 때 사용한다. 클래스를 따로 정의하지 않고 객체를 생성하고 사용하는 방법이다. 인터페이스나 추상 클래스의 단일 메서드를 구현해야 할 때 사용한다.\n\n```text\nnew 생성자() { ... 구현 }\n```\n\n생성자 뒤에 중괄호가 나오고 `@Override`하여 구현한다.\n\n```java\n\n@Test\npublic void testAnonymousClass() {\n    // given\n    MathOperation add = new MathOperation() {\n        @Override\n        public int operate(int a, int b) {\n            return a + b;\n        }\n    };\n\n    // when\n    int result = add.operate(10, 5);\n\n    // then\n    assertThat(result).isEqualTo(15);\n}\n```\n\n### 람다\n\n람다는 명확하고 가독성 좋은 동작을 구현하기 위해 등장했다.\n\n앞서 익명 클래스로 살펴본 예제는 구현을 위해 자질구레한 코드가 많이 생겼다. 하지만 람다를 사용해서 간결하고 유연한 코드를 작성할 수 있다. 어떻게 작성할 수 있을까?\n\n```text\n(parameters) -> expression\n```\n\n람다의 기본문법은 파라미터, 화살표, 표현식으로 이뤄진다. 이외에도 다양한 형식을 지원한다.\n\n```java\n\n@Test\npublic void testSimpleLambda() {\n    // given\n    StringOperation operation = s -> s.toUpperCase();\n\n    // when\n    String result = operation.operate(\"java\");\n\n    // then\n    assertThat(result).isEqualTo(\"JAVA\");\n}\n\n@Test\n\npublic void testMultiStatementLambda() {\n    // given\n    StringOperation operation = s -> {\n        String result = s.toUpperCase();\n        return result + \"!\";\n    };\n\n    // when\n    String result = operation.operate(\"spring\");\n\n    // then\n    assertThat(result).isEqualTo(\"SPRING!\");\n}\n\n@Test\npublic void testLambdaWithMultipleParameters() {\n    // given\n    MathOperation operation = (a, b) -> a * b;\n\n    // when\n    int result = operation.operate(10, 5);\n\n    // then\n    assertThat(result).isEqualTo(50);\n}\n\n@Test\npublic void testLambdaWithNoParameters() {\n    // given\n    Greeting greeting = () -> \"Hello, World!\";\n\n    // when\n    String result = greeting.greet();\n\n    // then\n    assertThat(result).isEqualTo(\"Hello, World!\");\n}\n```\n\n이외에도 메서드 참조, 스트림(Stream)과 함께 사용된다.\n\n### 주의점\n\n우아하게 느껴지지만 람다를 사용할 때 주의할 점이 있다.\n\n> [책 <이펙티브 자바> by 조슈아 블로크](https://product.kyobobook.co.kr/detail/S000001033066)\n\n**1. 람다는 이름이 없다. 따라서 문서화할 수 없다.**\n\n간결한 코드와 의도를 명확히 드러날 때 강점을 가지지만, 명확하게 설명할 수 없을 때, 코드가 길어지면 다시 한번 검토해야 한다.\n\n**2. 함수형 인터페이스(추상 메서드가 1개)에서만 쓰인다.**\n\n추상 클래스를 인스턴스로 만들거나, 추상 메서드가 여러 개라면 익명 클래스를 사용한다.\n\n**3. 람다의 this는 바깥 인스턴스를 가리킨다.**\n\n자신을 참조해야 한다면 익명 클래스를 사용한다.\n\n## 마치며\n\n익명 클래스와 람다의 관계, 람다식의 등장배경과 사용방법에 대해 짧게 알아봤다. 어떤 기술의 등장은 결국 이전 문제를 해결하기 위해서(복잡성과 가독성) 등장했다를 몸소 느낄 수 있는 주제였고 다양한 생각이 들었다.\n\n**1. 다른 프로그래밍언어에서 배우기**\n\n다른 프로그래밍 언어와의 연관관계를 느낄 수 있었다. 이전에 람다를 처음 사용했을 때 공감 되지 않고 어려운 문법 중 하나라고 생각했다. 머리로는 이해해도 가슴으로 이해하지 못했다.\n\nJavaScript를 배울 때 화살표 함수(Arrow function)를 배웠다. 화살표 함수를 밥먹듯이 사용했다. 스터디에 참가하고 다시 Java & Spring 조합을 사용할 기회가 주어졌다. 이전에 봤던 람다는\n어색하고 어렵게만 느껴지는 존재였다. 하지만 이제는 가볍고 하나의 문제를 해결하는 하나의 방법이라고 느껴진다.\n\nJavaScript에서 강조하는 일급 함수(First-class Function)도 공감되지 않았었다. (대단한 건가?) 그런데 Java가 어떤 식으로 함수형 프로그래밍을 지원하기 위해 기능을 추가했는지 과정을\n살펴보니\n반복해서 강조하는 이유를 알 것 같다.\n\n학습을 꾸준히 하지 않았다면 극복하지 못했을 것이다.\n\n**2. 배경지식**\n\n![GhatGPT3 - 익명 클래스와 람다](./images/chatgpt-about-lambda.png)\n\n기술을 배울 때 어려움을 느낀다. 다양한 이유 중 배경지식의 부제를 이야기하려 한다. 책 또는 인터넷 강의자료는 최대한 간결하게, 쉽게 개념을 전달한다. 이해가 바로 되면 가장 좋지만 **이해가 잘 가지 않을 땐\n이전에 어떤 문제가 있었는지 여러 방법을 검토해 살펴보는 자세가 중요하다고 느꼈다.**\n\n새로운 기술은 궁극적으로 유지보수성하기 좋고 간단하게 사용할 수 있도록 등장하는 것을 지켜봤다. 이해를 돕기 위해서는 과거 선배 개발자는 어떤 식으로 문제를 해결했는지 살펴보자. 유연한 사고가 중요하다.\n\n과거의 나와 승부에서 이긴듯한 즐거운 기분을 느끼며 과제를 마친다.\n\n> 추가 예제는 [GitHub](https://zrr.kr/kV9d)에 있다.\n\n### 함께 자라기\n\n- [책 <모던 자바 인 액션>](https://product.kyobobook.co.kr/detail/S000001810171): 람다, 스트림, 함수형 프로그래밍 방법을 밀도있게 설명\n- [Baeldung [Lambda Expressions and Functional Interfaces: Tips and Best Practices]](https://www.baeldung.com/java-8-lambda-expressions-tips)\n"},{"excerpt":"봄은 즐길 틈도 남기지 않고 떠났다. 더위 가득한 4월이 찾아왔다. 3월의 아쉬움을 기억한다. 견고하지 않은 시스템을 되돌아보는 한 달이었다. 아쉬움이 4월에도 이어졌다.\n푹 잠들지 못하고 고민이 잦았다. 의심되는 문제점이 있었지만 정작 실행하지 못했다. 호흡을 되찾는데 집중했다. 조금만 방심하면 난이도가 기하급수적으로 증가했다. 문제를 정의하고 최대한 …","fields":{"slug":"/retrospective-20240430/"},"frontmatter":{"date":"April 30, 2024","title":"2024 월간 장태근 4월호 '기댈곳'","tags":["회고"]},"rawMarkdownBody":"\n봄은 즐길 틈도 남기지 않고 떠났다. 더위 가득한 4월이 찾아왔다.\n\n3월의 아쉬움을 기억한다. 견고하지 않은 시스템을 되돌아보는 한 달이었다. 아쉬움이 4월에도 이어졌다.\n푹 잠들지 못하고 고민이 잦았다. 의심되는 문제점이 있었지만 정작 실행하지 못했다.\n\n호흡을 되찾는데 집중했다. 조금만 방심하면 난이도가 기하급수적으로 증가했다. 문제를 정의하고 최대한 잘게 쪼갰다. 위닝 멘탈리티가 필요했다.\n과정을 반복하니 문제를 인식할 여유도 없었다. 주어진 일을 해낸다는 한 가지 생각밖에 없었다. 이외에도 다양한 시도를 했다. 어떤 시도를 했는지 알아보자.\n\n## 화성에서 온 Node.js 개발자\n\n의문점이 많았다. 대표적으로 테스트 코드 작성과 아키텍처다. 입맛에 맞는 자료를 찾을 수 없었다. 자연스럽게 이전에 사용했던 Spring 자료들을 검토했다. 결국 **해결하려고 하는 문제는 다르지 않다**는 결론을\n내렸다.\n\nJava & Spring 조합과 TypeScript & NestJS 조합이 상호작용 됐다. (A를 사용하면 B가 사랑스럽게 느껴지고, B를 사용하면 A가 사랑스러웠다.)\n\n### 인프런 워밍업 클럽 - 스터디 1기\n\n![인프런 워밍업 클럽 - 스터디 1기](images/inflearn-warmup-club-study.png)\n\n때 마침 [인프런 워밍업 클럽 - 스터디 1기](https://www.inflearn.com/course/inflearn-warmup-club-study-1)가 열렸다. 이전에도 다른 기회가 찾아왔었다. 찾아온\n기회도 Spring 학습이었고 의도와 다르게 흘러가지 않을까 고민하다 끝내 포기했다. 하지만 포기하고 기간이 지나니 아쉬웠다. 결정적으로 좋으나 싫으나 학습을 하다 보면 자연스럽게 Spring\n자료를 접했다. 이왕 공부하는 거 함께 공부하자 생각해서 오랜만에 스터디 참여를 결정했다. 이제 시작한 지 이틀이 지났다. 초반이라 그런지 정적이 감돈다. 아직 함께 자라는 느낌은 크게 느낄 수 없다. 일주일이\n지나고\n나면 더 많이 이야기할 수 있을 것 같다.\n\n그럼에도 불구하고 벌써부터 스터디 운영의 노고를 느낄 수 있다. 인프런 관계자분들과 스터디 운영진 분들께서 빠른 피드백에 힘써주시는 모습에 감사함을 느낀다. (누구보다 적극적으로 참여 중이다)\n\n5월에 스터디가 종료된다. **다양한 관점으로 문제 바라보기, 문제해결 능력도 물론 중요하지만 함께 자라는 느낌을 기대한다.**\n\n## 운동\n\n![나이키 런 클럽(NRC)](images/nrc-app.jpg)\n\n운동을 많이 쉬었던 걸로 기억하는데 의외로 3번밖에 쉬지 않았다. 매일 하지 못해서 아쉽다. 매번 느끼지만 운동이 없었으면 소리소문 없이 사라지지 않았을까 싶다. 기분 탓인지는 몰라도 허리도 많이 좋아진 것 같다.\n원래\n오래 앉아있지 못했는데 이제 장시간도 앉아있는다. 운동 역시 꾸준히 해야겠다.\n\n## 마치며\n\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/xMZMwFUscDc?si=yECRYXa4MtcaJBrb\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n끝으로 한 달 동안 이 노래를 가장 많이 들었다. 친한 형이 이야기를 풀어내는 듯한 덤덤한 발성에 위로를 받았다. 이제는 어떻게 흘러갈지 예상이 되지 않는다. 그저 현재를 즐기며 살아야지. 할 일을 다하고 하늘의\n뜻을 기다리자.\n"},{"excerpt":"2일 차는 첫 HTTP API 개발을 주제로 간단한 API를 만들었다. 배운 건 써봐야지. 먼저 과제의 요구사항을 검토하고 구현해 보자. 모든 코드는 GitHub에서 확인할 수 있습니다. 문제 1 두 수를 입력하면 덧셈, 뺄셈, 곱셈결과를 반환한다. 기본 정보 메서드 URL GET /api/v1/calc 요청 쿼리 파라미터 이름 타입 설명 필수 num1 …","fields":{"slug":"/task-2-hands-on-rest-api/"},"frontmatter":{"date":"April 30, 2024","title":"2. API 실습","tags":["Spring"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n2일 차는 첫 HTTP API 개발을 주제로 간단한 API를 만들었다. 배운 건 써봐야지. 먼저 과제의 요구사항을 검토하고 구현해 보자.\n\n> 모든 코드는 [GitHub](https://github.com/devmeeple/inflearn-warmup-club-study/tree/feature/week-1)에서 확인할 수 있습니다.\n\n## 문제 1\n\n두 수를 입력하면 덧셈, 뺄셈, 곱셈결과를 반환한다.\n\n**기본 정보**\n\n| 메서드 | URL          |\n|-----|--------------|\n| GET | /api/v1/calc |\n\n### 요청\n\n**쿼리 파라미터**\n\n| 이름   | 타입  | 설명      | 필수 |\n|------|-----|---------|----|\n| num1 | int | 첫 번째 숫자 | O  |\n| num2 | int | 두 번째 숫자 | O  |    |\n\n### 예제\n\n**요청**\n\n```shell\nhttp :8080/api/v1/calc\\?num1\\=10\\&num2\\=5\n```\n\n**응답: 성공**\n\n```json\n{\n  \"add\": 15,\n  \"minus\": 5,\n  \"multiply\": 50\n}\n```\n\n### 해결\n\n문제를 살펴보면 요청은 `/api/v1/{필요 API}`와 같고, 응답은 `JSON`형식임을 알 수 있다.\n\n```java\n\n@RestController\n@RequestMapping(\"/api/v1\")\npublic class TaskController {\n}\n```\n\n따라서 위와 같이 선언할 수 있다. 이어서 응답과 요청에 맞는 객체를 선언한다.\n\n- TaskCalcRequest\n- TaskCalcResponse\n\n```java\n\n@GetMapping(\"/calc\")\npublic TaskCalcResponse calcTwoNumbers(TaskCalcRequest request) {\n    return new TaskCalcResponse(\n            request.getNum1() + request.getNum2(),\n            request.getNum1() - request.getNum2(),\n            request.getNum1() * request.getNum2()\n    );\n}\n```\n\n객체를 선언하고 최종완성된 코드는 위와 같다.\n\n> 응답객체의 덧셈, 뺄셈, 곱셈 계산을 다른 객체에 위임했다면 가독성이 더 좋을 것 같다. 하지만 아직 웹 계층만을 다루고 차후 리팩터링 예정으로 확인되어 레이어를 분리하지 않았다.\n>\n> 레이어 개념을 학습하면 리팩터링 필요한 코드다.\n\n작성된 코드의 결과를 확인해 보자.\n\n![[문제 1] 덧셈, 뺄셈, 곱셈결과 반환](images/calc.png)\n\n## 문제 2\n\n날짜를 입력하면, 어떤 요일인지 반환한다.\n\n**기본 정보**\n\n| 메서드 | URL                 |\n|-----|---------------------|\n| GET | /api/v1/day-of-week |\n\n### 요청\n\n**쿼리 파라미터**\n\n| 이름          | 타입     | 설명                         | 필수 |\n|-------------|--------|----------------------------|----|\n| day-of-week | String | ISO 8601(YYYY-MM-DD)으로 변환됨 | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp :8080/api/v1/day-of-the-week\\?date\\=2023-01-01\n```\n\n**응답: 성공**\n\n```json\n{\n  \"dayOfTheWeek\": \"SUN\"\n}\n```\n\n### 해결\n\n문제를 해결하는 과정은 문제 1과 유사하다. 하지만 이번엔 응답객체만 선언했다.\n\n- TaskDayOfTheWeekResponse\n\n```java\n\n@GetMapping(\"/day-of-the-week\")\npublic TaskDayOfTheWeekResponse findDayOfTheWeek(@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {\n    return new TaskDayOfTheWeekResponse(date.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.US).toUpperCase());\n}\n```\n\n문제해결의 열쇠는 `LocalDate` 객체 다루 기다. Java SE8에 도입된 LocalDate는 정말 많이 사용하는 객체다. 사용법이 익숙하지 않다면 꼭 짚고 넘어가야 한다.\n\n> LocalDate 타입으로 변환되기 위해서\n>\n> @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)를 선언해야 한다.\n\n![[문제 2] 어떤 요일인지 반환](images/day-of-the-week.png)\n\n## 문제 3\n\n여러 수를 입력받아 총합을 반환한다.\n\n**기본 정보**\n\n| 메서드  | URL         |\n|------|-------------|\n| POST | /api/v1/sum |\n\n### 요청\n\n**본문**\n\n| 이름      | 타입            | 설명    | 필수 |\n|---------|---------------|-------|----|\n| numbers | List<Integer> | 숫자 배열 | O  |\n\n### 예제\n\n**요청**\n\n```shell\nhttp POST :8080/api/v1/sum\n```\n\n**응답: 성공**\n\n```text\n15\n```\n\n### 해결\n\n![[문제 3] 수의 총합 반환](images/sum.png)\n\n```java\n\n@PostMapping(\"/sum\")\npublic Integer sumNumbers(@RequestBody TaskSumNumbersRequest request) {\n    return request.getNumbers().stream().mapToInt(Integer::valueOf).sum();\n}\n```\n\n람다를 사용하여 값을 반환했다. 람다 외에도 `for`문과 같은 일반적인 루프도 문제를 해결할 수도 있다. 하지만 다음과제가 람다식인것을 참고하여 미리 적용했다. 자세한 내용은 다음과제에 살펴보자.\n\n## 마치며\n\n요구사항 외에도 람다와 테스트코드를 학습했다. 아직 레이어가 분리되지 않아서 그런지 간단하게 작성됐다. 코드를 리팩터링 하고 레이어가 분리되면 어떤 식으로 작성해야 할지 추가학습이 필요하다.\n\n코드를 미리 준비했음에도 불구하고 정리하는데 꽤 오랜 시간이 소요됐다. 일상으로 돌아가 글을 어떤 순서로 작성하면 좋을지 한번 더 생각해 보자.\n\n### 함께 자라기\n\n- [Java의 날짜와 시간 API](https://d2.naver.com/helloworld/645609)\n- [Testing the Web Layer](https://spring.io/guides/gs/testing-web)\n\n"},{"excerpt":"드디어 스터디가 시작됐다. 첫 번째 과제는 자바 어노테이션(Java Annotation)에 대해 알아보는 질문 & 답변 시간이다. 어노테이션의 어떤 점이 중요해서 첫 번째 과제로 선정됐을까? 질문에 답하기 이전에 어노테이션이 무엇인지 먼저 알아보자. 어노테이션이란? 어노테이션은 Java SE 5에 등장했다. 출시된 지 무려 20년을 앞둔 기능이다. (참고…","fields":{"slug":"/task-1-java-annotation/"},"frontmatter":{"date":"April 29, 2024","title":"1. 자바 어노테이션","tags":["Java"]},"rawMarkdownBody":"\n![인프런 워밍업 클럽 - 스터디 1기](../images/inflearn-warmup-club-study.png)\n\n드디어 스터디가 시작됐다. 첫 번째 과제는 자바 어노테이션(Java Annotation)에 대해 알아보는 질문 & 답변 시간이다. 어노테이션의 어떤 점이 중요해서 첫 번째 과제로 선정됐을까?\n\n```text \n💡 [질문] \n\n1. 어노테이션을 사용하는 이유(효과)는 무엇일까? \n2. 나만의 어노테이션을 어떻게 만들 수 있을까? \n\n``` \n\n질문에 답하기 이전에 어노테이션이 무엇인지 먼저 알아보자.\n\n## 어노테이션이란?\n\n어노테이션은 Java SE 5에 등장했다. 출시된 지 무려 20년을 앞둔 기능이다. (참고로 Generic, Enum도 이때 등장했다)\n\n어노테이션이 도입되기 전에는 메타데이터(코드에 대한 부가 정보)를 자바코드에 직접 작성할 수 없었다. 메타데이터를 표현하기 위해서는 별도의 파일이나 외부 도구를 통해 관리했다. 예를 들어,\n메서드가 상위 클래스의 메서드를 오버라이드하고 있다는 사실을 표현하려면 주석을 달거나 문서화해야 했다.\n\n```java \npublic class Ezreal extends Champion {\n    // 오버라이드 된 메서드 \n    public void attack() {\n        // 상위 클래스의 메서드를 오버라이드 한다는 사실을 알려주는 방법이 없다. \n    }\n} \n``` \n\n이런 식으로 `attack()`메서드는 오버라이드가 된 메서드임을 나타냈다. 어노테이션을 적극적으로 사용하는 현재, 다음과 같이 작성된 코드는 어딘가 부자연스럽다. 유지보수 시 주석이 누락되거나 잘못 작성되었다면\n어땠을까?\n\n```java \npublic class Ezreal extends Champion {\n    @Override\n    public void attack() {\n        // @Override 어노테이션으로 오버라이드 사실을 명시 \n    }\n} \n``` \n\n반면 어노테이션이 새롭게 도입되면서 메타데이터를 자바코드 내에 직접 포함할 수 있게 됐다. 이를 통해 코드의 가독성과 유지 보수성이 향상됐다.\n\n현재 우리는 어노테이션을 흔하게 접할 수 있다. 예를 들어 자주 사용하는 라이브러리, 프레임워크에서 접할 수 있다.\n\n- [Lombok 라이브러리](https://projectlombok.org/)\n\n```java \n\n@Getter\n@Setter\npublic class User {\n    private String name;\n    private String age;\n} \n``` \n\n- [Spring 프레임워크](https://docs.spring.io/spring-framework/reference/index.html)\n\n```java \n\n@Service\npublic class UserService {\n    //... \n} \n``` \n\n- [JUnit 테스트 프레임워크](https://junit.org/junit5/)\n\n```java \npublic class UserTest {\n\n    @Test\n    public void testCreateUser() {\n        // 테스트 코드 \n    }\n} \n``` \n\n이렇게 어노테이션은 다양한 라이브러리와 프레임워크에서 이미 활용되고 있다.\n\n### 커스텀 어노테이션(나만의 어노테이션)\n\n어노테이션을 만들려면 어떻게 해야 할까? `@interface` 문법을 사용하여 사용자 정의 어노테이션을 만들 수 있다.\n\n```java \n\n@Target(ElementType.TYPE) // 클래스에만 적용 가능 \n@Retention(RetentionPolicy.RUNTIME) // 런타임까지 유지 \npublic @interface Book {\n    String title();\n\n    String author();\n} \n``` \n\n어노테이션에 포함될 요소와 데이터 유형을 지정하고, 메타데이터(@Retention, @Target 등)를 지정한다. 이렇게 어노테이션을 정의하고 사용할 수 있다.\n\n### 주의점\n\n어노테이션의 강력한 기능을 알아봤다. 하지만 과도하게 사용하면 오히려 역효과가 날 수 있다.\n\n1. 가독성저하: 코드가 복잡해져 가독성이 떨어질 수 있다.\n2. 의존성증가: 특정 어노테이션에 의존하게 되면 라이브러리, 프레임워크의 버전이 업그레이드 시 이슈가 발생할 수 있다.\n3. 성능저하: 어노테이션 처리를 위해 리플렉션을 사용하는 경우, 성능 저하가 발생할 수 있다.\n\n## 마치며\n\n앞서 어노테이션에 대해 알아봤다. 이제 질문에 답할 시간이다.\n\n개발자들은 흔히 좋은 코드, 나쁜 코드에 대해 이야기한다. 절대적인 정답은 없지만 나쁜 코드에 대해 이야기할 때 **같은 코드의 반복**을 이야기하곤 한다.\n코드의 반복을 줄이는 여러 방법 중 어노테이션도 하나의 방법이다. 이는 코드의 가독성과 유지보수성을 향상한다. 또한 컴파일러나 개발 도구에 특정 정보를 제공하여 추가 기능을 활용할 수 있다. (리플렉션을 통한\n메타데이터 접근)\n\n> 물론 자바 본질에서 벗어날 수 있는 위기도 있다. 예를 들어 애노테이션(코드에 주석처럼 달아 특수한 의미를 부여하는 기술)의 범람이 대표적이다. 애노테이션은 코드를 적게 작성하고, 더 빠르게 앱을 개발할 수\n> 있다는 점에서 장점이 있었다.\n> 그러나 애노테이션은 한계가 있었다. 컴파일러에 의해 검증이 불가능하고 상속 확장 규칙의 표준이 없었다. 이해하기 어렵고 오해하기 쉬운 코드가 생산될 수 있으며, 테스트 및 커스터마이징이 어려웠다. 자바의 본질과\n> 멀어졌다.\n>\n> 📝 기사 | 인터뷰 <[자바가 죽었다구요? 천만의 말씀](https://byline.network/2017/08/31-3/)> by 토비(이일민)\n\n- 은빛 총알은 없다\n\n> No Silver Bullet – Essence and Accident in Software Engineering\n>\n> 📝\n> 논문 <[No Silver Bullet — Essence and Accident in Software Engineering](https://ko.wikipedia.org/wiki/%EC%9D%80%EB%B9%9B_%EC%B4%9D%EC%95%8C%EC%9D%80_%EC%97%86%EB%8B%A4)>\n> by Fred Brooks\n\n그렇다면 어노테이션은 모든 문제를 해결할 수 있을까? 그렇지 않다. 어노테이션 역시 장단점이 있으므로, 상황에 따라 적절하게 사용해야 한다. 프로젝트의 요구사항이 맞는지, 복잡성을 고려하여 사용여부를 결정해야 한다.\n어노테이션은 강력한 도구지만 은빛 총알은 아니라는 점을 명심해야 한다.\n\n추가로 나만의 커스텀 어노테이션을 직접 만들지 않아도 이미 대부분의 기능이 각 라이브러리, 프레임워크에서 제공 중이다. 따라서 검색과 공식문서를 통해 해결할 수 있는 방법이 없는지 먼저 확인하자.\n\n### 함께 자라기\n\n- [인프런 질문 & 답변 어노테이션 by 김영한님](https://www.inflearn.com/questions/91272/comment/78583)\n- [Don't repeat yourself(DRY)](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n- [Baeldung Creating a Custom Annotation in Java](https://www.baeldung.com/java-custom-annotation)\n- [Oracle The Java Tutorials](https://docs.oracle.com/javase/tutorial/java/annotations/)\n"},{"excerpt":"커밋을 작성할 때 수정한 파일을 제대로 확인하지 않았다. 여러 파일을 동시에 수정하거나 한 번에 커밋을 올리는 습관을 이어나가다 결국 중요한 파일을 빼고 커밋했다. 어떻게 문제를 해결할 수\n있을까? 이전 커밋을 이야기할 때 흔히 마주하던 상황은 두 가지이다. 최근커밋 과거특정커밋 문제를 해결하기 위해서는 HEAD 위치를 이동해야 한다. 1. 최근커밋 가장…","fields":{"slug":"/changing-a-commit-message/"},"frontmatter":{"date":"April 27, 2024","title":"Git 이전커밋 메시지 수정하기","tags":["Git"]},"rawMarkdownBody":"\n커밋을 작성할 때 수정한 파일을 제대로 확인하지 않았다. 여러 파일을 동시에 수정하거나 한 번에 커밋을 올리는 습관을 이어나가다 **결국 중요한 파일을 빼고 커밋했다.** 어떻게 문제를 해결할 수\n있을까?\n\n이전 커밋을 이야기할 때 흔히 마주하던 상황은 두 가지이다.\n\n1. 최근커밋\n2. 과거특정커밋\n\n문제를 해결하기 위해서는 HEAD 위치를 이동해야 한다.\n\n## 1. 최근커밋\n\n```shell \ngit commit --amend \n``` \n\n가장 긍정적이고 쉽게 해결할 수 있는 방법이다. 최근커밋의 경우 이미 HEAD가 마지막 커밋을 가리키고 있기 때문에 `--amend` 옵션으로 파일을 추가하거나, 커밋 메시지를 수정하면 된다.\n\n## 2. 과거특정커밋\n\n최근커밋에 비해서 골치 아프지만 반복하면 쉽게 해결할 수 있다. 먼저 수정하고 싶은 커밋을 알아보자.\n\n```shell \ngit log \n```\n\n![과거특정커밋 수정하기 시나리오](./images/setup-rebase.png)\n\n`git log` 명령을 실행해서 커밋내역을 확인한다. 예를 들어 **수정하고 싶은 커밋이 0eb0d7**로 시작하는 커밋일 때 HEAD를 바로 **직전커밋인 230339로 이동**해야 한다.\n\n```shell\ngit rebase -i 230339 #<직전커밋>\n```\n\n직전커밋 로그로 이동하고 **pick으로 표시되는 해쉬값을 edit으로 수정한다.** 에디터로 작업을 마치면 해결하고 싶던 파일을 작성하고 추가하면 된다.\n\n![과거특정커밋 수정하기 완료](./images/rebase-continue.png)\n\n전체과정은 다음과 같다. 개발도구로 파일을 추가한 후 커밋 메시지를 수정했다.\n\n## 마치며\n\n흔히 마주하던 2가지 상황을 알아봤다. 커밋을 최소한의 단위로 잘 나눠야 된다고 한번 더 느꼈다. 분기를 잘 나눠야 충돌과 같은 다른 문제가 발생했을 때도 쉽게 해결할 수 있다. \n\n> 만약 협업을 진행 중이고 이미 원격저장소에 올린 상황이라면 추가 작업이 필요하다.\n"},{"excerpt":"코드컨벤션을 지키면서 어떻게 프로그래밍할 수 있을까? IntelliJ에서 코드 컨벤션을 적용하는 방법을 알아보자. 준비하기  먼저 저장소에서 설정에 필요한 파일을 다운로드 해야한다. Formatter  다운로드한  를 import 한다. 스키마의 이름을 설정한다. 다양한 컨벤션을 적용하는 상황에는 유의미한 이름을 권장한다. 자동 적용하기 자동으로 컨벤션이…","fields":{"slug":"/intellij-code-convention/"},"frontmatter":{"date":"April 27, 2024","title":"IntelliJ Code convention 적용하기","tags":["IDE"]},"rawMarkdownBody":"\n코드컨벤션을 지키면서 어떻게 프로그래밍할 수 있을까? IntelliJ에서 코드 컨벤션을 적용하는 방법을 알아보자.\n\n## 준비하기\n\n![준비물](./images/get-reddy.png)\n\n먼저 [저장소](https://github.com/naver/hackday-conventions-java/tree/master/rule-config)에서 설정에 필요한 파일을 다운로드 해야한다.\n\n## Formatter\n\n![Editor | Code Style | Java](./images/naver-convention.png)\n\n1. 다운로드한 `naver-intellij-formatter.xml` 를 import 한다.\n2. 스키마의 이름을 설정한다. 다양한 컨벤션을 적용하는 상황에는 유의미한 이름을 권장한다.\n\n### 자동 적용하기\n\n자동으로 컨벤션이 적용될 수 있도록 추가설정을 해보자.\n\n![Tools | Action on Save](./images/action-on-save.png)\n\n> - Reformat code: 자동으로 포맷 적용\n> - Optimize imports: 사용하지 않는 import 제거\n\n설정이 적용되지 않았다면 IDE 재시작이 필요하다.\n\n## CheckStyle\n\n![Plugins | Marketplace | CheckStyle-IDEA](./images/checkstyle-idea.png)\n\n컨벤션을 준수하여 코드를 작성했는지 확인하고 싶지 않나요? 정적 코드 분석도구를 설치해 보자.\n\n![CheckStyle 설정하기 1](images/checkstyle-setting.png)\n\n1. CheckStyle-IDEA 플러그인을 설치하고 재시작하자.\n2. 이미지와 같이 Scope와 Treat Checkstyle errors as warnings를 설정해야 한다. 표기되는 version은 다를 수 있지만 8.24 이상의 버전을 선택해야 한다.\n\n![CheckStyle 설정하기 2](./images/checkstyle-setting-2.png)\n\n3. 다운로드한 `naver-checkstyle-rules.xml`을 Browse 한다.\n\n![CheckStyle 설정하기 3](images/checkstyle-setting-3.png)\n\n4. 예외 정책을 지정한다면 변숫값 `naver-checkstyle-suppressions.xml`를 지정한다.\n\n![CheckStyle 설정하기 4](./images/checkstyle-setting-4.png)\n\n5. 규칙을 사용하도록 꼭 체크해 주세요.\n\n![설정완료](./images/checkstyle-finish.png)\n\n6. 설정을 완료하면 아래 CheckStyle이 표시된다.\n\n## 마치며\n\n추가설정이나 상세 설정은 공식문서를 참고하자.\n\n### 함께 자라기\n\n- [캠퍼스 핵데이 Java 코딩 컨벤션](https://naver.github.io/hackday-conventions-java/)\n- [Code convention과 개발자가 지켜야할 수칙에 관하여](https://novemberde.github.io/post/2017/05/21/Javascript_policy/)\n- [정적 분석(Static Analysis)이란?](https://hudi.blog/static-analysis/)\n"},{"excerpt":"프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자. SELECT SELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수…","fields":{"slug":"/sql-first-step-2/"},"frontmatter":{"date":"April 18, 2024","title":"[SQL 첫걸음] 2장. 테이블에서 데이터 검색","tags":["Database"]},"rawMarkdownBody":"\n```sql\nSELECT * FROM 테이블명;\n```\n\n프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자.\n\n## SELECT\n\nSELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수 있다.\n\n예를 들어 다음 쿼리의 경우 SELECT 구, FROM 구를 가진다.\n\n```sql\nSELECT * FROM blog;\n```\n\nSELECT 명령은 여러 구로 구성된다. 명령을 작성할 때는 예약어는 대문자로, 객체명은 소문자로 작성하는 방법이 가독성에 좋다.\n\n### 값이 없는 데이터 = NULL\n\nNULL은 값이 저장되지 않은 상태를 의미한다. **NULL을 이해하는 것은 SQL에서 중요하다.**\n\n## 테이블 구조 참조하기\n\n```sql\nDESC 테이블명;\n```\n\n테이블의 구조를 참조할 때 `DESC` 명령을 사용한다.\n\n## 검색 조건 지정하기\n\n```sql\nSELECT 열1, 열2 FROM 테이블명 WHERE 조건식;\n```\n\n조건을 지정하여 데이터를 조회할 때 `WHERE`구를 사용한다. 조건식에 일치하는 행이 전혀 없을 경우 아무것도 반환하지 않는다.\n\n- WHERE 구로 행을, SELECT 구로 열을 선택한다.\n\n앞서 별표를 사용하여 전체열을 지정했다. 특정열을 지정할 때는 열명을 지정한다.\n\n### NULL값 검색\n\n```sql\nSELECT 열 FROM 테이블명 WHERE 열 IS NULL; \n```\n\n조건식을 작성할 때 `=`, `<>`와 같은 비교 연산자를 사용했다. 하지만 NULL 값을 다룰 때는 주의가 필요하다. NULL 값을 조회할 때는 `IS NULL`을 사용한다.\n\n## 조건 조합하기\n\n논리 연산자 `AND`, `OR`, `NOT`를 사용해서 복잡한 조건 조합이 가능하다.\n\n### AND로 조합하기\n\n```sql \n조건식1 AND 조건식2 \n``` \n\n`AND`는 여러 조건을 만족해야 한다. 집합으로 표현하면 '교집합'이다.\n\n### OR로 조합하기 \n\n```sql\n조건식1 OR 조건식2\n```\n\n`OR`은 어느 쪽이든 조건을 만족하는 행을 모두 검색한다. 집합으로 표현하면 '합집합'이다.\n\n### 연산자의 우선 순위\n\n`AND`는 `OR`에 비해 우선순위가 높다. 원하는 결과를 조회하기 위해서는 괄호를 사용한다.\n\n### NOT으로 조합\n\n```sql\nNOT 조건식\n```\n\n조건식의 반대 값을 반환한다.\n\n## 패턴 매칭에 의한 검색\n\n`LIKE` 술어는 문자열의 일부분을 비교하는 '부분 검색'을 할 수 있다. 특정 문자나 문자열을 조회하는 방법을 '패턴매칭' 또는 '부분검색'이라 한다.\n\n### LIKE로 패턴 매칭하기\n\n```sql\n열명 LIKE '패턴'\n```\n\n패턴을 정의할 때는 메타문자(와일드카드)를 사용한다. 메타문자는 다음과 같다.\n\n- 퍼센트(%): 임의의 문자열\n- 언더스코어(_): 임의의 문자 하나\n- 와일드카드로 자주 쓰이는 `*`는 LIKE에서 사용할 수 없다. \n\n```sql\nWHERE 열명 LIKE '%\\%%'\n```\n\n메타문자 자체를 검색할 때는 '이스케이프' 문자 `역슬래시(\\)`를 사용한다. 간단한 패턴 매칭은 LIKE로 충분하지만 복잡한 패턴을 매칭하는 경우 `정규 표현식(Regular Expression)`을\n사용한다. 정규표현식에서 더 많은 메타문자를 사용해서 폭넓게 패턴을 지정할 수 있다.\n"},{"excerpt":"데이터베이스와 SQL 데이터베이스 데이터베이스란 데이터의 집합이다. 흔히 데이터를 조회할 때 정리된 시스템을 의미한다. 데이터를 영구보존하기 위해\n데이터 베이스가 탄생했다. 개인용 컴퓨터, 휴대용 기기, 웹, 계산대(POS)등 다양한 시스템에서 사용된다. 데이터베이스는 흔히 라는 약자로 통용된다. 앞서 말했듯이 데이터베이스는 데이터의 집합이다. 이를 효율…","fields":{"slug":"/sql-first-step-1/"},"frontmatter":{"date":"April 16, 2024","title":"[SQL 첫걸음] 1장. 데이터베이스와 SQL","tags":["Database"]},"rawMarkdownBody":"\n## 데이터베이스와 SQL\n\n### 데이터베이스\n\n데이터베이스란 데이터의 집합이다. 흔히 데이터를 조회할 때 정리된 시스템을 의미한다. 데이터를 영구보존하기 위해\n데이터 베이스가 탄생했다. 개인용 컴퓨터, 휴대용 기기, 웹, 계산대(POS)등 다양한 시스템에서 사용된다.\n\n데이터베이스는 흔히 `DB`라는 약자로 통용된다. 앞서 말했듯이 데이터베이스는 데이터의 집합이다. 이를 효율적으로 관리하는\n소프트웨어를 `DBMS(Database Management System)`라 부른다.\n\n그렇다면 `DBMS`를 어떻게 사용할 수 있을까? 컴퓨터와 대화하기 위해 프로그래밍 언어를 사용하듯이 `DBMS`와 대화를 위해 사용하는\n언어가 `SQL`이다.\n\n물론 모든 `DBMS`와 대화할 때 `SQL`을 사용하지 않는다. `SQL`은 `관계형 데이터베이스 관리 시스템(RDBMS: Relational Database Management\nSystem)`을 조작할 때 사용한다.\n\n### SQL\n\n`SQL` 명령어는 3가지로 나눌 수 있다.\n\n- DML(Data Manipulation Language)\n- 기본이 되는 명령어. 데이터를 추가, 삭제, 갱신, 조작할 때 사용\n- DDL(Data Definition Language)\n- 데이터를 정의하는 명령어. 객체를 만들거나 삭제할 때 사용\n- DCL(Data Control Language)\n- 데이터를 제어하는 명령어. 트랜잭션을 제어하거나 접근권한을 제어할 때 사용\n\n### 다양한 데이터베이스\n\n`DBMS`는 여러 환경에서 사용할 수 있도록 종류가 다양하다. 이때 `SQL`로 데이터를 다루는 데이터베이스를 `관계형 데이터베이스(RDB: Relational Database)`라 부른다.\n\n- SQL 방언과 표준화\n- 다양한 데이터베이스 제품이 있어서 비슷한 조작을 하더라도 서로 다른 명령어가 필요하다. 이를 특정 제품에만 통용되는 고유 방언이라 한다. 예를 들어 키워드 생략, JOIN 등이 있다.\n- 한국어도 여러 방언과 표준어가 있듯이 `SQL`에도 표준 SQL이 존재한다.\n"},{"excerpt":"이력서 이력서 초안을 작성하며 마무리하는 능력이 부족하다고 느꼈다. 강점, 경쟁력은 무엇일까라는 질문에 꾸준함이라고 항상 생각했다. 하지만 냉정하게 돌아보니 마무리한 프로젝트가 없었다. 마침표를 찍지 않고 다음으로 넘어가는 사람이라고 느껴졌다.\n스스로 생각하던 방향성과는 다르게 흘러갔다. 시스템 최근 더 시스템을 읽고 있다. 물음표가 생기는 내용도 있었지…","fields":{"slug":"/retrospective-20240331/"},"frontmatter":{"date":"March 31, 2024","title":"2024 월간 장태근 3월호 'NO PAIN'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/JaIMSzE5yLA?si=uVw70SzPt2DiKpMC\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n### 이력서\n\n이력서 초안을 작성하며 **마무리하는 능력이 부족하다고 느꼈다.**\n\n강점, 경쟁력은 무엇일까라는 질문에 **꾸준함이라고 항상 생각했다.** 하지만 냉정하게 돌아보니 마무리한 프로젝트가 없었다. 마침표를 찍지 않고 다음으로 넘어가는 사람이라고 느껴졌다.\n스스로 생각하던 방향성과는 다르게 흘러갔다.\n\n### 시스템\n\n최근 [더 시스템](https://product.kyobobook.co.kr/detail/S000211656046)을 읽고 있다. 물음표가 생기는 내용도 있었지만 전반적으로는 동의하는 내용이 많아서 흥미롭게\n읽고 있다. 책을 읽으면서 나만의 학습 방법과 시스템은 무엇일까에 물음이 생겨서 정리하는 시간을 가졌다.\n\n꾸준히 달리기와 회고를 이어 나가고 있다. 달리기로 하루를 시작하고 회고로 마무리한다. 하루가 야구처럼 흘러간다. 선발투수 달리기가 등판하고 [TickTick](https://ticktick.\ncom/webapp/)에 등록된 계획들이 구원 투수 역할을 한다. 그리고 마무리 투수 회고가 등판하여 마무리한다. 가끔씩 구원투수에서 예상하지 못한 상황이 생길 때마다 골치 아프다.\n하지만 단기전이 아니라 장기 전이라고 생각하고 꿋꿋하게 이어나가는 편이다.\n\n돌아보니 문제가 많은 시스템이었는데 꾸준히 돌아보며 보완하면 좋겠다.\n\n### 4월\n\n> 여러 가지 패턴 중에 이것이 좋은지, 저것이 좋은지 하루에 한 개만 시도를 해봅니다. 한꺼번에 두 개는 하지 않아요. 그런 다음 이게 좋았어, 이건 어땠지 하면서 매번 시도해\n> 보는 식이죠. 그걸 매일 아이패드에 기록하고 있습니다.\n>\n> 책 <오타니 쇼헤이의 쇼타임> 중\n\n1년이 지났고, 이번달을 돌아봤을 때 가장 인상 깊던 내용이다. 이력서와 시스템을 돌아보니 허점이 많았다. 지금이라도 알아채서 다행이다. 앞으로 마침표를 찍고 다음을 넘어가도록 신경 써야겠다.\n정리한 학습 계획을 중간 이탈 없이 지키고 유의미한 결과를 냈으면 좋겠다.\n"},{"excerpt":"다사다난 한 2월이 끝났다. 1년을 한달 앞 둔 지금, 어떤일이 있었을까? 2월 돌아보기 잔병치레 면역력이 떨어진 모양이다. 이번달에 특히 더 고생했다. 양쪽 귀에 염증도 생기고 속도 안 좋았다. 스트레스를 잘 관리했다고 생각했는데 아니었다.\n몸이 마음대로 안 움직이니 답답했다. 걱정도 더욱 많아지고 생각의 늪에 잠식당할 뻔했다. 몸이 보내는 경고 덕분에…","fields":{"slug":"/retrospective-20240229/"},"frontmatter":{"date":"February 29, 2024","title":"2024 월간 장태근 2월호 'Kingdom'","tags":["회고"]},"rawMarkdownBody":"\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/QM8UMOERycA?si=inBabkaqWiS-qaEC\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n다사다난 한 2월이 끝났다. 1년을 한달 앞 둔 지금, 어떤일이 있었을까?\n\n## 2월 돌아보기\n\n### 잔병치레\n\n면역력이 떨어진 모양이다. 이번달에 특히 더 고생했다. 양쪽 귀에 염증도 생기고 속도 안 좋았다. 스트레스를 잘 관리했다고 생각했는데 아니었다.\n몸이 마음대로 안 움직이니 답답했다. 걱정도 더욱 많아지고 생각의 늪에 잠식당할 뻔했다.\n\n몸이 보내는 경고 덕분에 다시 운동을 시작했다. 최근 나태하고 균형 있게 잠들지도 않았던 나를 다시 돌아볼 수 있는 시간이었다.\n8시간 푹 자는 시간을 제외한 남은 16시간을 알차게 사용해야겠다.\n\n### [30만 수강생 기념] 김영한님 밋업\n\n매일 잠들기 전에 휴대폰 알림을 확인한다. 늘 그렇듯 광고 메시지들이 쌓여있겠지? 하는 생각으로 메시지를 확인했는데 당황스러웠다. 오프라인 밋업에 당첨됐다.\n설레는 마음을 가득안고 인프랩으로 향했다.\n\n![김영한님 오프라인 밋업](inflearn-meet-up.png)\n\n너무 만족스러운 시간이었다. 영한님과 향로님께서 풀어내시는 이야기의 주제들, 답변이 좋았다. 특히 온라인으로 진행되는 라이브가 끝나고 가진 시간이 유익했다.\n라이브 세션은 포괄적인 답변이었다면 오프라인에서 진행된 세션은 다양한 사연들(시니어, 주니어, 취준생)에 가감 없는 답변이 오갔다.\n특히 늦은 시간까지 질문도 정말 많이 받아주셨다. 행사 관계자분들께 감사드립니다.\n\n### 여행\n\n![강원도 묵호 🌅](sunset.png)\n\n오랜만에 가족여행을 다녀왔다. 출발 전까지만 해도 밀린 과제들이 많아서 걱정이 앞섰는데 다녀오길 잘했다. 목 놓아 외치던 바다도 마음껏 보며 바람에 몸을 맡겼다.\n결과적으로 기분전환이 되었고 능률이 향상되었다. 목표를 위해 견디는 것도 좋지만 가끔 기분전환을 해야겠다.\n\n### 블로그\n\n방랑자의 삶을 마치고 **Gatsby로 최종결정했다.**\n\n예전부터 블로그를 만들고 학습내용을 정리하는 방법에 대해 추천받았다. 알고있었지만 괜찮은 플랫폼이 마땅히 보이지 않았고, 결국 각 저장소에 문서를 작성했다.\n그런데 이 방법이 문제가 있었다. 문서를 찾기 어려웠다. 내가 작성한 문서를 찾는데 불필요한 시간 소모가 반복되었다. 이럴거면 어차피 정리하던거 본격적으로 해보자 다짐했다.\n\n## 마치며\n\n한 달 후면 1년이다. 작성하고 하고 싶은 글이 많다. 저장소에 작성된 내용을 다듬어서 발행할 시간이다.\n\n* Series: 노드 웹 프로그래밍 Next Step: 배포하기\n\n적극적으로 살길 바란다. 취업전선에서 지원서도 넣으면서 지내야지. **3월은 더 많이 실패하자.**\n"},{"excerpt":"소중했던 2023년이 가고 2024년이 찾아왔다. 결과만 보았을 때 2023년 한 해는 안식년이었다. 원하는 결과를\n얻지 못했다. 하지만 끝없이 연습하고 나만의 루틴을 찾았다. 의식적인 연습 순탄치 않았다. 오래 쉬었다는 사실이 너무나 체감돼서 더욱더 노력하는 방법밖에 없었다. 견뎠다. 가장 큰 화두는\n꾸준함이다. 개발자를 다시 도전하는 게 맞나? 내가 …","fields":{"slug":"/retrospective-2023/"},"frontmatter":{"date":"January 01, 2024","title":"행보 2023 장태근","tags":["회고","연간회고"]},"rawMarkdownBody":"\n소중했던 2023년이 가고 2024년이 찾아왔다. 결과만 보았을 때 2023년 한 해는 안식년이었다. 원하는 결과를\n얻지 못했다. 하지만 끝없이 연습하고 나만의 루틴을 찾았다.\n\n## 의식적인 연습\n\n순탄치 않았다. 오래 쉬었다는 사실이 너무나 체감돼서 더욱더 노력하는 방법밖에 없었다. 견뎠다. 가장 큰 화두는\n꾸준함이다. 개발자를 다시 도전하는 게 맞나? 내가 잘하고 있는 건가? 의심도 많고 힘들었다. 한편으론 이대로 눈 감으면 마음\n편하지 않을까 싶기도 했다. 하지만 꾸준히 하다 보니 자연스럽게 스스로에게 던진 질문이 해결되고 이제는 확신이 생겼다.\n\n## 마치며\n\n올 해는 소중했던 한 해의 과정을 결과로 증명하는 한 해가 되길 바란다. 더 많은 기회와 위기가 찾아올 것이다. 초심을 잃지 않고\n아무것도 없이 시작했던 나를 믿고 응원해 준 사람들을 생각하며 정진하길 바란다. 할 수 있다.\n"},{"excerpt":"2023.04.28 이전 블로그(Tistory)에서 작성한 글을 옮겼다.  \"아직 많이 부족한데 4월이 끝났다.\" 따분한 일상에서 '어떻게 생산적으로 시간을 보낼 수 있을까?'를 고민한 끝에 책 한 권 읽기를 달성했다.\n처음 주어진 휴일임에도 목표 달성을 위해 노력한 나에게 박수를 보낸다. 어떻게 사랑할 것인가 이동욱(향로)님의 글을 읽으며 '다시 개발자…","fields":{"slug":"/retrospective-20230428/"},"frontmatter":{"date":"April 28, 2023","title":"2023 월간 장태근 4월호 '타협하고 후퇴하지 마라'","tags":["회고"]},"rawMarkdownBody":"\n> 2023.04.28 이전 블로그(Tistory)에서 작성한 글을 옮겼다.\n\n![타협하고 후퇴하지 마라 <출처: 최강야구>](./a-clean-sweep.png)\n\n**\"아직 많이 부족한데 4월이 끝났다.\"**\n\n따분한 일상에서 '어떻게 생산적으로 시간을 보낼 수 있을까?'를 고민한 끝에 책 한 권 읽기를 달성했다.\n처음 주어진 휴일임에도 목표 달성을 위해 노력한 나에게 박수를 보낸다.\n\n## 어떻게 사랑할 것인가\n\n[이동욱(향로)님의 글](https://jojoldu.tistory.com/661)을 읽으며 '다시 개발자를 도전해 볼까?'라는 용기를 얻었다. 끝에 책을 한 권 추천해 주셨는데 이유가 궁금했다.\n\n만족스럽다. 이 책은 저자가 문학에 대해 어떻게 생각하는지, 그리고 왜 필요한지 강연과 함께 질문을 던진다. 한 가지 주제에 대해 질문하고 여러 답변을 들을 수 있었다.\n사례와 비유가 적절해서 자연스럽게 설득된다.\n\n내용 외에도 짧고 술술 읽히는 문장이어서 좋았다. 하루에 대중교통을 이용하는 시간(30분 내외)에만 시간을 사용했는데 한 단원이 읽혔다. 그렇게 총 5일이 걸렸다.\n\n## 마치며\n\n\"부족하다. 그래서 목마르다.\"\n\n'나는 부족해. 그러니깐 일단 누워볼까?'는 항상 선택하던 방식이었다. 하지만 지금은 어떻게든 앞으로 나아가려고 물장구를 친다. 헛손질이어도 좋다.\n나는 내가 제일 잘 알아. 다음 달에는 이번달보다 조금 더 행복하자.\n\n**<참고 자료>**\n\n1. 『어떻게 사랑할 것인가』(장영희, 예담, 2012)\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}