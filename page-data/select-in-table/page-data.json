{"componentChunkName":"component---src-templates-post-jsx","path":"/select-in-table/","result":{"data":{"site":{"siteMetadata":{"title":"장태근블로그"}},"markdownRemark":{"id":"5ea610ef-1aeb-5618-9a0c-0e67d6cc1f08","excerpt":"프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자. SELECT SELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수…","html":"<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 테이블명<span class=\"token punctuation\">;</span></code></pre></div>\n<p>프로그래밍 언어를 배울 때 Hello, World! 출력으로 시작하듯이 데이터 조회는 SQL 명령의 기본이다. 명령을 작성할 때는 마지막에 꼭 세미콜론(;)을 붙여주자.</p>\n<h2>SELECT</h2>\n<p>SELECT는 DML에 해당되고 데이터를 조회할 때 자주 사용한다. SELECT 명령을 '질의' 또는 '쿼리'라고 부른다.\nSQL 명령은 키워드를 기준으로 '구'로 구분할 수 있다.</p>\n<p>예를 들어 다음 쿼리의 경우 SELECT 구, FROM 구를 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> blog<span class=\"token punctuation\">;</span></code></pre></div>\n<p>SELECT 명령은 여러 구로 구성된다. 명령을 작성할 때는 예약어는 대문자로, 객체명은 소문자로 작성하는 방법이 가독성에 좋다.</p>\n<h3>값이 없는 데이터 = NULL</h3>\n<p>NULL은 값이 저장되지 않은 상태를 의미한다. <strong>NULL을 이해하는 것은 SQL에서 중요하다.</strong></p>\n<h2>테이블 구조 참조하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DESC</span> 테이블명<span class=\"token punctuation\">;</span></code></pre></div>\n<p>테이블의 구조를 참조할 때 <code class=\"language-text\">DESC</code> 명령을 사용한다.</p>\n<h2>검색 조건 지정하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 열<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 열<span class=\"token number\">2</span> <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 조건식<span class=\"token punctuation\">;</span></code></pre></div>\n<p>조건을 지정하여 데이터를 조회할 때 <code class=\"language-text\">WHERE</code>구를 사용한다. 조건식에 일치하는 행이 전혀 없을 경우 아무것도 반환하지 않는다.</p>\n<ul>\n<li>WHERE 구로 행을, SELECT 구로 열을 선택한다.</li>\n</ul>\n<p>앞서 별표를 사용하여 전체열을 지정했다. 특정열을 지정할 때는 열명을 지정한다.</p>\n<h3>NULL값 검색</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 열 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 열 <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>조건식을 작성할 때 <code class=\"language-text\">=</code>, <code class=\"language-text\">&lt;></code>와 같은 비교 연산자를 사용했다. 하지만 NULL 값을 다룰 때는 주의가 필요하다. NULL 값을 조회할 때는 <code class=\"language-text\">IS NULL</code>을 사용한다.</p>\n<h2>조건 조합하기</h2>\n<p>논리 연산자 <code class=\"language-text\">AND</code>, <code class=\"language-text\">OR</code>, <code class=\"language-text\">NOT</code>를 사용해서 복잡한 조건 조합이 가능하다.</p>\n<h3>AND로 조합하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">조건식<span class=\"token number\">1</span> <span class=\"token operator\">AND</span> 조건식<span class=\"token number\">2</span> </code></pre></div>\n<p><code class=\"language-text\">AND</code>는 여러 조건을 만족해야 한다. 집합으로 표현하면 '교집합'이다.</p>\n<h3>OR로 조합하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">조건식<span class=\"token number\">1</span> <span class=\"token operator\">OR</span> 조건식<span class=\"token number\">2</span></code></pre></div>\n<p><code class=\"language-text\">OR</code>은 어느 쪽이든 조건을 만족하는 행을 모두 검색한다. 집합으로 표현하면 '합집합'이다.</p>\n<h3>연산자의 우선 순위</h3>\n<p><code class=\"language-text\">AND</code>는 <code class=\"language-text\">OR</code>에 비해 우선순위가 높다. 원하는 결과를 조회하기 위해서는 괄호를 사용한다.</p>\n<h3>NOT으로 조합</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token operator\">NOT</span> 조건식</code></pre></div>\n<p>조건식의 반대 값을 반환한다.</p>\n<h2>패턴 매칭에 의한 검색</h2>\n<p><code class=\"language-text\">LIKE</code> 술어는 문자열의 일부분을 비교하는 '부분 검색'을 할 수 있다. 특정 문자나 문자열을 조회하는 방법을 '패턴매칭' 또는 '부분검색'이라 한다.</p>\n<h3>LIKE로 패턴 매칭하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">열명 <span class=\"token operator\">LIKE</span> <span class=\"token string\">'패턴'</span></code></pre></div>\n<p>패턴을 정의할 때는 메타문자(와일드카드)를 사용한다. 메타문자는 다음과 같다.</p>\n<ul>\n<li>퍼센트(%): 임의의 문자열</li>\n<li>언더스코어(_): 임의의 문자 하나</li>\n<li>와일드카드로 자주 쓰이는 <code class=\"language-text\">*</code>는 LIKE에서 사용할 수 없다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> 열명 <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%\\%%'</span></code></pre></div>\n<p>메타문자 자체를 검색할 때는 '이스케이프' 문자 <code class=\"language-text\">역슬래시(\\)</code>를 사용한다. 간단한 패턴 매칭은 LIKE로 충분하지만 복잡한 패턴을 매칭하는 경우 <code class=\"language-text\">정규 표현식(Regular Expression)</code>을\n사용한다. 정규표현식에서 더 많은 메타문자를 사용해서 폭넓게 패턴을 지정할 수 있다.</p>","frontmatter":{"title":"[SQL 첫걸음] 2. 테이블에서 데이터 검색","date":"April 18, 2024","update":"April 18, 2024","tags":["SQL"],"series":"SQL 첫걸음"},"fields":{"slug":"/select-in-table/","readingTime":{"minutes":4.545}}},"seriesList":{"edges":[{"node":{"id":"180fd598-ec49-596e-8dda-2d88cefa5941","fields":{"slug":"/database-and-sql/"},"frontmatter":{"title":"[SQL 첫걸음] 1. 데이터베이스와 SQL"}}},{"node":{"id":"5ea610ef-1aeb-5618-9a0c-0e67d6cc1f08","fields":{"slug":"/select-in-table/"},"frontmatter":{"title":"[SQL 첫걸음] 2. 테이블에서 데이터 검색"}}}]},"previous":{"fields":{"slug":"/database-and-sql/"},"frontmatter":{"title":"[SQL 첫걸음] 1. 데이터베이스와 SQL"}},"next":{"fields":{"slug":"/intellij-code-convention/"},"frontmatter":{"title":"IntelliJ Code convention 적용하기"}}},"pageContext":{"id":"5ea610ef-1aeb-5618-9a0c-0e67d6cc1f08","series":"SQL 첫걸음","previousPostId":"180fd598-ec49-596e-8dda-2d88cefa5941","nextPostId":"90c58c87-ae91-5d78-9f42-8a9bbeaec3f4"}},"staticQueryHashes":[],"slicesMap":{}}