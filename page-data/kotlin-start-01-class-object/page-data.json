{"componentChunkName":"component---src-templates-post-jsx","path":"/kotlin-start-01-class-object/","result":{"data":{"site":{"siteMetadata":{"title":"장태근블로그"}},"markdownRemark":{"id":"a198ebe6-4af7-51c4-8ff7-8c88f9a25251","excerpt":"객체 클래스 프로퍼티 생성자 가시성 변경자 패키지 테스트 코틀린은 왜 그럴까? 객체는 모든 곳에 존재한다 클래스는 상태와 행동을 정의하여 사용자 정의 타입이 된다. 멤버(member)란 객체에 소속된 프로퍼티, 함수를 의미한다. 객체에 소속된 일원이다. 인스턴스는 객체 생성을 통해 만들어진 결과물이다. 멤버 함수 호출은 메시지를 보내는 행동과 같다. 코틀…","html":"<ul>\n<li>객체</li>\n<li>클래스</li>\n<li>프로퍼티</li>\n<li>생성자</li>\n<li>가시성 변경자</li>\n<li>패키지</li>\n<li>테스트</li>\n<li>코틀린은 왜 그럴까?</li>\n</ul>\n<h2 id=\"객체는-모든-곳에-존재한다\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%8A%94-%EB%AA%A8%EB%93%A0-%EA%B3%B3%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4\" aria-label=\"객체는 모든 곳에 존재한다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>객체는 모든 곳에 존재한다</h2>\n<ul>\n<li>클래스는 상태와 행동을 정의하여 사용자 정의 타입이 된다.</li>\n<li>\n<p>멤버(member)란 객체에 소속된 프로퍼티, 함수를 의미한다.</p>\n<ul>\n<li>객체에 소속된 일원이다.</li>\n</ul>\n</li>\n<li>인스턴스는 객체 생성을 통해 만들어진 결과물이다.</li>\n<li>멤버 함수 호출은 메시지를 보내는 행동과 같다.</li>\n<li>\n<p>코틀린은 명시적으로 타입 변환이 필요하다.</p>\n<ul>\n<li>컴파일러가 임의의 타입을 변환할 때 생기는 혼란을 피하기 위해 내린 결정이다.</li>\n</ul>\n</li>\n<li>이름 짓기는 여전히 중요하다. 이름을 신경 쓰면 이해하기 쉬운 코드에 한 걸음 다가갈 수 있다.</li>\n</ul>\n<h2 id=\"클래스-만들기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"클래스 만들기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>클래스 만들기</h2>\n<ul>\n<li>필요한 개념만 표현하는 '객체'를 떠올리는 행동이 문제 해결의 시발점이다.</li>\n<li>\n<p><code class=\"language-text\">class</code> 키워드를 사용하여 클래스를 선언한다.</p>\n<ul>\n<li>헤더와 본문은 선택 사항이다.</li>\n<li>복잡한 클래스 선언이 필요하면 본문을 구성한다.</li>\n</ul>\n</li>\n<li>\n<p>멤버 함수는 클래스에 속한 함수다. 최상위(top-level) 함수는 클래스에 속하지 않은 함수다.</p>\n<ul>\n<li>함수를 선언하기 위해 <code class=\"language-text\">class</code>가 필요한 자바와 달리 최상위에 선언할 수 있다.</li>\n</ul>\n</li>\n<li>함수가 호출되는 동안 다른 멤버에 접근할 수 있다.</li>\n<li><code class=\"language-text\">this</code> 키워드가 존재한다. 하지만 가급적 불필요한 <code class=\"language-text\">this</code> 사용을 권장하지 않는다.</li>\n</ul>\n<h2 id=\"프로퍼티\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"프로퍼티 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>프로퍼티</h2>\n<blockquote>\n<p>프로퍼티(property)는 클래스에 속한 <code class=\"language-text\">var</code>, <code class=\"language-text\">val</code>이다.</p>\n</blockquote>\n<ul>\n<li>\n<p>멤버 함수는 점 표기법 외에도 자신이 속한 객체의 프로퍼티에 접근할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">this</code> 키워드를 사용할 수 있지만 권장하지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>가변(var, mutable) 최상위 프로퍼티 선언하기는 안티 패턴이다.</p>\n<ul>\n<li>프로그램이 복잡할수록 공유된 가변 상태를 추론하기 어렵다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">var</code>를 사용하면 참조 대상을 다른 대상으로 변경할 수 있다.</li>\n<li><code class=\"language-text\">val</code>를 사용하면 참조 대상을 변경할 수 없다.</li>\n<li>가변성이란 내부 상태를 바꿀 수 있는 상태를 의미한다.</li>\n</ul>\n<h2 id=\"생성자\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"생성자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>생성자</h2>\n<blockquote>\n<p>객체를 효과적으로 초기화하는 기본적인 방법</p>\n</blockquote>\n<ul>\n<li>\n<p>클래스 본문 밖에서도 생성자 파라미터에 접근하기 위해서는 <code class=\"language-text\">var</code>, <code class=\"language-text\">val</code> 키워드를 사용해야 한다.</p>\n<ul>\n<li>식별자가 프로퍼티로 변경된다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">override</code>는 이미 정의된 함수를 재정의 하겠다는 의도를 전달한다.</li>\n</ul>\n<h2 id=\"가시성-변경자\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%8B%9C%EC%84%B1-%EB%B3%80%EA%B2%BD%EC%9E%90\" aria-label=\"가시성 변경자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>가시성 변경자</h2>\n<blockquote>\n<p>작성한 코드를 다시 보면 더 좋은 방법이 떠오른다.</p>\n</blockquote>\n<ul>\n<li>리팩터링(refactoring)을 하는 이유는 코드를 다듬어 유지 보수하기 좋은 코드를 작성하기 위해서다.</li>\n<li>\n<p>소비자는 버전이 변경돼도 기능이 똑같이 동작하길 원한다. 새로운 코드를 작성하고 싶지 않다. 생산자도 마찬가지다. 변경하는 내용이 소비자에게 영향을 끼치지 않는다는 확신을 가지고 개선하고 싶다.</p>\n<ul>\n<li>확신을 주는 장치는 자동화된 테스트다.</li>\n</ul>\n</li>\n<li>소프트웨어를 설계할 때 변경해야 하는 요소와 유지되어야 하는 요소를 분리해야 한다.</li>\n<li>가시성 변경자를 통해 영역을 분리한다.</li>\n<li><code class=\"language-text\">private</code>는 주로 클래스 멤버에 사용한다.</li>\n<li>\n<p>필요한 함수와 클래스만 외부에 공개하고 가능한 많은 요소를 <code class=\"language-text\">private</code>로 선언한다.</p>\n<ul>\n<li>리모컨을 사용할 때 내부의 구조를 알지 못해도 사용할 수 있듯이 클라이언트에게 필요한 부분만 공개하고 내부 구현을 숨긴다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"패키지\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-label=\"패키지 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>패키지</h2>\n<blockquote>\n<p>DRY(Don't Repeat Yourself)</p>\n</blockquote>\n<ul>\n<li>\n<p>같은 내용이 반복될 때 이를 수정, 개선하기 위해서는 더 많은 고통을 인내해야 한다.</p>\n<ul>\n<li>중복은 실수 할 여지가 크다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">import</code>를 사용하여 코드를 재사용한다.</li>\n<li>패키지(package)는 연관 있는 코드를 모아둔 공간이다.</li>\n<li><code class=\"language-text\">as</code> 키워드를 사용하여 <code class=\"language-text\">import</code> 할 때 이름을 변경할 수 있다.</li>\n<li>패키지 이름은 소문자만 사용한다.</li>\n</ul>\n<h2 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>테스트</h2>\n<blockquote>\n<p>프로그램을 빠르게 개발하기 위해서는 지속적인 테스트가 필수다.</p>\n</blockquote>\n<ul>\n<li>\n<p>코드의 동작을 검증할 때 <code class=\"language-text\">println()</code>은 부실한 방법이다. 매번 출력을 자세히 살펴보고 의식적으로 확인해야 한다.</p>\n<ul>\n<li>오류를 찾는데 시각적인 검사를 신뢰할 수 없다.</li>\n</ul>\n</li>\n<li>테스트를 배우면 테스트가 포함되지 않은 코드를 보면 점점 불편해지고, 테스트가 없는 코드는 틀린 코드라고 정의하기도 한다.</li>\n</ul>\n<h3 id=\"테스트-프레임워크\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-label=\"테스트 프레임워크 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>테스트 프레임워크</h3>\n<ul>\n<li><a href=\"https://junit.org/junit5/\">JUnit</a>: 자바에서 가장 널리 쓰인다. 코틀린에서도 유용하다.</li>\n<li><a href=\"https://kotest.io/\">Kotest</a>: 코틀린 전용으로 설계됐다. 언어의 여러 기능을 살려 작성 가능하다.</li>\n<li><a href=\"https://www.spekframework.org/\">Spek</a>: 명세 테스트(specification test)라는 다른 형태의 테스트를 제공한다.</li>\n</ul>\n<h3 id=\"테스트는-프로그램의-일부분이다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%9D%BC%EB%B6%80%EB%B6%84%EC%9D%B4%EB%8B%A4\" aria-label=\"테스트는 프로그램의 일부분이다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>테스트는 프로그램의 일부분이다</h3>\n<ul>\n<li>소프트웨어 개발 과정에 테스트가 포함되어 있어야 자연스럽고 효과적이다.</li>\n</ul>\n<h2 id=\"코틀린은-왜-그럴까\" style=\"position:relative;\"><a href=\"#%EC%BD%94%ED%8B%80%EB%A6%B0%EC%9D%80-%EC%99%9C-%EA%B7%B8%EB%9F%B4%EA%B9%8C\" aria-label=\"코틀린은 왜 그럴까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>코틀린은 왜 그럴까?</h2>\n<p>사소하지만 왜 그럴지 나름의 근거로 추론한다.</p>\n<ul>\n<li>Member function vs. Method</li>\n<li>Visibility modifier vs. Access modifier</li>\n<li>JUnit vs. Kotest</li>\n</ul>\n<h3 id=\"Member-function-vs-Method\" style=\"position:relative;\"><a href=\"#Member-function-vs-Method\" aria-label=\"Member function vs Method permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Member function vs. Method</h3>\n<p>클래스에 소속된 함수는 보통 메서드(method)라고 부른다. 하지만 코틀린 공식 문서는 '멤버 함수(member function)'라고 지칭한다.</p>\n<p>코틀린은 <code class=\"language-text\">class</code> 없이도 최상위(top-level) 함수를 선언할 수 있다. 더불어 메서드도 사실 함수가 아닐까? 클래스에 소속된 함수는 멤버 함수, 소속되지 않은 함수는 함수라고\n부르면 자연스럽다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>마치며</h2>\n<p><strong>&#x3C;참고 자료></strong></p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/classes.html\">Kotlin Docs 'Classes'</a></li>\n<li><a href=\"https://kotlinlang.org/docs/properties.html\">Kotlin Docs 'Properties'</a></li>\n<li><a href=\"https://kotlinlang.org/docs/visibility-modifiers.html\">Kotlin Docs 'Visibility modifiers'</a></li>\n</ul>","frontmatter":{"title":"객체 | 코틀린 입문 EP.1","date":"January 01, 2025","update":"January 01, 2025","tags":["Kotlin"],"series":"Welcome to the Kotlin"},"fields":{"slug":"/kotlin-start-01-class-object/","readingTime":{"minutes":7.855}}},"seriesList":{"edges":[{"node":{"id":"a198ebe6-4af7-51c4-8ff7-8c88f9a25251","fields":{"slug":"/kotlin-start-01-class-object/"},"frontmatter":{"title":"객체 | 코틀린 입문 EP.1"}}}]},"previous":{"fields":{"slug":"/retrospective-2024/"},"frontmatter":{"title":"행보 2024 장태근 'Love wins all'"}},"next":{"fields":{"slug":"/into-the-impossible/"},"frontmatter":{"title":"물리학자는 두뇌를 믿지 않는다"}}},"pageContext":{"id":"a198ebe6-4af7-51c4-8ff7-8c88f9a25251","series":"Welcome to the Kotlin","previousPostId":"bd39e265-db5c-514d-872c-272f9c717d8c","nextPostId":"f3b0b5b5-e2e4-5536-a696-19aac60e7940"}},"staticQueryHashes":[],"slicesMap":{}}